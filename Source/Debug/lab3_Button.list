
lab3_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002968  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a74  08002a74  00012a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a98  08002a98  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002a98  08002a98  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a98  08002a98  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a98  08002a98  00012a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a9c  08002a9c  00012a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000024  08002ac4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002ac4  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008524  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c0c  00000000  00000000  000285b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  0002a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007cc  00000000  00000000  0002abf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016f64  00000000  00000000  0002b3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb1e  00000000  00000000  00042328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000846e3  00000000  00000000  0004ee46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000288c  00000000  00000000  000d352c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000d5db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a5c 	.word	0x08002a5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08002a5c 	.word	0x08002a5c

0800014c <update7SegBuffer>:
#include "7segs.h"

#define NUM_7SEG 4
int led_buffer[NUM_7SEG] = { 9, 8, 7, 6 };

void update7SegBuffer(int val1, int val2) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	if (val1 < 0 || val1 > 99 || val2 < 0 || val2 > 99)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2b00      	cmp	r3, #0
 800015a:	db37      	blt.n	80001cc <update7SegBuffer+0x80>
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2b63      	cmp	r3, #99	; 0x63
 8000160:	dc34      	bgt.n	80001cc <update7SegBuffer+0x80>
 8000162:	683b      	ldr	r3, [r7, #0]
 8000164:	2b00      	cmp	r3, #0
 8000166:	db31      	blt.n	80001cc <update7SegBuffer+0x80>
 8000168:	683b      	ldr	r3, [r7, #0]
 800016a:	2b63      	cmp	r3, #99	; 0x63
 800016c:	dc2e      	bgt.n	80001cc <update7SegBuffer+0x80>
		return;
	led_buffer[0] = val1 / 10;
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	4a19      	ldr	r2, [pc, #100]	; (80001d8 <update7SegBuffer+0x8c>)
 8000172:	fb82 1203 	smull	r1, r2, r2, r3
 8000176:	1092      	asrs	r2, r2, #2
 8000178:	17db      	asrs	r3, r3, #31
 800017a:	1ad3      	subs	r3, r2, r3
 800017c:	4a17      	ldr	r2, [pc, #92]	; (80001dc <update7SegBuffer+0x90>)
 800017e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = val1 % 10;
 8000180:	6879      	ldr	r1, [r7, #4]
 8000182:	4b15      	ldr	r3, [pc, #84]	; (80001d8 <update7SegBuffer+0x8c>)
 8000184:	fb83 2301 	smull	r2, r3, r3, r1
 8000188:	109a      	asrs	r2, r3, #2
 800018a:	17cb      	asrs	r3, r1, #31
 800018c:	1ad2      	subs	r2, r2, r3
 800018e:	4613      	mov	r3, r2
 8000190:	009b      	lsls	r3, r3, #2
 8000192:	4413      	add	r3, r2
 8000194:	005b      	lsls	r3, r3, #1
 8000196:	1aca      	subs	r2, r1, r3
 8000198:	4b10      	ldr	r3, [pc, #64]	; (80001dc <update7SegBuffer+0x90>)
 800019a:	605a      	str	r2, [r3, #4]
	led_buffer[2] = val2 / 10;
 800019c:	683b      	ldr	r3, [r7, #0]
 800019e:	4a0e      	ldr	r2, [pc, #56]	; (80001d8 <update7SegBuffer+0x8c>)
 80001a0:	fb82 1203 	smull	r1, r2, r2, r3
 80001a4:	1092      	asrs	r2, r2, #2
 80001a6:	17db      	asrs	r3, r3, #31
 80001a8:	1ad3      	subs	r3, r2, r3
 80001aa:	4a0c      	ldr	r2, [pc, #48]	; (80001dc <update7SegBuffer+0x90>)
 80001ac:	6093      	str	r3, [r2, #8]
	led_buffer[3] = val2 % 10;
 80001ae:	6839      	ldr	r1, [r7, #0]
 80001b0:	4b09      	ldr	r3, [pc, #36]	; (80001d8 <update7SegBuffer+0x8c>)
 80001b2:	fb83 2301 	smull	r2, r3, r3, r1
 80001b6:	109a      	asrs	r2, r3, #2
 80001b8:	17cb      	asrs	r3, r1, #31
 80001ba:	1ad2      	subs	r2, r2, r3
 80001bc:	4613      	mov	r3, r2
 80001be:	009b      	lsls	r3, r3, #2
 80001c0:	4413      	add	r3, r2
 80001c2:	005b      	lsls	r3, r3, #1
 80001c4:	1aca      	subs	r2, r1, r3
 80001c6:	4b05      	ldr	r3, [pc, #20]	; (80001dc <update7SegBuffer+0x90>)
 80001c8:	60da      	str	r2, [r3, #12]
 80001ca:	e000      	b.n	80001ce <update7SegBuffer+0x82>
		return;
 80001cc:	bf00      	nop
}
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	66666667 	.word	0x66666667
 80001dc:	20000000 	.word	0x20000000

080001e0 <display7SEG>:

/*Function to display num on 7 segments led
 *Because pullup so 0 is on, 1 is off
 */

void display7SEG(uint8_t num) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
	if (num == 1) {
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	2b01      	cmp	r3, #1
 80001ee:	d126      	bne.n	800023e <display7SEG+0x5e>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 0);
 80001f0:	2200      	movs	r2, #0
 80001f2:	2101      	movs	r1, #1
 80001f4:	48ba      	ldr	r0, [pc, #744]	; (80004e0 <display7SEG+0x300>)
 80001f6:	f001 fc10 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 1);
 80001fa:	2201      	movs	r2, #1
 80001fc:	2102      	movs	r1, #2
 80001fe:	48b8      	ldr	r0, [pc, #736]	; (80004e0 <display7SEG+0x300>)
 8000200:	f001 fc0b 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 1);
 8000204:	2201      	movs	r2, #1
 8000206:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800020a:	48b5      	ldr	r0, [pc, #724]	; (80004e0 <display7SEG+0x300>)
 800020c:	f001 fc05 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 0);
 8000210:	2200      	movs	r2, #0
 8000212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000216:	48b2      	ldr	r0, [pc, #712]	; (80004e0 <display7SEG+0x300>)
 8000218:	f001 fbff 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 0);
 800021c:	2200      	movs	r2, #0
 800021e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000222:	48af      	ldr	r0, [pc, #700]	; (80004e0 <display7SEG+0x300>)
 8000224:	f001 fbf9 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 0);
 8000228:	2200      	movs	r2, #0
 800022a:	2120      	movs	r1, #32
 800022c:	48ac      	ldr	r0, [pc, #688]	; (80004e0 <display7SEG+0x300>)
 800022e:	f001 fbf4 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 0);
 8000232:	2200      	movs	r2, #0
 8000234:	2140      	movs	r1, #64	; 0x40
 8000236:	48aa      	ldr	r0, [pc, #680]	; (80004e0 <display7SEG+0x300>)
 8000238:	f001 fbef 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 1);
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 1);
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 1);
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 0);
	}
}
 800023c:	e17b      	b.n	8000536 <display7SEG+0x356>
	} else if (num == 2) {
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	2b02      	cmp	r3, #2
 8000242:	d126      	bne.n	8000292 <display7SEG+0xb2>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 1);
 8000244:	2201      	movs	r2, #1
 8000246:	2101      	movs	r1, #1
 8000248:	48a5      	ldr	r0, [pc, #660]	; (80004e0 <display7SEG+0x300>)
 800024a:	f001 fbe6 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 1);
 800024e:	2201      	movs	r2, #1
 8000250:	2102      	movs	r1, #2
 8000252:	48a3      	ldr	r0, [pc, #652]	; (80004e0 <display7SEG+0x300>)
 8000254:	f001 fbe1 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 0);
 8000258:	2200      	movs	r2, #0
 800025a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800025e:	48a0      	ldr	r0, [pc, #640]	; (80004e0 <display7SEG+0x300>)
 8000260:	f001 fbdb 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 1);
 8000264:	2201      	movs	r2, #1
 8000266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800026a:	489d      	ldr	r0, [pc, #628]	; (80004e0 <display7SEG+0x300>)
 800026c:	f001 fbd5 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 1);
 8000270:	2201      	movs	r2, #1
 8000272:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000276:	489a      	ldr	r0, [pc, #616]	; (80004e0 <display7SEG+0x300>)
 8000278:	f001 fbcf 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 0);
 800027c:	2200      	movs	r2, #0
 800027e:	2120      	movs	r1, #32
 8000280:	4897      	ldr	r0, [pc, #604]	; (80004e0 <display7SEG+0x300>)
 8000282:	f001 fbca 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 1);
 8000286:	2201      	movs	r2, #1
 8000288:	2140      	movs	r1, #64	; 0x40
 800028a:	4895      	ldr	r0, [pc, #596]	; (80004e0 <display7SEG+0x300>)
 800028c:	f001 fbc5 	bl	8001a1a <HAL_GPIO_WritePin>
}
 8000290:	e151      	b.n	8000536 <display7SEG+0x356>
	} else if (num == 3) {
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	2b03      	cmp	r3, #3
 8000296:	d126      	bne.n	80002e6 <display7SEG+0x106>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 1);
 8000298:	2201      	movs	r2, #1
 800029a:	2101      	movs	r1, #1
 800029c:	4890      	ldr	r0, [pc, #576]	; (80004e0 <display7SEG+0x300>)
 800029e:	f001 fbbc 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 1);
 80002a2:	2201      	movs	r2, #1
 80002a4:	2102      	movs	r1, #2
 80002a6:	488e      	ldr	r0, [pc, #568]	; (80004e0 <display7SEG+0x300>)
 80002a8:	f001 fbb7 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 1);
 80002ac:	2201      	movs	r2, #1
 80002ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002b2:	488b      	ldr	r0, [pc, #556]	; (80004e0 <display7SEG+0x300>)
 80002b4:	f001 fbb1 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 1);
 80002b8:	2201      	movs	r2, #1
 80002ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002be:	4888      	ldr	r0, [pc, #544]	; (80004e0 <display7SEG+0x300>)
 80002c0:	f001 fbab 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 0);
 80002c4:	2200      	movs	r2, #0
 80002c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002ca:	4885      	ldr	r0, [pc, #532]	; (80004e0 <display7SEG+0x300>)
 80002cc:	f001 fba5 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 0);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2120      	movs	r1, #32
 80002d4:	4882      	ldr	r0, [pc, #520]	; (80004e0 <display7SEG+0x300>)
 80002d6:	f001 fba0 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 1);
 80002da:	2201      	movs	r2, #1
 80002dc:	2140      	movs	r1, #64	; 0x40
 80002de:	4880      	ldr	r0, [pc, #512]	; (80004e0 <display7SEG+0x300>)
 80002e0:	f001 fb9b 	bl	8001a1a <HAL_GPIO_WritePin>
}
 80002e4:	e127      	b.n	8000536 <display7SEG+0x356>
	} else if (num == 4) {
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2b04      	cmp	r3, #4
 80002ea:	d126      	bne.n	800033a <display7SEG+0x15a>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 0);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2101      	movs	r1, #1
 80002f0:	487b      	ldr	r0, [pc, #492]	; (80004e0 <display7SEG+0x300>)
 80002f2:	f001 fb92 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 1);
 80002f6:	2201      	movs	r2, #1
 80002f8:	2102      	movs	r1, #2
 80002fa:	4879      	ldr	r0, [pc, #484]	; (80004e0 <display7SEG+0x300>)
 80002fc:	f001 fb8d 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 1);
 8000300:	2201      	movs	r2, #1
 8000302:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000306:	4876      	ldr	r0, [pc, #472]	; (80004e0 <display7SEG+0x300>)
 8000308:	f001 fb87 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 0);
 800030c:	2200      	movs	r2, #0
 800030e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000312:	4873      	ldr	r0, [pc, #460]	; (80004e0 <display7SEG+0x300>)
 8000314:	f001 fb81 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 0);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800031e:	4870      	ldr	r0, [pc, #448]	; (80004e0 <display7SEG+0x300>)
 8000320:	f001 fb7b 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 1);
 8000324:	2201      	movs	r2, #1
 8000326:	2120      	movs	r1, #32
 8000328:	486d      	ldr	r0, [pc, #436]	; (80004e0 <display7SEG+0x300>)
 800032a:	f001 fb76 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 1);
 800032e:	2201      	movs	r2, #1
 8000330:	2140      	movs	r1, #64	; 0x40
 8000332:	486b      	ldr	r0, [pc, #428]	; (80004e0 <display7SEG+0x300>)
 8000334:	f001 fb71 	bl	8001a1a <HAL_GPIO_WritePin>
}
 8000338:	e0fd      	b.n	8000536 <display7SEG+0x356>
	} else if (num == 5) {
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2b05      	cmp	r3, #5
 800033e:	d126      	bne.n	800038e <display7SEG+0x1ae>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 1);
 8000340:	2201      	movs	r2, #1
 8000342:	2101      	movs	r1, #1
 8000344:	4866      	ldr	r0, [pc, #408]	; (80004e0 <display7SEG+0x300>)
 8000346:	f001 fb68 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 0);
 800034a:	2200      	movs	r2, #0
 800034c:	2102      	movs	r1, #2
 800034e:	4864      	ldr	r0, [pc, #400]	; (80004e0 <display7SEG+0x300>)
 8000350:	f001 fb63 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 1);
 8000354:	2201      	movs	r2, #1
 8000356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800035a:	4861      	ldr	r0, [pc, #388]	; (80004e0 <display7SEG+0x300>)
 800035c:	f001 fb5d 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 1);
 8000360:	2201      	movs	r2, #1
 8000362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000366:	485e      	ldr	r0, [pc, #376]	; (80004e0 <display7SEG+0x300>)
 8000368:	f001 fb57 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 0);
 800036c:	2200      	movs	r2, #0
 800036e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000372:	485b      	ldr	r0, [pc, #364]	; (80004e0 <display7SEG+0x300>)
 8000374:	f001 fb51 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 1);
 8000378:	2201      	movs	r2, #1
 800037a:	2120      	movs	r1, #32
 800037c:	4858      	ldr	r0, [pc, #352]	; (80004e0 <display7SEG+0x300>)
 800037e:	f001 fb4c 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 1);
 8000382:	2201      	movs	r2, #1
 8000384:	2140      	movs	r1, #64	; 0x40
 8000386:	4856      	ldr	r0, [pc, #344]	; (80004e0 <display7SEG+0x300>)
 8000388:	f001 fb47 	bl	8001a1a <HAL_GPIO_WritePin>
}
 800038c:	e0d3      	b.n	8000536 <display7SEG+0x356>
	} else if (num == 6) {
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	2b06      	cmp	r3, #6
 8000392:	d126      	bne.n	80003e2 <display7SEG+0x202>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 1);
 8000394:	2201      	movs	r2, #1
 8000396:	2101      	movs	r1, #1
 8000398:	4851      	ldr	r0, [pc, #324]	; (80004e0 <display7SEG+0x300>)
 800039a:	f001 fb3e 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	2102      	movs	r1, #2
 80003a2:	484f      	ldr	r0, [pc, #316]	; (80004e0 <display7SEG+0x300>)
 80003a4:	f001 fb39 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 1);
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ae:	484c      	ldr	r0, [pc, #304]	; (80004e0 <display7SEG+0x300>)
 80003b0:	f001 fb33 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 1);
 80003b4:	2201      	movs	r2, #1
 80003b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ba:	4849      	ldr	r0, [pc, #292]	; (80004e0 <display7SEG+0x300>)
 80003bc:	f001 fb2d 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 1);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003c6:	4846      	ldr	r0, [pc, #280]	; (80004e0 <display7SEG+0x300>)
 80003c8:	f001 fb27 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 1);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2120      	movs	r1, #32
 80003d0:	4843      	ldr	r0, [pc, #268]	; (80004e0 <display7SEG+0x300>)
 80003d2:	f001 fb22 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 1);
 80003d6:	2201      	movs	r2, #1
 80003d8:	2140      	movs	r1, #64	; 0x40
 80003da:	4841      	ldr	r0, [pc, #260]	; (80004e0 <display7SEG+0x300>)
 80003dc:	f001 fb1d 	bl	8001a1a <HAL_GPIO_WritePin>
}
 80003e0:	e0a9      	b.n	8000536 <display7SEG+0x356>
	} else if (num == 7) {
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	2b07      	cmp	r3, #7
 80003e6:	d126      	bne.n	8000436 <display7SEG+0x256>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 1);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2101      	movs	r1, #1
 80003ec:	483c      	ldr	r0, [pc, #240]	; (80004e0 <display7SEG+0x300>)
 80003ee:	f001 fb14 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 1);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2102      	movs	r1, #2
 80003f6:	483a      	ldr	r0, [pc, #232]	; (80004e0 <display7SEG+0x300>)
 80003f8:	f001 fb0f 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 1);
 80003fc:	2201      	movs	r2, #1
 80003fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000402:	4837      	ldr	r0, [pc, #220]	; (80004e0 <display7SEG+0x300>)
 8000404:	f001 fb09 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 0);
 8000408:	2200      	movs	r2, #0
 800040a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040e:	4834      	ldr	r0, [pc, #208]	; (80004e0 <display7SEG+0x300>)
 8000410:	f001 fb03 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 0);
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800041a:	4831      	ldr	r0, [pc, #196]	; (80004e0 <display7SEG+0x300>)
 800041c:	f001 fafd 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 0);
 8000420:	2200      	movs	r2, #0
 8000422:	2120      	movs	r1, #32
 8000424:	482e      	ldr	r0, [pc, #184]	; (80004e0 <display7SEG+0x300>)
 8000426:	f001 faf8 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	2140      	movs	r1, #64	; 0x40
 800042e:	482c      	ldr	r0, [pc, #176]	; (80004e0 <display7SEG+0x300>)
 8000430:	f001 faf3 	bl	8001a1a <HAL_GPIO_WritePin>
}
 8000434:	e07f      	b.n	8000536 <display7SEG+0x356>
	} else if (num == 8) {
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	2b08      	cmp	r3, #8
 800043a:	d126      	bne.n	800048a <display7SEG+0x2aa>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 1);
 800043c:	2201      	movs	r2, #1
 800043e:	2101      	movs	r1, #1
 8000440:	4827      	ldr	r0, [pc, #156]	; (80004e0 <display7SEG+0x300>)
 8000442:	f001 faea 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 1);
 8000446:	2201      	movs	r2, #1
 8000448:	2102      	movs	r1, #2
 800044a:	4825      	ldr	r0, [pc, #148]	; (80004e0 <display7SEG+0x300>)
 800044c:	f001 fae5 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 1);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000456:	4822      	ldr	r0, [pc, #136]	; (80004e0 <display7SEG+0x300>)
 8000458:	f001 fadf 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 1);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000462:	481f      	ldr	r0, [pc, #124]	; (80004e0 <display7SEG+0x300>)
 8000464:	f001 fad9 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 1);
 8000468:	2201      	movs	r2, #1
 800046a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800046e:	481c      	ldr	r0, [pc, #112]	; (80004e0 <display7SEG+0x300>)
 8000470:	f001 fad3 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 1);
 8000474:	2201      	movs	r2, #1
 8000476:	2120      	movs	r1, #32
 8000478:	4819      	ldr	r0, [pc, #100]	; (80004e0 <display7SEG+0x300>)
 800047a:	f001 face 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 1);
 800047e:	2201      	movs	r2, #1
 8000480:	2140      	movs	r1, #64	; 0x40
 8000482:	4817      	ldr	r0, [pc, #92]	; (80004e0 <display7SEG+0x300>)
 8000484:	f001 fac9 	bl	8001a1a <HAL_GPIO_WritePin>
}
 8000488:	e055      	b.n	8000536 <display7SEG+0x356>
	} else if (num == 9) {
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	2b09      	cmp	r3, #9
 800048e:	d129      	bne.n	80004e4 <display7SEG+0x304>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 1);
 8000490:	2201      	movs	r2, #1
 8000492:	2101      	movs	r1, #1
 8000494:	4812      	ldr	r0, [pc, #72]	; (80004e0 <display7SEG+0x300>)
 8000496:	f001 fac0 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 1);
 800049a:	2201      	movs	r2, #1
 800049c:	2102      	movs	r1, #2
 800049e:	4810      	ldr	r0, [pc, #64]	; (80004e0 <display7SEG+0x300>)
 80004a0:	f001 fabb 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 1);
 80004a4:	2201      	movs	r2, #1
 80004a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004aa:	480d      	ldr	r0, [pc, #52]	; (80004e0 <display7SEG+0x300>)
 80004ac:	f001 fab5 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 1);
 80004b0:	2201      	movs	r2, #1
 80004b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b6:	480a      	ldr	r0, [pc, #40]	; (80004e0 <display7SEG+0x300>)
 80004b8:	f001 faaf 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 0);
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004c2:	4807      	ldr	r0, [pc, #28]	; (80004e0 <display7SEG+0x300>)
 80004c4:	f001 faa9 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2120      	movs	r1, #32
 80004cc:	4804      	ldr	r0, [pc, #16]	; (80004e0 <display7SEG+0x300>)
 80004ce:	f001 faa4 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 1);
 80004d2:	2201      	movs	r2, #1
 80004d4:	2140      	movs	r1, #64	; 0x40
 80004d6:	4802      	ldr	r0, [pc, #8]	; (80004e0 <display7SEG+0x300>)
 80004d8:	f001 fa9f 	bl	8001a1a <HAL_GPIO_WritePin>
}
 80004dc:	e02b      	b.n	8000536 <display7SEG+0x356>
 80004de:	bf00      	nop
 80004e0:	40010c00 	.word	0x40010c00
	} else if (num == 0) {
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d125      	bne.n	8000536 <display7SEG+0x356>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 1);
 80004ea:	2201      	movs	r2, #1
 80004ec:	2101      	movs	r1, #1
 80004ee:	4814      	ldr	r0, [pc, #80]	; (8000540 <display7SEG+0x360>)
 80004f0:	f001 fa93 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2102      	movs	r1, #2
 80004f8:	4811      	ldr	r0, [pc, #68]	; (8000540 <display7SEG+0x360>)
 80004fa:	f001 fa8e 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 1);
 80004fe:	2201      	movs	r2, #1
 8000500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000504:	480e      	ldr	r0, [pc, #56]	; (8000540 <display7SEG+0x360>)
 8000506:	f001 fa88 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 1);
 800050a:	2201      	movs	r2, #1
 800050c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <display7SEG+0x360>)
 8000512:	f001 fa82 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 1);
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800051c:	4808      	ldr	r0, [pc, #32]	; (8000540 <display7SEG+0x360>)
 800051e:	f001 fa7c 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 1);
 8000522:	2201      	movs	r2, #1
 8000524:	2120      	movs	r1, #32
 8000526:	4806      	ldr	r0, [pc, #24]	; (8000540 <display7SEG+0x360>)
 8000528:	f001 fa77 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2140      	movs	r1, #64	; 0x40
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <display7SEG+0x360>)
 8000532:	f001 fa72 	bl	8001a1a <HAL_GPIO_WritePin>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40010c00 	.word	0x40010c00

08000544 <update7SEG>:

//Function to scan 7 seg led
void update7SEG(uint8_t index) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	switch (index) {
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	2b03      	cmp	r3, #3
 8000552:	f200 8083 	bhi.w	800065c <update7SEG+0x118>
 8000556:	a201      	add	r2, pc, #4	; (adr r2, 800055c <update7SEG+0x18>)
 8000558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055c:	0800056d 	.word	0x0800056d
 8000560:	080005a9 	.word	0x080005a9
 8000564:	080005e5 	.word	0x080005e5
 8000568:	08000621 	.word	0x08000621
	case 0:
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG1, 1);
 800056c:	2201      	movs	r2, #1
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	4848      	ldr	r0, [pc, #288]	; (8000694 <update7SEG+0x150>)
 8000572:	f001 fa52 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG2, 1);
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800057c:	4845      	ldr	r0, [pc, #276]	; (8000694 <update7SEG+0x150>)
 800057e:	f001 fa4c 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG3, 1);
 8000582:	2201      	movs	r2, #1
 8000584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000588:	4842      	ldr	r0, [pc, #264]	; (8000694 <update7SEG+0x150>)
 800058a:	f001 fa46 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG4, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000594:	483f      	ldr	r0, [pc, #252]	; (8000694 <update7SEG+0x150>)
 8000596:	f001 fa40 	bl	8001a1a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 800059a:	4b3f      	ldr	r3, [pc, #252]	; (8000698 <update7SEG+0x154>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fe1d 	bl	80001e0 <display7SEG>
		break;
 80005a6:	e071      	b.n	800068c <update7SEG+0x148>
	case 1:
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG1, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2180      	movs	r1, #128	; 0x80
 80005ac:	4839      	ldr	r0, [pc, #228]	; (8000694 <update7SEG+0x150>)
 80005ae:	f001 fa34 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG2, 1);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b8:	4836      	ldr	r0, [pc, #216]	; (8000694 <update7SEG+0x150>)
 80005ba:	f001 fa2e 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG3, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c4:	4833      	ldr	r0, [pc, #204]	; (8000694 <update7SEG+0x150>)
 80005c6:	f001 fa28 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG4, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	4830      	ldr	r0, [pc, #192]	; (8000694 <update7SEG+0x150>)
 80005d2:	f001 fa22 	bl	8001a1a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 80005d6:	4b30      	ldr	r3, [pc, #192]	; (8000698 <update7SEG+0x154>)
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff fdff 	bl	80001e0 <display7SEG>
		break;
 80005e2:	e053      	b.n	800068c <update7SEG+0x148>
	case 2:
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG1, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	482a      	ldr	r0, [pc, #168]	; (8000694 <update7SEG+0x150>)
 80005ea:	f001 fa16 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG2, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f4:	4827      	ldr	r0, [pc, #156]	; (8000694 <update7SEG+0x150>)
 80005f6:	f001 fa10 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG3, 1);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000600:	4824      	ldr	r0, [pc, #144]	; (8000694 <update7SEG+0x150>)
 8000602:	f001 fa0a 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG4, 1);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060c:	4821      	ldr	r0, [pc, #132]	; (8000694 <update7SEG+0x150>)
 800060e:	f001 fa04 	bl	8001a1a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <update7SEG+0x154>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fde1 	bl	80001e0 <display7SEG>
		break;
 800061e:	e035      	b.n	800068c <update7SEG+0x148>
	case 3:
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG1, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	481b      	ldr	r0, [pc, #108]	; (8000694 <update7SEG+0x150>)
 8000626:	f001 f9f8 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG2, 1);
 800062a:	2201      	movs	r2, #1
 800062c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000630:	4818      	ldr	r0, [pc, #96]	; (8000694 <update7SEG+0x150>)
 8000632:	f001 f9f2 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG3, 1);
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063c:	4815      	ldr	r0, [pc, #84]	; (8000694 <update7SEG+0x150>)
 800063e:	f001 f9ec 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG4, 1);
 8000642:	2201      	movs	r2, #1
 8000644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000648:	4812      	ldr	r0, [pc, #72]	; (8000694 <update7SEG+0x150>)
 800064a:	f001 f9e6 	bl	8001a1a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <update7SEG+0x154>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fdc3 	bl	80001e0 <display7SEG>
		break;
 800065a:	e017      	b.n	800068c <update7SEG+0x148>
	default:
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG1, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2180      	movs	r1, #128	; 0x80
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <update7SEG+0x150>)
 8000662:	f001 f9da 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG2, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	4809      	ldr	r0, [pc, #36]	; (8000694 <update7SEG+0x150>)
 800066e:	f001 f9d4 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG3, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000678:	4806      	ldr	r0, [pc, #24]	; (8000694 <update7SEG+0x150>)
 800067a:	f001 f9ce 	bl	8001a1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG4, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000684:	4803      	ldr	r0, [pc, #12]	; (8000694 <update7SEG+0x150>)
 8000686:	f001 f9c8 	bl	8001a1a <HAL_GPIO_WritePin>
		break;
 800068a:	bf00      	nop
	}
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40010c00 	.word	0x40010c00
 8000698:	20000000 	.word	0x20000000

0800069c <traffic_light>:
 *      Author: huaho
 */
#include "TrafficLight.h"

enum st traffic_light_state = REDWE_GREENNS;
void traffic_light(){
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	switch (traffic_light_state) {
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <traffic_light+0xec>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b04      	cmp	r3, #4
 80006a6:	d86b      	bhi.n	8000780 <traffic_light+0xe4>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <traffic_light+0x14>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c5 	.word	0x080006c5
 80006b4:	080006ef 	.word	0x080006ef
 80006b8:	08000705 	.word	0x08000705
 80006bc:	0800072f 	.word	0x0800072f
 80006c0:	08000745 	.word	0x08000745
		case REDWE_GREENNS:
			HAL_GPIO_WritePin(TL_PORT, WE_AMBER, 1);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2104      	movs	r1, #4
 80006c8:	4830      	ldr	r0, [pc, #192]	; (800078c <traffic_light+0xf0>)
 80006ca:	f001 f9a6 	bl	8001a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, WE_RED, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2102      	movs	r1, #2
 80006d2:	482e      	ldr	r0, [pc, #184]	; (800078c <traffic_light+0xf0>)
 80006d4:	f001 f9a1 	bl	8001a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_RED, 1);
 80006d8:	2201      	movs	r2, #1
 80006da:	2110      	movs	r1, #16
 80006dc:	482b      	ldr	r0, [pc, #172]	; (800078c <traffic_light+0xf0>)
 80006de:	f001 f99c 	bl	8001a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_GREEN, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2140      	movs	r1, #64	; 0x40
 80006e6:	4829      	ldr	r0, [pc, #164]	; (800078c <traffic_light+0xf0>)
 80006e8:	f001 f997 	bl	8001a1a <HAL_GPIO_WritePin>
			break;
 80006ec:	e049      	b.n	8000782 <traffic_light+0xe6>
		case REDWE_AMBERNS:
			HAL_GPIO_WritePin(TL_PORT, NS_GREEN, 1);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2140      	movs	r1, #64	; 0x40
 80006f2:	4826      	ldr	r0, [pc, #152]	; (800078c <traffic_light+0xf0>)
 80006f4:	f001 f991 	bl	8001a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_AMBER, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2120      	movs	r1, #32
 80006fc:	4823      	ldr	r0, [pc, #140]	; (800078c <traffic_light+0xf0>)
 80006fe:	f001 f98c 	bl	8001a1a <HAL_GPIO_WritePin>
			break;
 8000702:	e03e      	b.n	8000782 <traffic_light+0xe6>
		case GREENWE_REDNS:
			HAL_GPIO_WritePin(TL_PORT, WE_RED, 1);
 8000704:	2201      	movs	r2, #1
 8000706:	2102      	movs	r1, #2
 8000708:	4820      	ldr	r0, [pc, #128]	; (800078c <traffic_light+0xf0>)
 800070a:	f001 f986 	bl	8001a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, WE_GREEN, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2108      	movs	r1, #8
 8000712:	481e      	ldr	r0, [pc, #120]	; (800078c <traffic_light+0xf0>)
 8000714:	f001 f981 	bl	8001a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_AMBER, 1);
 8000718:	2201      	movs	r2, #1
 800071a:	2120      	movs	r1, #32
 800071c:	481b      	ldr	r0, [pc, #108]	; (800078c <traffic_light+0xf0>)
 800071e:	f001 f97c 	bl	8001a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_RED, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2110      	movs	r1, #16
 8000726:	4819      	ldr	r0, [pc, #100]	; (800078c <traffic_light+0xf0>)
 8000728:	f001 f977 	bl	8001a1a <HAL_GPIO_WritePin>
			break;
 800072c:	e029      	b.n	8000782 <traffic_light+0xe6>
		case AMBERWE_REDNS:
			HAL_GPIO_WritePin(TL_PORT, WE_GREEN, 1);
 800072e:	2201      	movs	r2, #1
 8000730:	2108      	movs	r1, #8
 8000732:	4816      	ldr	r0, [pc, #88]	; (800078c <traffic_light+0xf0>)
 8000734:	f001 f971 	bl	8001a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, WE_AMBER, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2104      	movs	r1, #4
 800073c:	4813      	ldr	r0, [pc, #76]	; (800078c <traffic_light+0xf0>)
 800073e:	f001 f96c 	bl	8001a1a <HAL_GPIO_WritePin>
			break;
 8000742:	e01e      	b.n	8000782 <traffic_light+0xe6>
		case INVALID:
			HAL_GPIO_WritePin(TL_PORT, WE_RED, 1);
 8000744:	2201      	movs	r2, #1
 8000746:	2102      	movs	r1, #2
 8000748:	4810      	ldr	r0, [pc, #64]	; (800078c <traffic_light+0xf0>)
 800074a:	f001 f966 	bl	8001a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, WE_AMBER, 1);
 800074e:	2201      	movs	r2, #1
 8000750:	2104      	movs	r1, #4
 8000752:	480e      	ldr	r0, [pc, #56]	; (800078c <traffic_light+0xf0>)
 8000754:	f001 f961 	bl	8001a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, WE_GREEN, 1);
 8000758:	2201      	movs	r2, #1
 800075a:	2108      	movs	r1, #8
 800075c:	480b      	ldr	r0, [pc, #44]	; (800078c <traffic_light+0xf0>)
 800075e:	f001 f95c 	bl	8001a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_RED, 1);
 8000762:	2201      	movs	r2, #1
 8000764:	2110      	movs	r1, #16
 8000766:	4809      	ldr	r0, [pc, #36]	; (800078c <traffic_light+0xf0>)
 8000768:	f001 f957 	bl	8001a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_AMBER, 1);
 800076c:	2201      	movs	r2, #1
 800076e:	2120      	movs	r1, #32
 8000770:	4806      	ldr	r0, [pc, #24]	; (800078c <traffic_light+0xf0>)
 8000772:	f001 f952 	bl	8001a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_GREEN, 1);
 8000776:	2201      	movs	r2, #1
 8000778:	2140      	movs	r1, #64	; 0x40
 800077a:	4804      	ldr	r0, [pc, #16]	; (800078c <traffic_light+0xf0>)
 800077c:	f001 f94d 	bl	8001a1a <HAL_GPIO_WritePin>
		default:
			break;
 8000780:	bf00      	nop
	}
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000040 	.word	0x20000040
 800078c:	40010800 	.word	0x40010800

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000794:	f000 fe36 	bl	8001404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000798:	f000 f820 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079c:	f000 f8a6 	bl	80008ec <MX_GPIO_Init>
  MX_TIM2_Init();
 80007a0:	f000 f858 	bl	8000854 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <main+0x48>)
 80007a6:	f001 fd7f 	bl	80022a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	initButton();
 80007aa:	f000 fb6d 	bl	8000e88 <initButton>
	initTimer();
 80007ae:	f000 fd69 	bl	8001284 <initTimer>
	while (1) {
		if (!timerOn(3)) {
 80007b2:	2003      	movs	r0, #3
 80007b4:	f000 fd4a 	bl	800124c <timerOn>
 80007b8:	4603      	mov	r3, r0
 80007ba:	f083 0301 	eor.w	r3, r3, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d005      	beq.n	80007d0 <main+0x40>
			read_button();
 80007c4:	f000 fbb2 	bl	8000f2c <read_button>
			setTimer(3, TIME_BUTTON);
 80007c8:	2164      	movs	r1, #100	; 0x64
 80007ca:	2003      	movs	r0, #3
 80007cc:	f000 fcea 	bl	80011a4 <setTimer>
		}
		ControlTraffic();
 80007d0:	f000 f920 	bl	8000a14 <ControlTraffic>
		if (!timerOn(3)) {
 80007d4:	e7ed      	b.n	80007b2 <main+0x22>
 80007d6:	bf00      	nop
 80007d8:	20000044 	.word	0x20000044

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b090      	sub	sp, #64	; 0x40
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0318 	add.w	r3, r7, #24
 80007e6:	2228      	movs	r2, #40	; 0x28
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 f90a 	bl	8002a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fe:	2302      	movs	r3, #2
 8000800:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000802:	2301      	movs	r3, #1
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000806:	2310      	movs	r3, #16
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800080a:	2300      	movs	r3, #0
 800080c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	4618      	mov	r0, r3
 8000814:	f001 f91a 	bl	8001a4c <HAL_RCC_OscConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800081e:	f000 f8f3 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000822:	230f      	movs	r3, #15
 8000824:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f001 fb88 	bl	8001f50 <HAL_RCC_ClockConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000846:	f000 f8df 	bl	8000a08 <Error_Handler>
  }
}
 800084a:	bf00      	nop
 800084c:	3740      	adds	r7, #64	; 0x40
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	463b      	mov	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_TIM2_Init+0x94>)
 8000872:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000876:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_TIM2_Init+0x94>)
 800087a:	f240 321f 	movw	r2, #799	; 0x31f
 800087e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_TIM2_Init+0x94>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_TIM2_Init+0x94>)
 8000888:	2209      	movs	r2, #9
 800088a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_TIM2_Init+0x94>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_TIM2_Init+0x94>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000898:	4813      	ldr	r0, [pc, #76]	; (80008e8 <MX_TIM2_Init+0x94>)
 800089a:	f001 fcb5 	bl	8002208 <HAL_TIM_Base_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008a4:	f000 f8b0 	bl	8000a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	4619      	mov	r1, r3
 80008b4:	480c      	ldr	r0, [pc, #48]	; (80008e8 <MX_TIM2_Init+0x94>)
 80008b6:	f001 fe51 	bl	800255c <HAL_TIM_ConfigClockSource>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008c0:	f000 f8a2 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c4:	2300      	movs	r3, #0
 80008c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008cc:	463b      	mov	r3, r7
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_TIM2_Init+0x94>)
 80008d2:	f002 f827 	bl	8002924 <HAL_TIMEx_MasterConfigSynchronization>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008dc:	f000 f894 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000044 	.word	0x20000044

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000900:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <MX_GPIO_Init+0xf8>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a37      	ldr	r2, [pc, #220]	; (80009e4 <MX_GPIO_Init+0xf8>)
 8000906:	f043 0310 	orr.w	r3, r3, #16
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b35      	ldr	r3, [pc, #212]	; (80009e4 <MX_GPIO_Init+0xf8>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0310 	and.w	r3, r3, #16
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <MX_GPIO_Init+0xf8>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a31      	ldr	r2, [pc, #196]	; (80009e4 <MX_GPIO_Init+0xf8>)
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <MX_GPIO_Init+0xf8>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000930:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <MX_GPIO_Init+0xf8>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a2b      	ldr	r2, [pc, #172]	; (80009e4 <MX_GPIO_Init+0xf8>)
 8000936:	f043 0308 	orr.w	r3, r3, #8
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <MX_GPIO_Init+0xf8>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0308 	and.w	r3, r3, #8
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094e:	4826      	ldr	r0, [pc, #152]	; (80009e8 <MX_GPIO_Init+0xfc>)
 8000950:	f001 f863 	bl	8001a1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000954:	2200      	movs	r2, #0
 8000956:	217e      	movs	r1, #126	; 0x7e
 8000958:	4824      	ldr	r0, [pc, #144]	; (80009ec <MX_GPIO_Init+0x100>)
 800095a:	f001 f85e 	bl	8001a1a <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800095e:	2200      	movs	r2, #0
 8000960:	f247 71ff 	movw	r1, #30719	; 0x77ff
 8000964:	4822      	ldr	r0, [pc, #136]	; (80009f0 <MX_GPIO_Init+0x104>)
 8000966:	f001 f858 	bl	8001a1a <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800096a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2302      	movs	r3, #2
 800097a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	4619      	mov	r1, r3
 8000982:	4819      	ldr	r0, [pc, #100]	; (80009e8 <MX_GPIO_Init+0xfc>)
 8000984:	f000 feae 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000988:	237e      	movs	r3, #126	; 0x7e
 800098a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2302      	movs	r3, #2
 8000996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4619      	mov	r1, r3
 800099e:	4813      	ldr	r0, [pc, #76]	; (80009ec <MX_GPIO_Init+0x100>)
 80009a0:	f000 fea0 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80009a4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80009a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 0310 	add.w	r3, r7, #16
 80009b6:	4619      	mov	r1, r3
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <MX_GPIO_Init+0x100>)
 80009ba:	f000 fe93 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80009be:	f247 73ff 	movw	r3, #30719	; 0x77ff
 80009c2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <MX_GPIO_Init+0x104>)
 80009d8:	f000 fe84 	bl	80016e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40011000 	.word	0x40011000
 80009ec:	40010800 	.word	0x40010800
 80009f0:	40010c00 	.word	0x40010c00

080009f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	timerRun();
 80009fc:	f000 fbf4 	bl	80011e8 <timerRun>
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a10:	e7fe      	b.n	8000a10 <Error_Handler+0x8>
	...

08000a14 <ControlTraffic>:

void TrafficLightFSM();
void button0();
void button1();

void ControlTraffic() {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	if (!timerOn(1)) {
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f000 fc17 	bl	800124c <timerOn>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	f083 0301 	eor.w	r3, r3, #1
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d022      	beq.n	8000a70 <ControlTraffic+0x5c>
		if (TrafficState == NORMAL
 8000a2a:	4b94      	ldr	r3, [pc, #592]	; (8000c7c <ControlTraffic+0x268>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d10a      	bne.n	8000a48 <ControlTraffic+0x34>
				&& RedTimeBuffer != AmberTimeBuffer + GreenTimeBuffer) {
 8000a32:	4b93      	ldr	r3, [pc, #588]	; (8000c80 <ControlTraffic+0x26c>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b92      	ldr	r3, [pc, #584]	; (8000c84 <ControlTraffic+0x270>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4b92      	ldr	r3, [pc, #584]	; (8000c88 <ControlTraffic+0x274>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	440b      	add	r3, r1
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d113      	bne.n	8000a70 <ControlTraffic+0x5c>
			traffic_light_state == INVALID;
		} else {
			//Scan 7segs led
			update7SEG(i--);
 8000a48:	4b90      	ldr	r3, [pc, #576]	; (8000c8c <ControlTraffic+0x278>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	1e5a      	subs	r2, r3, #1
 8000a4e:	498f      	ldr	r1, [pc, #572]	; (8000c8c <ControlTraffic+0x278>)
 8000a50:	600a      	str	r2, [r1, #0]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fd75 	bl	8000544 <update7SEG>
			if (i < 0) {
 8000a5a:	4b8c      	ldr	r3, [pc, #560]	; (8000c8c <ControlTraffic+0x278>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	da02      	bge.n	8000a68 <ControlTraffic+0x54>
				i = 3;
 8000a62:	4b8a      	ldr	r3, [pc, #552]	; (8000c8c <ControlTraffic+0x278>)
 8000a64:	2203      	movs	r2, #3
 8000a66:	601a      	str	r2, [r3, #0]
			}
			setTimer(1, 1);
 8000a68:	2101      	movs	r1, #1
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f000 fb9a 	bl	80011a4 <setTimer>
		}
	}
	switch (TrafficState) {
 8000a70:	4b82      	ldr	r3, [pc, #520]	; (8000c7c <ControlTraffic+0x268>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b0c      	cmp	r3, #12
 8000a76:	f200 80fd 	bhi.w	8000c74 <ControlTraffic+0x260>
 8000a7a:	a201      	add	r2, pc, #4	; (adr r2, 8000a80 <ControlTraffic+0x6c>)
 8000a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a80:	08000ab5 	.word	0x08000ab5
 8000a84:	08000add 	.word	0x08000add
 8000a88:	08000b65 	.word	0x08000b65
 8000a8c:	08000bed 	.word	0x08000bed
 8000a90:	08000afb 	.word	0x08000afb
 8000a94:	08000b83 	.word	0x08000b83
 8000a98:	08000c0b 	.word	0x08000c0b
 8000a9c:	08000c75 	.word	0x08000c75
 8000aa0:	08000c75 	.word	0x08000c75
 8000aa4:	08000c75 	.word	0x08000c75
 8000aa8:	08000b1d 	.word	0x08000b1d
 8000aac:	08000ba5 	.word	0x08000ba5
 8000ab0:	08000c2d 	.word	0x08000c2d
	case NORMAL:
		if (TrafficState == NORMAL
 8000ab4:	4b71      	ldr	r3, [pc, #452]	; (8000c7c <ControlTraffic+0x268>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d10a      	bne.n	8000ad2 <ControlTraffic+0xbe>
				&& RedTimeBuffer != AmberTimeBuffer + GreenTimeBuffer) {
 8000abc:	4b70      	ldr	r3, [pc, #448]	; (8000c80 <ControlTraffic+0x26c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b70      	ldr	r3, [pc, #448]	; (8000c84 <ControlTraffic+0x270>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4b6f      	ldr	r3, [pc, #444]	; (8000c88 <ControlTraffic+0x274>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	440b      	add	r3, r1
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d101      	bne.n	8000ad6 <ControlTraffic+0xc2>
			traffic_light_state == INVALID;
		} else {
			TrafficLightFSM();
 8000ad2:	f000 f8e3 	bl	8000c9c <TrafficLightFSM>
		}
		//button 0
		button0();
 8000ad6:	f000 f94d 	bl	8000d74 <button0>
		break;
 8000ada:	e0cc      	b.n	8000c76 <ControlTraffic+0x262>
		//Modify red
	case RED_MODIFY:
		RedTimeBuffer = RedTime;
 8000adc:	4b6c      	ldr	r3, [pc, #432]	; (8000c90 <ControlTraffic+0x27c>)
 8000ade:	781a      	ldrb	r2, [r3, #0]
 8000ae0:	4b67      	ldr	r3, [pc, #412]	; (8000c80 <ControlTraffic+0x26c>)
 8000ae2:	701a      	strb	r2, [r3, #0]
		// display the value and mode
		update7SegBuffer(RedTimeBuffer, 2);
 8000ae4:	4b66      	ldr	r3, [pc, #408]	; (8000c80 <ControlTraffic+0x26c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2102      	movs	r1, #2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fb2e 	bl	800014c <update7SegBuffer>
		//led 2Hz
		//button 0
		button0();
 8000af0:	f000 f940 	bl	8000d74 <button0>
		//button 1
		button1();
 8000af4:	f000 f96c 	bl	8000dd0 <button1>
		//buton 2
		break;
 8000af8:	e0bd      	b.n	8000c76 <ControlTraffic+0x262>
	case RED_INCREASE_1:
		RedTimeBuffer++;
 8000afa:	4b61      	ldr	r3, [pc, #388]	; (8000c80 <ControlTraffic+0x26c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	3301      	adds	r3, #1
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4b5f      	ldr	r3, [pc, #380]	; (8000c80 <ControlTraffic+0x26c>)
 8000b04:	701a      	strb	r2, [r3, #0]
		if (RedTimeBuffer > 99) {
 8000b06:	4b5e      	ldr	r3, [pc, #376]	; (8000c80 <ControlTraffic+0x26c>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b63      	cmp	r3, #99	; 0x63
 8000b0c:	d902      	bls.n	8000b14 <ControlTraffic+0x100>
			RedTimeBuffer = 0;
 8000b0e:	4b5c      	ldr	r3, [pc, #368]	; (8000c80 <ControlTraffic+0x26c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
		}
		TrafficState = RED_MODIFY;
 8000b14:	4b59      	ldr	r3, [pc, #356]	; (8000c7c <ControlTraffic+0x268>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]
		break;
 8000b1a:	e0ac      	b.n	8000c76 <ControlTraffic+0x262>
	case RED_OVERTIME:
		// display the value and mode
		update7SegBuffer(RedTimeBuffer, 2);
 8000b1c:	4b58      	ldr	r3, [pc, #352]	; (8000c80 <ControlTraffic+0x26c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2102      	movs	r1, #2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fb12 	bl	800014c <update7SegBuffer>
		if (!timerOn(4)) {
 8000b28:	2004      	movs	r0, #4
 8000b2a:	f000 fb8f 	bl	800124c <timerOn>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	f083 0301 	eor.w	r3, r3, #1
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d011      	beq.n	8000b5e <ControlTraffic+0x14a>
			RedTimeBuffer++;
 8000b3a:	4b51      	ldr	r3, [pc, #324]	; (8000c80 <ControlTraffic+0x26c>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4b4f      	ldr	r3, [pc, #316]	; (8000c80 <ControlTraffic+0x26c>)
 8000b44:	701a      	strb	r2, [r3, #0]
			if (RedTimeBuffer > 99) {
 8000b46:	4b4e      	ldr	r3, [pc, #312]	; (8000c80 <ControlTraffic+0x26c>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b63      	cmp	r3, #99	; 0x63
 8000b4c:	d902      	bls.n	8000b54 <ControlTraffic+0x140>
				RedTimeBuffer = 0;
 8000b4e:	4b4c      	ldr	r3, [pc, #304]	; (8000c80 <ControlTraffic+0x26c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
			}
			setTimer(4, 500);
 8000b54:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b58:	2004      	movs	r0, #4
 8000b5a:	f000 fb23 	bl	80011a4 <setTimer>
		}
		//buton1
		button1();
 8000b5e:	f000 f937 	bl	8000dd0 <button1>
		break;
 8000b62:	e088      	b.n	8000c76 <ControlTraffic+0x262>

		//Modify Amber
	case AMBER_MODIFY:
		AmberTimeBuffer = AmberTime;
 8000b64:	4b4b      	ldr	r3, [pc, #300]	; (8000c94 <ControlTraffic+0x280>)
 8000b66:	781a      	ldrb	r2, [r3, #0]
 8000b68:	4b46      	ldr	r3, [pc, #280]	; (8000c84 <ControlTraffic+0x270>)
 8000b6a:	701a      	strb	r2, [r3, #0]
		// display the value and mode
		update7SegBuffer(AmberTimeBuffer, 2);
 8000b6c:	4b45      	ldr	r3, [pc, #276]	; (8000c84 <ControlTraffic+0x270>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2102      	movs	r1, #2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff faea 	bl	800014c <update7SegBuffer>
		//led 2Hz
		//button 0
		button0();
 8000b78:	f000 f8fc 	bl	8000d74 <button0>
		//button 1
		button1();
 8000b7c:	f000 f928 	bl	8000dd0 <button1>
		//buton 2
		break;
 8000b80:	e079      	b.n	8000c76 <ControlTraffic+0x262>
	case AMBER_INCREASE_1:
		AmberTimeBuffer++;
 8000b82:	4b40      	ldr	r3, [pc, #256]	; (8000c84 <ControlTraffic+0x270>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	3301      	adds	r3, #1
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b3e      	ldr	r3, [pc, #248]	; (8000c84 <ControlTraffic+0x270>)
 8000b8c:	701a      	strb	r2, [r3, #0]
		if (AmberTimeBuffer > 99) {
 8000b8e:	4b3d      	ldr	r3, [pc, #244]	; (8000c84 <ControlTraffic+0x270>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b63      	cmp	r3, #99	; 0x63
 8000b94:	d902      	bls.n	8000b9c <ControlTraffic+0x188>
			AmberTimeBuffer = 0;
 8000b96:	4b3b      	ldr	r3, [pc, #236]	; (8000c84 <ControlTraffic+0x270>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
		}
		TrafficState = AMBER_MODIFY;
 8000b9c:	4b37      	ldr	r3, [pc, #220]	; (8000c7c <ControlTraffic+0x268>)
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	701a      	strb	r2, [r3, #0]
		break;
 8000ba2:	e068      	b.n	8000c76 <ControlTraffic+0x262>
	case AMBER_OVERTIME:
		// display the value and mode
		update7SegBuffer(AmberTimeBuffer, 2);
 8000ba4:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <ControlTraffic+0x270>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2102      	movs	r1, #2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff face 	bl	800014c <update7SegBuffer>
		if (!timerOn(4)) {
 8000bb0:	2004      	movs	r0, #4
 8000bb2:	f000 fb4b 	bl	800124c <timerOn>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	f083 0301 	eor.w	r3, r3, #1
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d011      	beq.n	8000be6 <ControlTraffic+0x1d2>
			AmberTimeBuffer++;
 8000bc2:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <ControlTraffic+0x270>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <ControlTraffic+0x270>)
 8000bcc:	701a      	strb	r2, [r3, #0]
			if (AmberTimeBuffer > 99) {
 8000bce:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <ControlTraffic+0x270>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b63      	cmp	r3, #99	; 0x63
 8000bd4:	d902      	bls.n	8000bdc <ControlTraffic+0x1c8>
				AmberTimeBuffer = 0;
 8000bd6:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <ControlTraffic+0x270>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
			}
			setTimer(4, 500);
 8000bdc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000be0:	2004      	movs	r0, #4
 8000be2:	f000 fadf 	bl	80011a4 <setTimer>
		}
		//buton1
		button1();
 8000be6:	f000 f8f3 	bl	8000dd0 <button1>
		break;
 8000bea:	e044      	b.n	8000c76 <ControlTraffic+0x262>

		//Modify red
	case GREEN_MODIFY:
		GreenTimeBuffer = GreenTime;
 8000bec:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <ControlTraffic+0x284>)
 8000bee:	781a      	ldrb	r2, [r3, #0]
 8000bf0:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <ControlTraffic+0x274>)
 8000bf2:	701a      	strb	r2, [r3, #0]
		// display the value and mode
		update7SegBuffer(GreenTimeBuffer, 2);
 8000bf4:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <ControlTraffic+0x274>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff faa6 	bl	800014c <update7SegBuffer>
		//led 2Hz
		//button 0
		button0();
 8000c00:	f000 f8b8 	bl	8000d74 <button0>
		//button 1
		button1();
 8000c04:	f000 f8e4 	bl	8000dd0 <button1>
		//buton 2
		break;
 8000c08:	e035      	b.n	8000c76 <ControlTraffic+0x262>
	case GREEN_INCREASE_1:
		GreenTimeBuffer++;
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <ControlTraffic+0x274>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <ControlTraffic+0x274>)
 8000c14:	701a      	strb	r2, [r3, #0]
		if (GreenTimeBuffer > 99) {
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <ControlTraffic+0x274>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b63      	cmp	r3, #99	; 0x63
 8000c1c:	d902      	bls.n	8000c24 <ControlTraffic+0x210>
			GreenTimeBuffer = 0;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <ControlTraffic+0x274>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
		}
		TrafficState = GREEN_MODIFY;
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <ControlTraffic+0x268>)
 8000c26:	2203      	movs	r2, #3
 8000c28:	701a      	strb	r2, [r3, #0]
		break;
 8000c2a:	e024      	b.n	8000c76 <ControlTraffic+0x262>
	case GREEN_OVERTIME:
		// display the value and mode
		update7SegBuffer(GreenTimeBuffer, 2);
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <ControlTraffic+0x274>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2102      	movs	r1, #2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fa8a 	bl	800014c <update7SegBuffer>
		if (!timerOn(4)) {
 8000c38:	2004      	movs	r0, #4
 8000c3a:	f000 fb07 	bl	800124c <timerOn>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	f083 0301 	eor.w	r3, r3, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d011      	beq.n	8000c6e <ControlTraffic+0x25a>
			GreenTimeBuffer++;
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <ControlTraffic+0x274>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <ControlTraffic+0x274>)
 8000c54:	701a      	strb	r2, [r3, #0]
			if (GreenTimeBuffer > 99) {
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <ControlTraffic+0x274>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b63      	cmp	r3, #99	; 0x63
 8000c5c:	d902      	bls.n	8000c64 <ControlTraffic+0x250>
				GreenTimeBuffer = 0;
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <ControlTraffic+0x274>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
			}
			setTimer(4, 500);
 8000c64:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c68:	2004      	movs	r0, #4
 8000c6a:	f000 fa9b 	bl	80011a4 <setTimer>
		}
		//buton1
		button1();
 8000c6e:	f000 f8af 	bl	8000dd0 <button1>
		break;
 8000c72:	e000      	b.n	8000c76 <ControlTraffic+0x262>
	default:
		break;
 8000c74:	bf00      	nop
	}
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000008c 	.word	0x2000008c
 8000c80:	2000008e 	.word	0x2000008e
 8000c84:	20000090 	.word	0x20000090
 8000c88:	20000092 	.word	0x20000092
 8000c8c:	20000010 	.word	0x20000010
 8000c90:	2000008d 	.word	0x2000008d
 8000c94:	2000008f 	.word	0x2000008f
 8000c98:	20000091 	.word	0x20000091

08000c9c <TrafficLightFSM>:

void TrafficLightFSM() {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	if (!timerOn(2)) {
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f000 fad3 	bl	800124c <timerOn>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f083 0301 	eor.w	r3, r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d058      	beq.n	8000d64 <TrafficLightFSM+0xc8>
		setTimer(2, 1000);
 8000cb2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f000 fa74 	bl	80011a4 <setTimer>
		traffic_light();
 8000cbc:	f7ff fcee 	bl	800069c <traffic_light>
		update7SegBuffer(timeWE--, timeNS--);
 8000cc0:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <TrafficLightFSM+0xcc>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	1e5a      	subs	r2, r3, #1
 8000cc6:	b2d1      	uxtb	r1, r2
 8000cc8:	4a27      	ldr	r2, [pc, #156]	; (8000d68 <TrafficLightFSM+0xcc>)
 8000cca:	7011      	strb	r1, [r2, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <TrafficLightFSM+0xd0>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	1e5a      	subs	r2, r3, #1
 8000cd4:	b2d1      	uxtb	r1, r2
 8000cd6:	4a25      	ldr	r2, [pc, #148]	; (8000d6c <TrafficLightFSM+0xd0>)
 8000cd8:	7011      	strb	r1, [r2, #0]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f7ff fa36 	bl	800014c <update7SegBuffer>
		switch (traffic_light_state) {
 8000ce0:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <TrafficLightFSM+0xd4>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d83a      	bhi.n	8000d5e <TrafficLightFSM+0xc2>
 8000ce8:	a201      	add	r2, pc, #4	; (adr r2, 8000cf0 <TrafficLightFSM+0x54>)
 8000cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cee:	bf00      	nop
 8000cf0:	08000d01 	.word	0x08000d01
 8000cf4:	08000d17 	.word	0x08000d17
 8000cf8:	08000d31 	.word	0x08000d31
 8000cfc:	08000d45 	.word	0x08000d45
		case REDWE_GREENNS:
			if (timeNS <= 0) {
 8000d00:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <TrafficLightFSM+0xd0>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d12c      	bne.n	8000d62 <TrafficLightFSM+0xc6>
				traffic_light_state = REDWE_AMBERNS;
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <TrafficLightFSM+0xd4>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
				timeNS = 2;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <TrafficLightFSM+0xd0>)
 8000d10:	2202      	movs	r2, #2
 8000d12:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000d14:	e025      	b.n	8000d62 <TrafficLightFSM+0xc6>
		case REDWE_AMBERNS:
			if (timeNS <= 0) {
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <TrafficLightFSM+0xd0>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d108      	bne.n	8000d30 <TrafficLightFSM+0x94>
				traffic_light_state = GREENWE_REDNS;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <TrafficLightFSM+0xd4>)
 8000d20:	2202      	movs	r2, #2
 8000d22:	701a      	strb	r2, [r3, #0]
				timeWE = 3;
 8000d24:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <TrafficLightFSM+0xcc>)
 8000d26:	2203      	movs	r2, #3
 8000d28:	701a      	strb	r2, [r3, #0]
				timeNS = 5;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <TrafficLightFSM+0xd0>)
 8000d2c:	2205      	movs	r2, #5
 8000d2e:	701a      	strb	r2, [r3, #0]
			}
		case GREENWE_REDNS:
			if (timeWE <= 0) {
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <TrafficLightFSM+0xcc>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d105      	bne.n	8000d44 <TrafficLightFSM+0xa8>
				traffic_light_state = AMBERWE_REDNS;
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <TrafficLightFSM+0xd4>)
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	701a      	strb	r2, [r3, #0]
				timeWE = 2;
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <TrafficLightFSM+0xcc>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	701a      	strb	r2, [r3, #0]
			}
		case AMBERWE_REDNS:
			if (timeWE <= 0) {
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <TrafficLightFSM+0xcc>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d108      	bne.n	8000d5e <TrafficLightFSM+0xc2>
				traffic_light_state = REDWE_GREENNS;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <TrafficLightFSM+0xd4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
				timeWE = 5;
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <TrafficLightFSM+0xcc>)
 8000d54:	2205      	movs	r2, #5
 8000d56:	701a      	strb	r2, [r3, #0]
				timeNS = 3;
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <TrafficLightFSM+0xd0>)
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	701a      	strb	r2, [r3, #0]
			}
		default:
			break;
 8000d5e:	bf00      	nop
 8000d60:	e000      	b.n	8000d64 <TrafficLightFSM+0xc8>
			break;
 8000d62:	bf00      	nop
		}
	}
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000014 	.word	0x20000014
 8000d6c:	20000015 	.word	0x20000015
 8000d70:	20000040 	.word	0x20000040

08000d74 <button0>:

void button0() {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	if (is_button_pressed(0)) {
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f000 f9df 	bl	800113c <is_button_pressed>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d01f      	beq.n	8000dc4 <button0+0x50>
		switch (TrafficState) {
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <button0+0x58>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d81d      	bhi.n	8000dc8 <button0+0x54>
 8000d8c:	a201      	add	r2, pc, #4	; (adr r2, 8000d94 <button0+0x20>)
 8000d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d92:	bf00      	nop
 8000d94:	08000da5 	.word	0x08000da5
 8000d98:	08000dad 	.word	0x08000dad
 8000d9c:	08000db5 	.word	0x08000db5
 8000da0:	08000dbd 	.word	0x08000dbd
		case NORMAL:
			TrafficState = RED_MODIFY;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <button0+0x58>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
			break;
 8000daa:	e00e      	b.n	8000dca <button0+0x56>
		case RED_MODIFY:
			TrafficState = AMBER_MODIFY;
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <button0+0x58>)
 8000dae:	2202      	movs	r2, #2
 8000db0:	701a      	strb	r2, [r3, #0]
			break;
 8000db2:	e00a      	b.n	8000dca <button0+0x56>
		case AMBER_MODIFY:
			TrafficState = GREEN_MODIFY;
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <button0+0x58>)
 8000db6:	2203      	movs	r2, #3
 8000db8:	701a      	strb	r2, [r3, #0]
			break;
 8000dba:	e006      	b.n	8000dca <button0+0x56>
		case GREEN_MODIFY:
			TrafficState = NORMAL;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <button0+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
			break;
 8000dc2:	e002      	b.n	8000dca <button0+0x56>
		default:
			break;
		}
	} else {
		return;
 8000dc4:	bf00      	nop
 8000dc6:	e000      	b.n	8000dca <button0+0x56>
			break;
 8000dc8:	bf00      	nop
	}
}
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000008c 	.word	0x2000008c

08000dd0 <button1>:

void button1() {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	if (is_button_long_pressed(1)) {
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f000 f9cb 	bl	8001170 <is_button_long_pressed>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d016      	beq.n	8000e0e <button1+0x3e>
		switch (TrafficState) {
 8000de0:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <button1+0xb4>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	d00e      	beq.n	8000e06 <button1+0x36>
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	dc44      	bgt.n	8000e76 <button1+0xa6>
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d002      	beq.n	8000df6 <button1+0x26>
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d004      	beq.n	8000dfe <button1+0x2e>
			break;
		case GREEN_MODIFY:
			TrafficState = GREEN_OVERTIME;
			break;
		default:
			break;
 8000df4:	e03f      	b.n	8000e76 <button1+0xa6>
			TrafficState = RED_OVERTIME;
 8000df6:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <button1+0xb4>)
 8000df8:	220a      	movs	r2, #10
 8000dfa:	701a      	strb	r2, [r3, #0]
			break;
 8000dfc:	e040      	b.n	8000e80 <button1+0xb0>
			TrafficState = AMBER_OVERTIME;
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <button1+0xb4>)
 8000e00:	220b      	movs	r2, #11
 8000e02:	701a      	strb	r2, [r3, #0]
			break;
 8000e04:	e03c      	b.n	8000e80 <button1+0xb0>
			TrafficState = GREEN_OVERTIME;
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <button1+0xb4>)
 8000e08:	220c      	movs	r2, #12
 8000e0a:	701a      	strb	r2, [r3, #0]
			break;
 8000e0c:	e038      	b.n	8000e80 <button1+0xb0>
		}
	} else if (is_button_pressed(1)) {
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f000 f994 	bl	800113c <is_button_pressed>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d016      	beq.n	8000e48 <button1+0x78>
		switch (TrafficState) {
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <button1+0xb4>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d00e      	beq.n	8000e40 <button1+0x70>
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	dc29      	bgt.n	8000e7a <button1+0xaa>
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d002      	beq.n	8000e30 <button1+0x60>
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d004      	beq.n	8000e38 <button1+0x68>
			break;
		case GREEN_MODIFY:
			TrafficState = GREEN_INCREASE_1;
			break;
		default:
			break;
 8000e2e:	e024      	b.n	8000e7a <button1+0xaa>
			TrafficState = RED_INCREASE_1;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <button1+0xb4>)
 8000e32:	2204      	movs	r2, #4
 8000e34:	701a      	strb	r2, [r3, #0]
			break;
 8000e36:	e023      	b.n	8000e80 <button1+0xb0>
			TrafficState = AMBER_INCREASE_1;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <button1+0xb4>)
 8000e3a:	2205      	movs	r2, #5
 8000e3c:	701a      	strb	r2, [r3, #0]
			break;
 8000e3e:	e01f      	b.n	8000e80 <button1+0xb0>
			TrafficState = GREEN_INCREASE_1;
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <button1+0xb4>)
 8000e42:	2206      	movs	r2, #6
 8000e44:	701a      	strb	r2, [r3, #0]
			break;
 8000e46:	e01b      	b.n	8000e80 <button1+0xb0>
		}
	} else {
		switch (TrafficState) {
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <button1+0xb4>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b0c      	cmp	r3, #12
 8000e4e:	d00e      	beq.n	8000e6e <button1+0x9e>
 8000e50:	2b0c      	cmp	r3, #12
 8000e52:	dc14      	bgt.n	8000e7e <button1+0xae>
 8000e54:	2b0a      	cmp	r3, #10
 8000e56:	d002      	beq.n	8000e5e <button1+0x8e>
 8000e58:	2b0b      	cmp	r3, #11
 8000e5a:	d004      	beq.n	8000e66 <button1+0x96>
		case GREEN_OVERTIME:
			TrafficState = GREEN_MODIFY;
			break;

		default:
			break;
 8000e5c:	e00f      	b.n	8000e7e <button1+0xae>
			TrafficState = RED_MODIFY;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <button1+0xb4>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
			break;
 8000e64:	e00c      	b.n	8000e80 <button1+0xb0>
			TrafficState = AMBER_MODIFY;
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <button1+0xb4>)
 8000e68:	2202      	movs	r2, #2
 8000e6a:	701a      	strb	r2, [r3, #0]
			break;
 8000e6c:	e008      	b.n	8000e80 <button1+0xb0>
			TrafficState = GREEN_MODIFY;
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <button1+0xb4>)
 8000e70:	2203      	movs	r2, #3
 8000e72:	701a      	strb	r2, [r3, #0]
			break;
 8000e74:	e004      	b.n	8000e80 <button1+0xb0>
			break;
 8000e76:	bf00      	nop
 8000e78:	e002      	b.n	8000e80 <button1+0xb0>
			break;
 8000e7a:	bf00      	nop
 8000e7c:	e000      	b.n	8000e80 <button1+0xb0>
			break;
 8000e7e:	bf00      	nop
		}
	}
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000008c 	.word	0x2000008c

08000e88 <initButton>:
	bool is_pressed;
	bool is_long_pressed;
	uint8_t TimePress;
} MyButton[NUM_BUTTON];

void initButton() {
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_BUTTON; i++) {
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71fb      	strb	r3, [r7, #7]
 8000e92:	e040      	b.n	8000f16 <initButton+0x8e>
		MyButton[i].debounce[0] = RELEASED;
 8000e94:	79fa      	ldrb	r2, [r7, #7]
 8000e96:	4924      	ldr	r1, [pc, #144]	; (8000f28 <initButton+0xa0>)
 8000e98:	4613      	mov	r3, r2
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	1a9b      	subs	r3, r3, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]
		MyButton[i].debounce[1] = RELEASED;
 8000ea4:	79fa      	ldrb	r2, [r7, #7]
 8000ea6:	4920      	ldr	r1, [pc, #128]	; (8000f28 <initButton+0xa0>)
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	1a9b      	subs	r3, r3, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
		MyButton[i].debounce[2] = RELEASED;
 8000eb6:	79fa      	ldrb	r2, [r7, #7]
 8000eb8:	491b      	ldr	r1, [pc, #108]	; (8000f28 <initButton+0xa0>)
 8000eba:	4613      	mov	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	1a9b      	subs	r3, r3, r2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
		MyButton[i].debounce[3] = RELEASED;
 8000ec8:	79fa      	ldrb	r2, [r7, #7]
 8000eca:	4917      	ldr	r1, [pc, #92]	; (8000f28 <initButton+0xa0>)
 8000ecc:	4613      	mov	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	1a9b      	subs	r3, r3, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	3303      	adds	r3, #3
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
		MyButton[i].is_pressed = 0;
 8000eda:	79fa      	ldrb	r2, [r7, #7]
 8000edc:	4912      	ldr	r1, [pc, #72]	; (8000f28 <initButton+0xa0>)
 8000ede:	4613      	mov	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	1a9b      	subs	r3, r3, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
		MyButton[i].is_long_pressed = 0;
 8000eec:	79fa      	ldrb	r2, [r7, #7]
 8000eee:	490e      	ldr	r1, [pc, #56]	; (8000f28 <initButton+0xa0>)
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	1a9b      	subs	r3, r3, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3305      	adds	r3, #5
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
		MyButton[i].TimePress = LONG_PRESSED;
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	4909      	ldr	r1, [pc, #36]	; (8000f28 <initButton+0xa0>)
 8000f02:	4613      	mov	r3, r2
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	1a9b      	subs	r3, r3, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	3306      	adds	r3, #6
 8000f0c:	22c8      	movs	r2, #200	; 0xc8
 8000f0e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_BUTTON; i++) {
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	3301      	adds	r3, #1
 8000f14:	71fb      	strb	r3, [r7, #7]
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d9bb      	bls.n	8000e94 <initButton+0xc>
	}
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	20000094 	.word	0x20000094

08000f2c <read_button>:

void read_button() {
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_BUTTON; i++) {
 8000f32:	2300      	movs	r3, #0
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	e0f4      	b.n	8001122 <read_button+0x1f6>
		MyButton[i].debounce[3] = MyButton[i].debounce[2];
 8000f38:	79f9      	ldrb	r1, [r7, #7]
 8000f3a:	79fa      	ldrb	r2, [r7, #7]
 8000f3c:	487d      	ldr	r0, [pc, #500]	; (8001134 <read_button+0x208>)
 8000f3e:	460b      	mov	r3, r1
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	1a5b      	subs	r3, r3, r1
 8000f44:	4403      	add	r3, r0
 8000f46:	3302      	adds	r3, #2
 8000f48:	7818      	ldrb	r0, [r3, #0]
 8000f4a:	497a      	ldr	r1, [pc, #488]	; (8001134 <read_button+0x208>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	1a9b      	subs	r3, r3, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	3303      	adds	r3, #3
 8000f56:	4602      	mov	r2, r0
 8000f58:	701a      	strb	r2, [r3, #0]
		MyButton[i].debounce[2] = MyButton[i].debounce[1];
 8000f5a:	79f9      	ldrb	r1, [r7, #7]
 8000f5c:	79fa      	ldrb	r2, [r7, #7]
 8000f5e:	4875      	ldr	r0, [pc, #468]	; (8001134 <read_button+0x208>)
 8000f60:	460b      	mov	r3, r1
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	1a5b      	subs	r3, r3, r1
 8000f66:	4403      	add	r3, r0
 8000f68:	3301      	adds	r3, #1
 8000f6a:	7818      	ldrb	r0, [r3, #0]
 8000f6c:	4971      	ldr	r1, [pc, #452]	; (8001134 <read_button+0x208>)
 8000f6e:	4613      	mov	r3, r2
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	1a9b      	subs	r3, r3, r2
 8000f74:	440b      	add	r3, r1
 8000f76:	3302      	adds	r3, #2
 8000f78:	4602      	mov	r2, r0
 8000f7a:	701a      	strb	r2, [r3, #0]
		MyButton[i].debounce[1] = MyButton[i].debounce[0];
 8000f7c:	79f9      	ldrb	r1, [r7, #7]
 8000f7e:	79fa      	ldrb	r2, [r7, #7]
 8000f80:	486c      	ldr	r0, [pc, #432]	; (8001134 <read_button+0x208>)
 8000f82:	460b      	mov	r3, r1
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	1a5b      	subs	r3, r3, r1
 8000f88:	4403      	add	r3, r0
 8000f8a:	7818      	ldrb	r0, [r3, #0]
 8000f8c:	4969      	ldr	r1, [pc, #420]	; (8001134 <read_button+0x208>)
 8000f8e:	4613      	mov	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	1a9b      	subs	r3, r3, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	3301      	adds	r3, #1
 8000f98:	4602      	mov	r2, r0
 8000f9a:	701a      	strb	r2, [r3, #0]
		if (i == 0) {
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10e      	bne.n	8000fc0 <read_button+0x94>
			MyButton[i].debounce[0] = HAL_GPIO_ReadPin(BUTTON1_PORT,
 8000fa2:	79fc      	ldrb	r4, [r7, #7]
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	4864      	ldr	r0, [pc, #400]	; (8001138 <read_button+0x20c>)
 8000fa8:	f000 fd20 	bl	80019ec <HAL_GPIO_ReadPin>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4a60      	ldr	r2, [pc, #384]	; (8001134 <read_button+0x208>)
 8000fb2:	4623      	mov	r3, r4
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	1b1b      	subs	r3, r3, r4
 8000fb8:	4413      	add	r3, r2
 8000fba:	460a      	mov	r2, r1
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e024      	b.n	800100a <read_button+0xde>
					BUTTON1_PIN);
		}
		else if (i == 1) {
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d10f      	bne.n	8000fe6 <read_button+0xba>
			MyButton[i].debounce[0] = HAL_GPIO_ReadPin(BUTTON2_PORT,
 8000fc6:	79fc      	ldrb	r4, [r7, #7]
 8000fc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fcc:	485a      	ldr	r0, [pc, #360]	; (8001138 <read_button+0x20c>)
 8000fce:	f000 fd0d 	bl	80019ec <HAL_GPIO_ReadPin>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4a57      	ldr	r2, [pc, #348]	; (8001134 <read_button+0x208>)
 8000fd8:	4623      	mov	r3, r4
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	1b1b      	subs	r3, r3, r4
 8000fde:	4413      	add	r3, r2
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	701a      	strb	r2, [r3, #0]
 8000fe4:	e011      	b.n	800100a <read_button+0xde>
					BUTTON2_PIN);
		}
		else if (i == 2) {
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d10e      	bne.n	800100a <read_button+0xde>
			MyButton[i].debounce[0] = HAL_GPIO_ReadPin(BUTTON3_PORT,
 8000fec:	79fc      	ldrb	r4, [r7, #7]
 8000fee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff2:	4851      	ldr	r0, [pc, #324]	; (8001138 <read_button+0x20c>)
 8000ff4:	f000 fcfa 	bl	80019ec <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4a4d      	ldr	r2, [pc, #308]	; (8001134 <read_button+0x208>)
 8000ffe:	4623      	mov	r3, r4
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	1b1b      	subs	r3, r3, r4
 8001004:	4413      	add	r3, r2
 8001006:	460a      	mov	r2, r1
 8001008:	701a      	strb	r2, [r3, #0]
					BUTTON3_PIN);
		}
		if (MyButton[i].debounce[3] == MyButton[i].debounce[2]
 800100a:	79fa      	ldrb	r2, [r7, #7]
 800100c:	4949      	ldr	r1, [pc, #292]	; (8001134 <read_button+0x208>)
 800100e:	4613      	mov	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	1a9b      	subs	r3, r3, r2
 8001014:	440b      	add	r3, r1
 8001016:	3303      	adds	r3, #3
 8001018:	7819      	ldrb	r1, [r3, #0]
 800101a:	79fa      	ldrb	r2, [r7, #7]
 800101c:	4845      	ldr	r0, [pc, #276]	; (8001134 <read_button+0x208>)
 800101e:	4613      	mov	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	1a9b      	subs	r3, r3, r2
 8001024:	4403      	add	r3, r0
 8001026:	3302      	adds	r3, #2
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	4299      	cmp	r1, r3
 800102c:	d176      	bne.n	800111c <read_button+0x1f0>
				&& MyButton[i].debounce[2] == MyButton[i].debounce[1]
 800102e:	79fa      	ldrb	r2, [r7, #7]
 8001030:	4940      	ldr	r1, [pc, #256]	; (8001134 <read_button+0x208>)
 8001032:	4613      	mov	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	1a9b      	subs	r3, r3, r2
 8001038:	440b      	add	r3, r1
 800103a:	3302      	adds	r3, #2
 800103c:	7819      	ldrb	r1, [r3, #0]
 800103e:	79fa      	ldrb	r2, [r7, #7]
 8001040:	483c      	ldr	r0, [pc, #240]	; (8001134 <read_button+0x208>)
 8001042:	4613      	mov	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	1a9b      	subs	r3, r3, r2
 8001048:	4403      	add	r3, r0
 800104a:	3301      	adds	r3, #1
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	4299      	cmp	r1, r3
 8001050:	d164      	bne.n	800111c <read_button+0x1f0>
				&& MyButton[i].debounce[1] == MyButton[i].debounce[0]) {
 8001052:	79fa      	ldrb	r2, [r7, #7]
 8001054:	4937      	ldr	r1, [pc, #220]	; (8001134 <read_button+0x208>)
 8001056:	4613      	mov	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	1a9b      	subs	r3, r3, r2
 800105c:	440b      	add	r3, r1
 800105e:	3301      	adds	r3, #1
 8001060:	7819      	ldrb	r1, [r3, #0]
 8001062:	79fa      	ldrb	r2, [r7, #7]
 8001064:	4833      	ldr	r0, [pc, #204]	; (8001134 <read_button+0x208>)
 8001066:	4613      	mov	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	1a9b      	subs	r3, r3, r2
 800106c:	4403      	add	r3, r0
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4299      	cmp	r1, r3
 8001072:	d153      	bne.n	800111c <read_button+0x1f0>
			if (MyButton[i].debounce[0] == PRESSED) {
 8001074:	79fa      	ldrb	r2, [r7, #7]
 8001076:	492f      	ldr	r1, [pc, #188]	; (8001134 <read_button+0x208>)
 8001078:	4613      	mov	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	1a9b      	subs	r3, r3, r2
 800107e:	440b      	add	r3, r1
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d12f      	bne.n	80010e6 <read_button+0x1ba>
				MyButton[i].is_pressed = 1;
 8001086:	79fa      	ldrb	r2, [r7, #7]
 8001088:	492a      	ldr	r1, [pc, #168]	; (8001134 <read_button+0x208>)
 800108a:	4613      	mov	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	1a9b      	subs	r3, r3, r2
 8001090:	440b      	add	r3, r1
 8001092:	3304      	adds	r3, #4
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]
				if (MyButton[i].TimePress > 0) {
 8001098:	79fa      	ldrb	r2, [r7, #7]
 800109a:	4926      	ldr	r1, [pc, #152]	; (8001134 <read_button+0x208>)
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	3306      	adds	r3, #6
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d012      	beq.n	80010d2 <read_button+0x1a6>
					MyButton[i].TimePress--;
 80010ac:	79fa      	ldrb	r2, [r7, #7]
 80010ae:	4921      	ldr	r1, [pc, #132]	; (8001134 <read_button+0x208>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	3306      	adds	r3, #6
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	3b01      	subs	r3, #1
 80010be:	b2d8      	uxtb	r0, r3
 80010c0:	491c      	ldr	r1, [pc, #112]	; (8001134 <read_button+0x208>)
 80010c2:	4613      	mov	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	1a9b      	subs	r3, r3, r2
 80010c8:	440b      	add	r3, r1
 80010ca:	3306      	adds	r3, #6
 80010cc:	4602      	mov	r2, r0
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	e024      	b.n	800111c <read_button+0x1f0>
				} else {
					MyButton[i].is_long_pressed = 1;
 80010d2:	79fa      	ldrb	r2, [r7, #7]
 80010d4:	4917      	ldr	r1, [pc, #92]	; (8001134 <read_button+0x208>)
 80010d6:	4613      	mov	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	1a9b      	subs	r3, r3, r2
 80010dc:	440b      	add	r3, r1
 80010de:	3305      	adds	r3, #5
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e01a      	b.n	800111c <read_button+0x1f0>
				}
			} else {
				MyButton[i].TimePress = LONG_PRESSED;
 80010e6:	79fa      	ldrb	r2, [r7, #7]
 80010e8:	4912      	ldr	r1, [pc, #72]	; (8001134 <read_button+0x208>)
 80010ea:	4613      	mov	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	1a9b      	subs	r3, r3, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	3306      	adds	r3, #6
 80010f4:	22c8      	movs	r2, #200	; 0xc8
 80010f6:	701a      	strb	r2, [r3, #0]
				MyButton[i].is_pressed = 0;
 80010f8:	79fa      	ldrb	r2, [r7, #7]
 80010fa:	490e      	ldr	r1, [pc, #56]	; (8001134 <read_button+0x208>)
 80010fc:	4613      	mov	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	1a9b      	subs	r3, r3, r2
 8001102:	440b      	add	r3, r1
 8001104:	3304      	adds	r3, #4
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
				MyButton[i].is_long_pressed = 0;
 800110a:	79fa      	ldrb	r2, [r7, #7]
 800110c:	4909      	ldr	r1, [pc, #36]	; (8001134 <read_button+0x208>)
 800110e:	4613      	mov	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	440b      	add	r3, r1
 8001116:	3305      	adds	r3, #5
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_BUTTON; i++) {
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	3301      	adds	r3, #1
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b02      	cmp	r3, #2
 8001126:	f67f af07 	bls.w	8000f38 <read_button+0xc>
			}

		}
	}
}
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bd90      	pop	{r4, r7, pc}
 8001134:	20000094 	.word	0x20000094
 8001138:	40010800 	.word	0x40010800

0800113c <is_button_pressed>:

uint8_t is_button_pressed(uint8_t i) {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	if (i > NUM_BUTTON)
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d901      	bls.n	8001150 <is_button_pressed+0x14>
		return 0xff;
 800114c:	23ff      	movs	r3, #255	; 0xff
 800114e:	e007      	b.n	8001160 <is_button_pressed+0x24>
	return MyButton[i].is_pressed;
 8001150:	79fa      	ldrb	r2, [r7, #7]
 8001152:	4906      	ldr	r1, [pc, #24]	; (800116c <is_button_pressed+0x30>)
 8001154:	4613      	mov	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	1a9b      	subs	r3, r3, r2
 800115a:	440b      	add	r3, r1
 800115c:	3304      	adds	r3, #4
 800115e:	781b      	ldrb	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000094 	.word	0x20000094

08001170 <is_button_long_pressed>:
uint8_t is_button_long_pressed(uint8_t i) {
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	if (i > NUM_BUTTON)
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b03      	cmp	r3, #3
 800117e:	d901      	bls.n	8001184 <is_button_long_pressed+0x14>
		return 0xff;
 8001180:	23ff      	movs	r3, #255	; 0xff
 8001182:	e007      	b.n	8001194 <is_button_long_pressed+0x24>
	return MyButton[i].is_long_pressed;
 8001184:	79fa      	ldrb	r2, [r7, #7]
 8001186:	4906      	ldr	r1, [pc, #24]	; (80011a0 <is_button_long_pressed+0x30>)
 8001188:	4613      	mov	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	1a9b      	subs	r3, r3, r2
 800118e:	440b      	add	r3, r1
 8001190:	3305      	adds	r3, #5
 8001192:	781b      	ldrb	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000094 	.word	0x20000094

080011a4 <setTimer>:
 * timer[2]: trafficlight
 * timer[3]: read button
 * timer[4]: overtimer increase
 * */

void setTimer(uint8_t idx, unsigned int duration) {
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	71fb      	strb	r3, [r7, #7]
	timer[idx].timer_counter = duration * Overall_Freq / 1000;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011b6:	fb03 f202 	mul.w	r2, r3, r2
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4908      	ldr	r1, [pc, #32]	; (80011e0 <setTimer+0x3c>)
 80011be:	fba1 1202 	umull	r1, r2, r1, r2
 80011c2:	0992      	lsrs	r2, r2, #6
 80011c4:	4907      	ldr	r1, [pc, #28]	; (80011e4 <setTimer+0x40>)
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	440b      	add	r3, r1
 80011ca:	605a      	str	r2, [r3, #4]
	timer[idx].flag = 0;
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <setTimer+0x40>)
 80011d0:	2100      	movs	r1, #0
 80011d2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	10624dd3 	.word	0x10624dd3
 80011e4:	200000ac 	.word	0x200000ac

080011e8 <timerRun>:


void timerRun() {
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
	for (uint8_t idx = 0; idx < NUM_OF_TIMER; idx++) {
 80011ee:	2300      	movs	r3, #0
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	e01f      	b.n	8001234 <timerRun+0x4c>
		if (timer[idx].timer_counter > 0) {
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4a14      	ldr	r2, [pc, #80]	; (8001248 <timerRun+0x60>)
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	4413      	add	r3, r2
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d015      	beq.n	800122e <timerRun+0x46>
			timer[idx].timer_counter--;
 8001202:	79fa      	ldrb	r2, [r7, #7]
 8001204:	4910      	ldr	r1, [pc, #64]	; (8001248 <timerRun+0x60>)
 8001206:	00d3      	lsls	r3, r2, #3
 8001208:	440b      	add	r3, r1
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	1e59      	subs	r1, r3, #1
 800120e:	480e      	ldr	r0, [pc, #56]	; (8001248 <timerRun+0x60>)
 8001210:	00d3      	lsls	r3, r2, #3
 8001212:	4403      	add	r3, r0
 8001214:	6059      	str	r1, [r3, #4]
			if (timer[idx].timer_counter <= 0) {
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <timerRun+0x60>)
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4413      	add	r3, r2
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d104      	bne.n	800122e <timerRun+0x46>
				timer[idx].flag = 1;
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	4a08      	ldr	r2, [pc, #32]	; (8001248 <timerRun+0x60>)
 8001228:	2101      	movs	r1, #1
 800122a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (uint8_t idx = 0; idx < NUM_OF_TIMER; idx++) {
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	3301      	adds	r3, #1
 8001232:	71fb      	strb	r3, [r7, #7]
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b04      	cmp	r3, #4
 8001238:	d9dc      	bls.n	80011f4 <timerRun+0xc>
			}
		}
	}

}
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200000ac 	.word	0x200000ac

0800124c <timerOn>:

bool timerOn(uint8_t idx){
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
	return (!timer[idx].flag);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4a09      	ldr	r2, [pc, #36]	; (8001280 <timerOn+0x34>)
 800125a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800125e:	2b00      	cmp	r3, #0
 8001260:	bf14      	ite	ne
 8001262:	2301      	movne	r3, #1
 8001264:	2300      	moveq	r3, #0
 8001266:	b2db      	uxtb	r3, r3
 8001268:	f083 0301 	eor.w	r3, r3, #1
 800126c:	b2db      	uxtb	r3, r3
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	200000ac 	.word	0x200000ac

08001284 <initTimer>:

void initTimer(){
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	setTimer(0, TIME_BLINK_LED);
 8001288:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff ff89 	bl	80011a4 <setTimer>
	setTimer(1, TIME_SCAN_7SEG);
 8001292:	2101      	movs	r1, #1
 8001294:	2001      	movs	r0, #1
 8001296:	f7ff ff85 	bl	80011a4 <setTimer>
	setTimer(2, TIME_TRAFFIC_LIGHT);
 800129a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800129e:	2002      	movs	r0, #2
 80012a0:	f7ff ff80 	bl	80011a4 <setTimer>
	setTimer(3, TIME_BUTTON);
 80012a4:	2164      	movs	r1, #100	; 0x64
 80012a6:	2003      	movs	r0, #3
 80012a8:	f7ff ff7c 	bl	80011a4 <setTimer>
	setTimer(4, TIME_OVER);
 80012ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80012b0:	2004      	movs	r0, #4
 80012b2:	f7ff ff77 	bl	80011a4 <setTimer>
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_MspInit+0x40>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <HAL_MspInit+0x40>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6193      	str	r3, [r2, #24]
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_MspInit+0x40>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_MspInit+0x40>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_MspInit+0x40>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e4:	61d3      	str	r3, [r2, #28]
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_MspInit+0x40>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	40021000 	.word	0x40021000

08001300 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001310:	d113      	bne.n	800133a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_TIM_Base_MspInit+0x44>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <HAL_TIM_Base_MspInit+0x44>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_TIM_Base_MspInit+0x44>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	201c      	movs	r0, #28
 8001330:	f000 f9a1 	bl	8001676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001334:	201c      	movs	r0, #28
 8001336:	f000 f9ba 	bl	80016ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800134c:	e7fe      	b.n	800134c <NMI_Handler+0x4>

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138e:	f000 f87f 	bl	8001490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <TIM2_IRQHandler+0x10>)
 800139e:	f000 ffd5 	bl	800234c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000044 	.word	0x20000044

080013ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013b8:	f7ff fff8 	bl	80013ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013bc:	480b      	ldr	r0, [pc, #44]	; (80013ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013be:	490c      	ldr	r1, [pc, #48]	; (80013f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013c0:	4a0c      	ldr	r2, [pc, #48]	; (80013f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c4:	e002      	b.n	80013cc <LoopCopyDataInit>

080013c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ca:	3304      	adds	r3, #4

080013cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d0:	d3f9      	bcc.n	80013c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d2:	4a09      	ldr	r2, [pc, #36]	; (80013f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013d4:	4c09      	ldr	r4, [pc, #36]	; (80013fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d8:	e001      	b.n	80013de <LoopFillZerobss>

080013da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013dc:	3204      	adds	r2, #4

080013de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e0:	d3fb      	bcc.n	80013da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e2:	f001 fb17 	bl	8002a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013e6:	f7ff f9d3 	bl	8000790 <main>
  bx lr
 80013ea:	4770      	bx	lr
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80013f4:	08002aa0 	.word	0x08002aa0
  ldr r2, =_sbss
 80013f8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80013fc:	200000d8 	.word	0x200000d8

08001400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC1_2_IRQHandler>
	...

08001404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <HAL_Init+0x28>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a07      	ldr	r2, [pc, #28]	; (800142c <HAL_Init+0x28>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001414:	2003      	movs	r0, #3
 8001416:	f000 f923 	bl	8001660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141a:	200f      	movs	r0, #15
 800141c:	f000 f808 	bl	8001430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001420:	f7ff ff4c 	bl	80012bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40022000 	.word	0x40022000

08001430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_InitTick+0x54>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_InitTick+0x58>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	fbb3 f3f1 	udiv	r3, r3, r1
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f93b 	bl	80016ca <HAL_SYSTICK_Config>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e00e      	b.n	800147c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b0f      	cmp	r3, #15
 8001462:	d80a      	bhi.n	800147a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001464:	2200      	movs	r2, #0
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f000 f903 	bl	8001676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001470:	4a06      	ldr	r2, [pc, #24]	; (800148c <HAL_InitTick+0x5c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	e000      	b.n	800147c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000018 	.word	0x20000018
 8001488:	20000020 	.word	0x20000020
 800148c:	2000001c 	.word	0x2000001c

08001490 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_IncTick+0x1c>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_IncTick+0x20>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	4a03      	ldr	r2, [pc, #12]	; (80014b0 <HAL_IncTick+0x20>)
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	20000020 	.word	0x20000020
 80014b0:	200000d4 	.word	0x200000d4

080014b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return uwTick;
 80014b8:	4b02      	ldr	r3, [pc, #8]	; (80014c4 <HAL_GetTick+0x10>)
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	200000d4 	.word	0x200000d4

080014c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e4:	4013      	ands	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	60d3      	str	r3, [r2, #12]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <__NVIC_GetPriorityGrouping+0x18>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	f003 0307 	and.w	r3, r3, #7
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	2b00      	cmp	r3, #0
 800153c:	db0b      	blt.n	8001556 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	f003 021f 	and.w	r2, r3, #31
 8001544:	4906      	ldr	r1, [pc, #24]	; (8001560 <__NVIC_EnableIRQ+0x34>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	095b      	lsrs	r3, r3, #5
 800154c:	2001      	movs	r0, #1
 800154e:	fa00 f202 	lsl.w	r2, r0, r2
 8001552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	e000e100 	.word	0xe000e100

08001564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db0a      	blt.n	800158e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	490c      	ldr	r1, [pc, #48]	; (80015b0 <__NVIC_SetPriority+0x4c>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	440b      	add	r3, r1
 8001588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800158c:	e00a      	b.n	80015a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4908      	ldr	r1, [pc, #32]	; (80015b4 <__NVIC_SetPriority+0x50>)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	3b04      	subs	r3, #4
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	440b      	add	r3, r1
 80015a2:	761a      	strb	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f1c3 0307 	rsb	r3, r3, #7
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	bf28      	it	cs
 80015d6:	2304      	movcs	r3, #4
 80015d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3304      	adds	r3, #4
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d902      	bls.n	80015e8 <NVIC_EncodePriority+0x30>
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3b03      	subs	r3, #3
 80015e6:	e000      	b.n	80015ea <NVIC_EncodePriority+0x32>
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	401a      	ands	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43d9      	mvns	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	4313      	orrs	r3, r2
         );
}
 8001612:	4618      	mov	r0, r3
 8001614:	3724      	adds	r7, #36	; 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800162c:	d301      	bcc.n	8001632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162e:	2301      	movs	r3, #1
 8001630:	e00f      	b.n	8001652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <SysTick_Config+0x40>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163a:	210f      	movs	r1, #15
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f7ff ff90 	bl	8001564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <SysTick_Config+0x40>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <SysTick_Config+0x40>)
 800164c:	2207      	movs	r2, #7
 800164e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	e000e010 	.word	0xe000e010

08001660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ff2d 	bl	80014c8 <__NVIC_SetPriorityGrouping>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001688:	f7ff ff42 	bl	8001510 <__NVIC_GetPriorityGrouping>
 800168c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	f7ff ff90 	bl	80015b8 <NVIC_EncodePriority>
 8001698:	4602      	mov	r2, r0
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff5f 	bl	8001564 <__NVIC_SetPriority>
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff35 	bl	800152c <__NVIC_EnableIRQ>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ffa2 	bl	800161c <SysTick_Config>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b08b      	sub	sp, #44	; 0x2c
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f6:	e169      	b.n	80019cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016f8:	2201      	movs	r2, #1
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	429a      	cmp	r2, r3
 8001712:	f040 8158 	bne.w	80019c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4a9a      	ldr	r2, [pc, #616]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d05e      	beq.n	80017de <HAL_GPIO_Init+0xfa>
 8001720:	4a98      	ldr	r2, [pc, #608]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d875      	bhi.n	8001812 <HAL_GPIO_Init+0x12e>
 8001726:	4a98      	ldr	r2, [pc, #608]	; (8001988 <HAL_GPIO_Init+0x2a4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d058      	beq.n	80017de <HAL_GPIO_Init+0xfa>
 800172c:	4a96      	ldr	r2, [pc, #600]	; (8001988 <HAL_GPIO_Init+0x2a4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d86f      	bhi.n	8001812 <HAL_GPIO_Init+0x12e>
 8001732:	4a96      	ldr	r2, [pc, #600]	; (800198c <HAL_GPIO_Init+0x2a8>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d052      	beq.n	80017de <HAL_GPIO_Init+0xfa>
 8001738:	4a94      	ldr	r2, [pc, #592]	; (800198c <HAL_GPIO_Init+0x2a8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d869      	bhi.n	8001812 <HAL_GPIO_Init+0x12e>
 800173e:	4a94      	ldr	r2, [pc, #592]	; (8001990 <HAL_GPIO_Init+0x2ac>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d04c      	beq.n	80017de <HAL_GPIO_Init+0xfa>
 8001744:	4a92      	ldr	r2, [pc, #584]	; (8001990 <HAL_GPIO_Init+0x2ac>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d863      	bhi.n	8001812 <HAL_GPIO_Init+0x12e>
 800174a:	4a92      	ldr	r2, [pc, #584]	; (8001994 <HAL_GPIO_Init+0x2b0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d046      	beq.n	80017de <HAL_GPIO_Init+0xfa>
 8001750:	4a90      	ldr	r2, [pc, #576]	; (8001994 <HAL_GPIO_Init+0x2b0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d85d      	bhi.n	8001812 <HAL_GPIO_Init+0x12e>
 8001756:	2b12      	cmp	r3, #18
 8001758:	d82a      	bhi.n	80017b0 <HAL_GPIO_Init+0xcc>
 800175a:	2b12      	cmp	r3, #18
 800175c:	d859      	bhi.n	8001812 <HAL_GPIO_Init+0x12e>
 800175e:	a201      	add	r2, pc, #4	; (adr r2, 8001764 <HAL_GPIO_Init+0x80>)
 8001760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001764:	080017df 	.word	0x080017df
 8001768:	080017b9 	.word	0x080017b9
 800176c:	080017cb 	.word	0x080017cb
 8001770:	0800180d 	.word	0x0800180d
 8001774:	08001813 	.word	0x08001813
 8001778:	08001813 	.word	0x08001813
 800177c:	08001813 	.word	0x08001813
 8001780:	08001813 	.word	0x08001813
 8001784:	08001813 	.word	0x08001813
 8001788:	08001813 	.word	0x08001813
 800178c:	08001813 	.word	0x08001813
 8001790:	08001813 	.word	0x08001813
 8001794:	08001813 	.word	0x08001813
 8001798:	08001813 	.word	0x08001813
 800179c:	08001813 	.word	0x08001813
 80017a0:	08001813 	.word	0x08001813
 80017a4:	08001813 	.word	0x08001813
 80017a8:	080017c1 	.word	0x080017c1
 80017ac:	080017d5 	.word	0x080017d5
 80017b0:	4a79      	ldr	r2, [pc, #484]	; (8001998 <HAL_GPIO_Init+0x2b4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d013      	beq.n	80017de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017b6:	e02c      	b.n	8001812 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	623b      	str	r3, [r7, #32]
          break;
 80017be:	e029      	b.n	8001814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	3304      	adds	r3, #4
 80017c6:	623b      	str	r3, [r7, #32]
          break;
 80017c8:	e024      	b.n	8001814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	3308      	adds	r3, #8
 80017d0:	623b      	str	r3, [r7, #32]
          break;
 80017d2:	e01f      	b.n	8001814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	330c      	adds	r3, #12
 80017da:	623b      	str	r3, [r7, #32]
          break;
 80017dc:	e01a      	b.n	8001814 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017e6:	2304      	movs	r3, #4
 80017e8:	623b      	str	r3, [r7, #32]
          break;
 80017ea:	e013      	b.n	8001814 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d105      	bne.n	8001800 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f4:	2308      	movs	r3, #8
 80017f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	611a      	str	r2, [r3, #16]
          break;
 80017fe:	e009      	b.n	8001814 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001800:	2308      	movs	r3, #8
 8001802:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	615a      	str	r2, [r3, #20]
          break;
 800180a:	e003      	b.n	8001814 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
          break;
 8001810:	e000      	b.n	8001814 <HAL_GPIO_Init+0x130>
          break;
 8001812:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2bff      	cmp	r3, #255	; 0xff
 8001818:	d801      	bhi.n	800181e <HAL_GPIO_Init+0x13a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	e001      	b.n	8001822 <HAL_GPIO_Init+0x13e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3304      	adds	r3, #4
 8001822:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2bff      	cmp	r3, #255	; 0xff
 8001828:	d802      	bhi.n	8001830 <HAL_GPIO_Init+0x14c>
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	e002      	b.n	8001836 <HAL_GPIO_Init+0x152>
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	3b08      	subs	r3, #8
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	210f      	movs	r1, #15
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	401a      	ands	r2, r3
 8001848:	6a39      	ldr	r1, [r7, #32]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	431a      	orrs	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 80b1 	beq.w	80019c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001864:	4b4d      	ldr	r3, [pc, #308]	; (800199c <HAL_GPIO_Init+0x2b8>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a4c      	ldr	r2, [pc, #304]	; (800199c <HAL_GPIO_Init+0x2b8>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b4a      	ldr	r3, [pc, #296]	; (800199c <HAL_GPIO_Init+0x2b8>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800187c:	4a48      	ldr	r2, [pc, #288]	; (80019a0 <HAL_GPIO_Init+0x2bc>)
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	3302      	adds	r3, #2
 8001884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001888:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	220f      	movs	r2, #15
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	4013      	ands	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a40      	ldr	r2, [pc, #256]	; (80019a4 <HAL_GPIO_Init+0x2c0>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d013      	beq.n	80018d0 <HAL_GPIO_Init+0x1ec>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a3f      	ldr	r2, [pc, #252]	; (80019a8 <HAL_GPIO_Init+0x2c4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d00d      	beq.n	80018cc <HAL_GPIO_Init+0x1e8>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a3e      	ldr	r2, [pc, #248]	; (80019ac <HAL_GPIO_Init+0x2c8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d007      	beq.n	80018c8 <HAL_GPIO_Init+0x1e4>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a3d      	ldr	r2, [pc, #244]	; (80019b0 <HAL_GPIO_Init+0x2cc>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d101      	bne.n	80018c4 <HAL_GPIO_Init+0x1e0>
 80018c0:	2303      	movs	r3, #3
 80018c2:	e006      	b.n	80018d2 <HAL_GPIO_Init+0x1ee>
 80018c4:	2304      	movs	r3, #4
 80018c6:	e004      	b.n	80018d2 <HAL_GPIO_Init+0x1ee>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e002      	b.n	80018d2 <HAL_GPIO_Init+0x1ee>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <HAL_GPIO_Init+0x1ee>
 80018d0:	2300      	movs	r3, #0
 80018d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d4:	f002 0203 	and.w	r2, r2, #3
 80018d8:	0092      	lsls	r2, r2, #2
 80018da:	4093      	lsls	r3, r2
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018e2:	492f      	ldr	r1, [pc, #188]	; (80019a0 <HAL_GPIO_Init+0x2bc>)
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	3302      	adds	r3, #2
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018fc:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	492c      	ldr	r1, [pc, #176]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	608b      	str	r3, [r1, #8]
 8001908:	e006      	b.n	8001918 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800190a:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	43db      	mvns	r3, r3
 8001912:	4928      	ldr	r1, [pc, #160]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 8001914:	4013      	ands	r3, r2
 8001916:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d006      	beq.n	8001932 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001924:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	4922      	ldr	r1, [pc, #136]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	60cb      	str	r3, [r1, #12]
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	43db      	mvns	r3, r3
 800193a:	491e      	ldr	r1, [pc, #120]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 800193c:	4013      	ands	r3, r2
 800193e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d006      	beq.n	800195a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	4918      	ldr	r1, [pc, #96]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	604b      	str	r3, [r1, #4]
 8001958:	e006      	b.n	8001968 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	43db      	mvns	r3, r3
 8001962:	4914      	ldr	r1, [pc, #80]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 8001964:	4013      	ands	r3, r2
 8001966:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d021      	beq.n	80019b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	490e      	ldr	r1, [pc, #56]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	600b      	str	r3, [r1, #0]
 8001980:	e021      	b.n	80019c6 <HAL_GPIO_Init+0x2e2>
 8001982:	bf00      	nop
 8001984:	10320000 	.word	0x10320000
 8001988:	10310000 	.word	0x10310000
 800198c:	10220000 	.word	0x10220000
 8001990:	10210000 	.word	0x10210000
 8001994:	10120000 	.word	0x10120000
 8001998:	10110000 	.word	0x10110000
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010000 	.word	0x40010000
 80019a4:	40010800 	.word	0x40010800
 80019a8:	40010c00 	.word	0x40010c00
 80019ac:	40011000 	.word	0x40011000
 80019b0:	40011400 	.word	0x40011400
 80019b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_GPIO_Init+0x304>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	43db      	mvns	r3, r3
 80019c0:	4909      	ldr	r1, [pc, #36]	; (80019e8 <HAL_GPIO_Init+0x304>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	3301      	adds	r3, #1
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	fa22 f303 	lsr.w	r3, r2, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f47f ae8e 	bne.w	80016f8 <HAL_GPIO_Init+0x14>
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	372c      	adds	r7, #44	; 0x2c
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	40010400 	.word	0x40010400

080019ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	887b      	ldrh	r3, [r7, #2]
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a04:	2301      	movs	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
 8001a08:	e001      	b.n	8001a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	807b      	strh	r3, [r7, #2]
 8001a26:	4613      	mov	r3, r2
 8001a28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a2a:	787b      	ldrb	r3, [r7, #1]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a30:	887a      	ldrh	r2, [r7, #2]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a36:	e003      	b.n	8001a40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a38:	887b      	ldrh	r3, [r7, #2]
 8001a3a:	041a      	lsls	r2, r3, #16
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	611a      	str	r2, [r3, #16]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
	...

08001a4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e272      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8087 	beq.w	8001b7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a6c:	4b92      	ldr	r3, [pc, #584]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d00c      	beq.n	8001a92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a78:	4b8f      	ldr	r3, [pc, #572]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d112      	bne.n	8001aaa <HAL_RCC_OscConfig+0x5e>
 8001a84:	4b8c      	ldr	r3, [pc, #560]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a90:	d10b      	bne.n	8001aaa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a92:	4b89      	ldr	r3, [pc, #548]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d06c      	beq.n	8001b78 <HAL_RCC_OscConfig+0x12c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d168      	bne.n	8001b78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e24c      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab2:	d106      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x76>
 8001ab4:	4b80      	ldr	r3, [pc, #512]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a7f      	ldr	r2, [pc, #508]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	e02e      	b.n	8001b20 <HAL_RCC_OscConfig+0xd4>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x98>
 8001aca:	4b7b      	ldr	r3, [pc, #492]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a7a      	ldr	r2, [pc, #488]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	4b78      	ldr	r3, [pc, #480]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a77      	ldr	r2, [pc, #476]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e01d      	b.n	8001b20 <HAL_RCC_OscConfig+0xd4>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0xbc>
 8001aee:	4b72      	ldr	r3, [pc, #456]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a71      	ldr	r2, [pc, #452]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b6f      	ldr	r3, [pc, #444]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a6e      	ldr	r2, [pc, #440]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	e00b      	b.n	8001b20 <HAL_RCC_OscConfig+0xd4>
 8001b08:	4b6b      	ldr	r3, [pc, #428]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a6a      	ldr	r2, [pc, #424]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b68      	ldr	r3, [pc, #416]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a67      	ldr	r2, [pc, #412]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d013      	beq.n	8001b50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7ff fcc4 	bl	80014b4 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b30:	f7ff fcc0 	bl	80014b4 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	; 0x64
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e200      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b5d      	ldr	r3, [pc, #372]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0xe4>
 8001b4e:	e014      	b.n	8001b7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff fcb0 	bl	80014b4 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b58:	f7ff fcac 	bl	80014b4 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	; 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e1ec      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6a:	4b53      	ldr	r3, [pc, #332]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x10c>
 8001b76:	e000      	b.n	8001b7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d063      	beq.n	8001c4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b86:	4b4c      	ldr	r3, [pc, #304]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00b      	beq.n	8001baa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b92:	4b49      	ldr	r3, [pc, #292]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d11c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x18c>
 8001b9e:	4b46      	ldr	r3, [pc, #280]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d116      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001baa:	4b43      	ldr	r3, [pc, #268]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d005      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x176>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e1c0      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4939      	ldr	r1, [pc, #228]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd6:	e03a      	b.n	8001c4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d020      	beq.n	8001c22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be0:	4b36      	ldr	r3, [pc, #216]	; (8001cbc <HAL_RCC_OscConfig+0x270>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7ff fc65 	bl	80014b4 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bee:	f7ff fc61 	bl	80014b4 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e1a1      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c00:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0c:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4927      	ldr	r1, [pc, #156]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	600b      	str	r3, [r1, #0]
 8001c20:	e015      	b.n	8001c4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c22:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <HAL_RCC_OscConfig+0x270>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff fc44 	bl	80014b4 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c30:	f7ff fc40 	bl	80014b4 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e180      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c42:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d03a      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d019      	beq.n	8001c96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c62:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <HAL_RCC_OscConfig+0x274>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c68:	f7ff fc24 	bl	80014b4 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c70:	f7ff fc20 	bl	80014b4 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e160      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f000 fa9c 	bl	80021cc <RCC_Delay>
 8001c94:	e01c      	b.n	8001cd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_RCC_OscConfig+0x274>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9c:	f7ff fc0a 	bl	80014b4 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca4:	f7ff fc06 	bl	80014b4 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d908      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e146      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	42420000 	.word	0x42420000
 8001cc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc4:	4b92      	ldr	r3, [pc, #584]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1e9      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80a6 	beq.w	8001e2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce2:	4b8b      	ldr	r3, [pc, #556]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10d      	bne.n	8001d0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	4b88      	ldr	r3, [pc, #544]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	4a87      	ldr	r2, [pc, #540]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	61d3      	str	r3, [r2, #28]
 8001cfa:	4b85      	ldr	r3, [pc, #532]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d06:	2301      	movs	r3, #1
 8001d08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0a:	4b82      	ldr	r3, [pc, #520]	; (8001f14 <HAL_RCC_OscConfig+0x4c8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d118      	bne.n	8001d48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d16:	4b7f      	ldr	r3, [pc, #508]	; (8001f14 <HAL_RCC_OscConfig+0x4c8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a7e      	ldr	r2, [pc, #504]	; (8001f14 <HAL_RCC_OscConfig+0x4c8>)
 8001d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d22:	f7ff fbc7 	bl	80014b4 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2a:	f7ff fbc3 	bl	80014b4 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b64      	cmp	r3, #100	; 0x64
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e103      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3c:	4b75      	ldr	r3, [pc, #468]	; (8001f14 <HAL_RCC_OscConfig+0x4c8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d106      	bne.n	8001d5e <HAL_RCC_OscConfig+0x312>
 8001d50:	4b6f      	ldr	r3, [pc, #444]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	4a6e      	ldr	r2, [pc, #440]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6213      	str	r3, [r2, #32]
 8001d5c:	e02d      	b.n	8001dba <HAL_RCC_OscConfig+0x36e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x334>
 8001d66:	4b6a      	ldr	r3, [pc, #424]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	4a69      	ldr	r2, [pc, #420]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	f023 0301 	bic.w	r3, r3, #1
 8001d70:	6213      	str	r3, [r2, #32]
 8001d72:	4b67      	ldr	r3, [pc, #412]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	4a66      	ldr	r2, [pc, #408]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	f023 0304 	bic.w	r3, r3, #4
 8001d7c:	6213      	str	r3, [r2, #32]
 8001d7e:	e01c      	b.n	8001dba <HAL_RCC_OscConfig+0x36e>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d10c      	bne.n	8001da2 <HAL_RCC_OscConfig+0x356>
 8001d88:	4b61      	ldr	r3, [pc, #388]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	4a60      	ldr	r2, [pc, #384]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	f043 0304 	orr.w	r3, r3, #4
 8001d92:	6213      	str	r3, [r2, #32]
 8001d94:	4b5e      	ldr	r3, [pc, #376]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4a5d      	ldr	r2, [pc, #372]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6213      	str	r3, [r2, #32]
 8001da0:	e00b      	b.n	8001dba <HAL_RCC_OscConfig+0x36e>
 8001da2:	4b5b      	ldr	r3, [pc, #364]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4a5a      	ldr	r2, [pc, #360]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6213      	str	r3, [r2, #32]
 8001dae:	4b58      	ldr	r3, [pc, #352]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a57      	ldr	r2, [pc, #348]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	f023 0304 	bic.w	r3, r3, #4
 8001db8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d015      	beq.n	8001dee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fb77 	bl	80014b4 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7ff fb73 	bl	80014b4 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e0b1      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	4b4b      	ldr	r3, [pc, #300]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0ee      	beq.n	8001dca <HAL_RCC_OscConfig+0x37e>
 8001dec:	e014      	b.n	8001e18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7ff fb61 	bl	80014b4 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df4:	e00a      	b.n	8001e0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df6:	f7ff fb5d 	bl	80014b4 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e09b      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1ee      	bne.n	8001df6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d105      	bne.n	8001e2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e1e:	4b3c      	ldr	r3, [pc, #240]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	4a3b      	ldr	r2, [pc, #236]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 8087 	beq.w	8001f42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e34:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d061      	beq.n	8001f04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d146      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e48:	4b33      	ldr	r3, [pc, #204]	; (8001f18 <HAL_RCC_OscConfig+0x4cc>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4e:	f7ff fb31 	bl	80014b4 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e56:	f7ff fb2d 	bl	80014b4 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e06d      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e68:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f0      	bne.n	8001e56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7c:	d108      	bne.n	8001e90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e7e:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	4921      	ldr	r1, [pc, #132]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e90:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a19      	ldr	r1, [r3, #32]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	491b      	ldr	r1, [pc, #108]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <HAL_RCC_OscConfig+0x4cc>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eae:	f7ff fb01 	bl	80014b4 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7ff fafd 	bl	80014b4 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e03d      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x46a>
 8001ed4:	e035      	b.n	8001f42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <HAL_RCC_OscConfig+0x4cc>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff faea 	bl	80014b4 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff fae6 	bl	80014b4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e026      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x498>
 8001f02:	e01e      	b.n	8001f42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d107      	bne.n	8001f1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e019      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40007000 	.word	0x40007000
 8001f18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_RCC_OscConfig+0x500>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021000 	.word	0x40021000

08001f50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0d0      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f64:	4b6a      	ldr	r3, [pc, #424]	; (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d910      	bls.n	8001f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b67      	ldr	r3, [pc, #412]	; (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 0207 	bic.w	r2, r3, #7
 8001f7a:	4965      	ldr	r1, [pc, #404]	; (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b63      	ldr	r3, [pc, #396]	; (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0b8      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d020      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fac:	4b59      	ldr	r3, [pc, #356]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4a58      	ldr	r2, [pc, #352]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fc4:	4b53      	ldr	r3, [pc, #332]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a52      	ldr	r2, [pc, #328]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd0:	4b50      	ldr	r3, [pc, #320]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	494d      	ldr	r1, [pc, #308]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d040      	beq.n	8002070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d107      	bne.n	8002006 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff6:	4b47      	ldr	r3, [pc, #284]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d115      	bne.n	800202e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e07f      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200e:	4b41      	ldr	r3, [pc, #260]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e073      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201e:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e06b      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202e:	4b39      	ldr	r3, [pc, #228]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f023 0203 	bic.w	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4936      	ldr	r1, [pc, #216]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002040:	f7ff fa38 	bl	80014b4 <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002046:	e00a      	b.n	800205e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002048:	f7ff fa34 	bl	80014b4 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	; 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e053      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 020c 	and.w	r2, r3, #12
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	429a      	cmp	r2, r3
 800206e:	d1eb      	bne.n	8002048 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002070:	4b27      	ldr	r3, [pc, #156]	; (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d210      	bcs.n	80020a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b24      	ldr	r3, [pc, #144]	; (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 0207 	bic.w	r2, r3, #7
 8002086:	4922      	ldr	r1, [pc, #136]	; (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e032      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ac:	4b19      	ldr	r3, [pc, #100]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4916      	ldr	r1, [pc, #88]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ca:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	490e      	ldr	r1, [pc, #56]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020de:	f000 f821 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 80020e2:	4602      	mov	r2, r0
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	490a      	ldr	r1, [pc, #40]	; (8002118 <HAL_RCC_ClockConfig+0x1c8>)
 80020f0:	5ccb      	ldrb	r3, [r1, r3]
 80020f2:	fa22 f303 	lsr.w	r3, r2, r3
 80020f6:	4a09      	ldr	r2, [pc, #36]	; (800211c <HAL_RCC_ClockConfig+0x1cc>)
 80020f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_RCC_ClockConfig+0x1d0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff f996 	bl	8001430 <HAL_InitTick>

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40022000 	.word	0x40022000
 8002114:	40021000 	.word	0x40021000
 8002118:	08002a74 	.word	0x08002a74
 800211c:	20000018 	.word	0x20000018
 8002120:	2000001c 	.word	0x2000001c

08002124 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b04      	cmp	r3, #4
 800214c:	d002      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0x30>
 800214e:	2b08      	cmp	r3, #8
 8002150:	d003      	beq.n	800215a <HAL_RCC_GetSysClockFreq+0x36>
 8002152:	e027      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002156:	613b      	str	r3, [r7, #16]
      break;
 8002158:	e027      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	0c9b      	lsrs	r3, r3, #18
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002164:	5cd3      	ldrb	r3, [r2, r3]
 8002166:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d010      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	0c5b      	lsrs	r3, r3, #17
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	4a11      	ldr	r2, [pc, #68]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a0d      	ldr	r2, [pc, #52]	; (80021bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002186:	fb03 f202 	mul.w	r2, r3, r2
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	e004      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a0c      	ldr	r2, [pc, #48]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002198:	fb02 f303 	mul.w	r3, r2, r3
 800219c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	613b      	str	r3, [r7, #16]
      break;
 80021a2:	e002      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_RCC_GetSysClockFreq+0x98>)
 80021a6:	613b      	str	r3, [r7, #16]
      break;
 80021a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021aa:	693b      	ldr	r3, [r7, #16]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
 80021bc:	007a1200 	.word	0x007a1200
 80021c0:	08002a84 	.word	0x08002a84
 80021c4:	08002a94 	.word	0x08002a94
 80021c8:	003d0900 	.word	0x003d0900

080021cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021d4:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <RCC_Delay+0x34>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <RCC_Delay+0x38>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	0a5b      	lsrs	r3, r3, #9
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021e8:	bf00      	nop
  }
  while (Delay --);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1e5a      	subs	r2, r3, #1
 80021ee:	60fa      	str	r2, [r7, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f9      	bne.n	80021e8 <RCC_Delay+0x1c>
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	20000018 	.word	0x20000018
 8002204:	10624dd3 	.word	0x10624dd3

08002208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e041      	b.n	800229e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff f866 	bl	8001300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3304      	adds	r3, #4
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f000 fa74 	bl	8002734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d001      	beq.n	80022c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e03a      	b.n	8002336 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a18      	ldr	r2, [pc, #96]	; (8002340 <HAL_TIM_Base_Start_IT+0x98>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00e      	beq.n	8002300 <HAL_TIM_Base_Start_IT+0x58>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ea:	d009      	beq.n	8002300 <HAL_TIM_Base_Start_IT+0x58>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a14      	ldr	r2, [pc, #80]	; (8002344 <HAL_TIM_Base_Start_IT+0x9c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d004      	beq.n	8002300 <HAL_TIM_Base_Start_IT+0x58>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a13      	ldr	r2, [pc, #76]	; (8002348 <HAL_TIM_Base_Start_IT+0xa0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d111      	bne.n	8002324 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b06      	cmp	r3, #6
 8002310:	d010      	beq.n	8002334 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0201 	orr.w	r2, r2, #1
 8002320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002322:	e007      	b.n	8002334 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	40012c00 	.word	0x40012c00
 8002344:	40000400 	.word	0x40000400
 8002348:	40000800 	.word	0x40000800

0800234c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b02      	cmp	r3, #2
 8002360:	d122      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b02      	cmp	r3, #2
 800236e:	d11b      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0202 	mvn.w	r2, #2
 8002378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f9b4 	bl	80026fc <HAL_TIM_IC_CaptureCallback>
 8002394:	e005      	b.n	80023a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f9a7 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f9b6 	bl	800270e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d122      	bne.n	80023fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d11b      	bne.n	80023fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0204 	mvn.w	r2, #4
 80023cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2202      	movs	r2, #2
 80023d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f98a 	bl	80026fc <HAL_TIM_IC_CaptureCallback>
 80023e8:	e005      	b.n	80023f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f97d 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f98c 	bl	800270e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b08      	cmp	r3, #8
 8002408:	d122      	bne.n	8002450 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b08      	cmp	r3, #8
 8002416:	d11b      	bne.n	8002450 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0208 	mvn.w	r2, #8
 8002420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2204      	movs	r2, #4
 8002426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f960 	bl	80026fc <HAL_TIM_IC_CaptureCallback>
 800243c:	e005      	b.n	800244a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f953 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f962 	bl	800270e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b10      	cmp	r3, #16
 800245c:	d122      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b10      	cmp	r3, #16
 800246a:	d11b      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0210 	mvn.w	r2, #16
 8002474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2208      	movs	r2, #8
 800247a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f936 	bl	80026fc <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f929 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f938 	bl	800270e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d107      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0201 	mvn.w	r2, #1
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe fa92 	bl	80009f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024da:	2b80      	cmp	r3, #128	; 0x80
 80024dc:	d10e      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e8:	2b80      	cmp	r3, #128	; 0x80
 80024ea:	d107      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fa7b 	bl	80029f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b40      	cmp	r3, #64	; 0x40
 8002508:	d10e      	bne.n	8002528 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002514:	2b40      	cmp	r3, #64	; 0x40
 8002516:	d107      	bne.n	8002528 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8fc 	bl	8002720 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b20      	cmp	r3, #32
 8002534:	d10e      	bne.n	8002554 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b20      	cmp	r3, #32
 8002542:	d107      	bne.n	8002554 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0220 	mvn.w	r2, #32
 800254c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fa46 	bl	80029e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_TIM_ConfigClockSource+0x1c>
 8002574:	2302      	movs	r3, #2
 8002576:	e0b4      	b.n	80026e2 <HAL_TIM_ConfigClockSource+0x186>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800259e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b0:	d03e      	beq.n	8002630 <HAL_TIM_ConfigClockSource+0xd4>
 80025b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b6:	f200 8087 	bhi.w	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
 80025ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025be:	f000 8086 	beq.w	80026ce <HAL_TIM_ConfigClockSource+0x172>
 80025c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c6:	d87f      	bhi.n	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
 80025c8:	2b70      	cmp	r3, #112	; 0x70
 80025ca:	d01a      	beq.n	8002602 <HAL_TIM_ConfigClockSource+0xa6>
 80025cc:	2b70      	cmp	r3, #112	; 0x70
 80025ce:	d87b      	bhi.n	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
 80025d0:	2b60      	cmp	r3, #96	; 0x60
 80025d2:	d050      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x11a>
 80025d4:	2b60      	cmp	r3, #96	; 0x60
 80025d6:	d877      	bhi.n	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
 80025d8:	2b50      	cmp	r3, #80	; 0x50
 80025da:	d03c      	beq.n	8002656 <HAL_TIM_ConfigClockSource+0xfa>
 80025dc:	2b50      	cmp	r3, #80	; 0x50
 80025de:	d873      	bhi.n	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
 80025e0:	2b40      	cmp	r3, #64	; 0x40
 80025e2:	d058      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x13a>
 80025e4:	2b40      	cmp	r3, #64	; 0x40
 80025e6:	d86f      	bhi.n	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
 80025e8:	2b30      	cmp	r3, #48	; 0x30
 80025ea:	d064      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0x15a>
 80025ec:	2b30      	cmp	r3, #48	; 0x30
 80025ee:	d86b      	bhi.n	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d060      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0x15a>
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d867      	bhi.n	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d05c      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0x15a>
 80025fc:	2b10      	cmp	r3, #16
 80025fe:	d05a      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0x15a>
 8002600:	e062      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002612:	f000 f968 	bl	80028e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002624:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	609a      	str	r2, [r3, #8]
      break;
 800262e:	e04f      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002640:	f000 f951 	bl	80028e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002652:	609a      	str	r2, [r3, #8]
      break;
 8002654:	e03c      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002662:	461a      	mov	r2, r3
 8002664:	f000 f8c8 	bl	80027f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2150      	movs	r1, #80	; 0x50
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f91f 	bl	80028b2 <TIM_ITRx_SetConfig>
      break;
 8002674:	e02c      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002682:	461a      	mov	r2, r3
 8002684:	f000 f8e6 	bl	8002854 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2160      	movs	r1, #96	; 0x60
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f90f 	bl	80028b2 <TIM_ITRx_SetConfig>
      break;
 8002694:	e01c      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a2:	461a      	mov	r2, r3
 80026a4:	f000 f8a8 	bl	80027f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2140      	movs	r1, #64	; 0x40
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f8ff 	bl	80028b2 <TIM_ITRx_SetConfig>
      break;
 80026b4:	e00c      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4619      	mov	r1, r3
 80026c0:	4610      	mov	r0, r2
 80026c2:	f000 f8f6 	bl	80028b2 <TIM_ITRx_SetConfig>
      break;
 80026c6:	e003      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      break;
 80026cc:	e000      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
	...

08002734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a29      	ldr	r2, [pc, #164]	; (80027ec <TIM_Base_SetConfig+0xb8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d00b      	beq.n	8002764 <TIM_Base_SetConfig+0x30>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002752:	d007      	beq.n	8002764 <TIM_Base_SetConfig+0x30>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a26      	ldr	r2, [pc, #152]	; (80027f0 <TIM_Base_SetConfig+0xbc>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d003      	beq.n	8002764 <TIM_Base_SetConfig+0x30>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a25      	ldr	r2, [pc, #148]	; (80027f4 <TIM_Base_SetConfig+0xc0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d108      	bne.n	8002776 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <TIM_Base_SetConfig+0xb8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00b      	beq.n	8002796 <TIM_Base_SetConfig+0x62>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002784:	d007      	beq.n	8002796 <TIM_Base_SetConfig+0x62>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <TIM_Base_SetConfig+0xbc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d003      	beq.n	8002796 <TIM_Base_SetConfig+0x62>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a18      	ldr	r2, [pc, #96]	; (80027f4 <TIM_Base_SetConfig+0xc0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d108      	bne.n	80027a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a07      	ldr	r2, [pc, #28]	; (80027ec <TIM_Base_SetConfig+0xb8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d103      	bne.n	80027dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	615a      	str	r2, [r3, #20]
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	40012c00 	.word	0x40012c00
 80027f0:	40000400 	.word	0x40000400
 80027f4:	40000800 	.word	0x40000800

080027f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	f023 0201 	bic.w	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f023 030a 	bic.w	r3, r3, #10
 8002834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	621a      	str	r2, [r3, #32]
}
 800284a:	bf00      	nop
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f023 0210 	bic.w	r2, r3, #16
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800287e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	031b      	lsls	r3, r3, #12
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002890:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	621a      	str	r2, [r3, #32]
}
 80028a8:	bf00      	nop
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b085      	sub	sp, #20
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f043 0307 	orr.w	r3, r3, #7
 80028d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	609a      	str	r2, [r3, #8]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b087      	sub	sp, #28
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002900:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	021a      	lsls	r2, r3, #8
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	431a      	orrs	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	4313      	orrs	r3, r2
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	609a      	str	r2, [r3, #8]
}
 800291a:	bf00      	nop
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002938:	2302      	movs	r3, #2
 800293a:	e046      	b.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00e      	beq.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002988:	d009      	beq.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d004      	beq.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a10      	ldr	r2, [pc, #64]	; (80029dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d10c      	bne.n	80029b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40000800 	.word	0x40000800

080029e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <memset>:
 8002a04:	4603      	mov	r3, r0
 8002a06:	4402      	add	r2, r0
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d100      	bne.n	8002a0e <memset+0xa>
 8002a0c:	4770      	bx	lr
 8002a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a12:	e7f9      	b.n	8002a08 <memset+0x4>

08002a14 <__libc_init_array>:
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	2600      	movs	r6, #0
 8002a18:	4d0c      	ldr	r5, [pc, #48]	; (8002a4c <__libc_init_array+0x38>)
 8002a1a:	4c0d      	ldr	r4, [pc, #52]	; (8002a50 <__libc_init_array+0x3c>)
 8002a1c:	1b64      	subs	r4, r4, r5
 8002a1e:	10a4      	asrs	r4, r4, #2
 8002a20:	42a6      	cmp	r6, r4
 8002a22:	d109      	bne.n	8002a38 <__libc_init_array+0x24>
 8002a24:	f000 f81a 	bl	8002a5c <_init>
 8002a28:	2600      	movs	r6, #0
 8002a2a:	4d0a      	ldr	r5, [pc, #40]	; (8002a54 <__libc_init_array+0x40>)
 8002a2c:	4c0a      	ldr	r4, [pc, #40]	; (8002a58 <__libc_init_array+0x44>)
 8002a2e:	1b64      	subs	r4, r4, r5
 8002a30:	10a4      	asrs	r4, r4, #2
 8002a32:	42a6      	cmp	r6, r4
 8002a34:	d105      	bne.n	8002a42 <__libc_init_array+0x2e>
 8002a36:	bd70      	pop	{r4, r5, r6, pc}
 8002a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a3c:	4798      	blx	r3
 8002a3e:	3601      	adds	r6, #1
 8002a40:	e7ee      	b.n	8002a20 <__libc_init_array+0xc>
 8002a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a46:	4798      	blx	r3
 8002a48:	3601      	adds	r6, #1
 8002a4a:	e7f2      	b.n	8002a32 <__libc_init_array+0x1e>
 8002a4c:	08002a98 	.word	0x08002a98
 8002a50:	08002a98 	.word	0x08002a98
 8002a54:	08002a98 	.word	0x08002a98
 8002a58:	08002a9c 	.word	0x08002a9c

08002a5c <_init>:
 8002a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5e:	bf00      	nop
 8002a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a62:	bc08      	pop	{r3}
 8002a64:	469e      	mov	lr, r3
 8002a66:	4770      	bx	lr

08002a68 <_fini>:
 8002a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6a:	bf00      	nop
 8002a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a6e:	bc08      	pop	{r3}
 8002a70:	469e      	mov	lr, r3
 8002a72:	4770      	bx	lr

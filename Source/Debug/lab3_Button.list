
lab3_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c9c  08002c9c  00012c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cc0  08002cc0  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08002cc0  08002cc0  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cc0  08002cc0  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cc0  08002cc0  00012cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cc4  08002cc4  00012cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08002cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000028  08002cf0  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002cf0  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000868d  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c8b  00000000  00000000  00028721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  0002a3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d4  00000000  00000000  0002adf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016f70  00000000  00000000  0002b5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc45  00000000  00000000  00042534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008473e  00000000  00000000  0004f179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028a4  00000000  00000000  000d38b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000d615c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c84 	.word	0x08002c84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08002c84 	.word	0x08002c84

0800014c <update7SegBuffer>:
#include "7segs.h"

#define NUM_7SEG 4
int led_buffer[NUM_7SEG] = { 9, 8, 7, 6 };

void update7SegBuffer(int val1, int val2) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	if (val1 < 0 || val1 > 99 || val2 < 0 || val2 > 99)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2b00      	cmp	r3, #0
 800015a:	db37      	blt.n	80001cc <update7SegBuffer+0x80>
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2b63      	cmp	r3, #99	; 0x63
 8000160:	dc34      	bgt.n	80001cc <update7SegBuffer+0x80>
 8000162:	683b      	ldr	r3, [r7, #0]
 8000164:	2b00      	cmp	r3, #0
 8000166:	db31      	blt.n	80001cc <update7SegBuffer+0x80>
 8000168:	683b      	ldr	r3, [r7, #0]
 800016a:	2b63      	cmp	r3, #99	; 0x63
 800016c:	dc2e      	bgt.n	80001cc <update7SegBuffer+0x80>
		return;
	led_buffer[0] = val1 / 10;
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	4a19      	ldr	r2, [pc, #100]	; (80001d8 <update7SegBuffer+0x8c>)
 8000172:	fb82 1203 	smull	r1, r2, r2, r3
 8000176:	1092      	asrs	r2, r2, #2
 8000178:	17db      	asrs	r3, r3, #31
 800017a:	1ad3      	subs	r3, r2, r3
 800017c:	4a17      	ldr	r2, [pc, #92]	; (80001dc <update7SegBuffer+0x90>)
 800017e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = val1 % 10;
 8000180:	6879      	ldr	r1, [r7, #4]
 8000182:	4b15      	ldr	r3, [pc, #84]	; (80001d8 <update7SegBuffer+0x8c>)
 8000184:	fb83 2301 	smull	r2, r3, r3, r1
 8000188:	109a      	asrs	r2, r3, #2
 800018a:	17cb      	asrs	r3, r1, #31
 800018c:	1ad2      	subs	r2, r2, r3
 800018e:	4613      	mov	r3, r2
 8000190:	009b      	lsls	r3, r3, #2
 8000192:	4413      	add	r3, r2
 8000194:	005b      	lsls	r3, r3, #1
 8000196:	1aca      	subs	r2, r1, r3
 8000198:	4b10      	ldr	r3, [pc, #64]	; (80001dc <update7SegBuffer+0x90>)
 800019a:	605a      	str	r2, [r3, #4]
	led_buffer[2] = val2 / 10;
 800019c:	683b      	ldr	r3, [r7, #0]
 800019e:	4a0e      	ldr	r2, [pc, #56]	; (80001d8 <update7SegBuffer+0x8c>)
 80001a0:	fb82 1203 	smull	r1, r2, r2, r3
 80001a4:	1092      	asrs	r2, r2, #2
 80001a6:	17db      	asrs	r3, r3, #31
 80001a8:	1ad3      	subs	r3, r2, r3
 80001aa:	4a0c      	ldr	r2, [pc, #48]	; (80001dc <update7SegBuffer+0x90>)
 80001ac:	6093      	str	r3, [r2, #8]
	led_buffer[3] = val2 % 10;
 80001ae:	6839      	ldr	r1, [r7, #0]
 80001b0:	4b09      	ldr	r3, [pc, #36]	; (80001d8 <update7SegBuffer+0x8c>)
 80001b2:	fb83 2301 	smull	r2, r3, r3, r1
 80001b6:	109a      	asrs	r2, r3, #2
 80001b8:	17cb      	asrs	r3, r1, #31
 80001ba:	1ad2      	subs	r2, r2, r3
 80001bc:	4613      	mov	r3, r2
 80001be:	009b      	lsls	r3, r3, #2
 80001c0:	4413      	add	r3, r2
 80001c2:	005b      	lsls	r3, r3, #1
 80001c4:	1aca      	subs	r2, r1, r3
 80001c6:	4b05      	ldr	r3, [pc, #20]	; (80001dc <update7SegBuffer+0x90>)
 80001c8:	60da      	str	r2, [r3, #12]
 80001ca:	e000      	b.n	80001ce <update7SegBuffer+0x82>
		return;
 80001cc:	bf00      	nop
}
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	66666667 	.word	0x66666667
 80001dc:	20000000 	.word	0x20000000

080001e0 <OffAll_7Seg>:
//function to turn off all 7 segments led
void OffAll_7Seg(void) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG1, 1);
 80001e4:	2201      	movs	r2, #1
 80001e6:	2180      	movs	r1, #128	; 0x80
 80001e8:	480b      	ldr	r0, [pc, #44]	; (8000218 <OffAll_7Seg+0x38>)
 80001ea:	f001 fd2a 	bl	8001c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG2, 1);
 80001ee:	2201      	movs	r2, #1
 80001f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001f4:	4808      	ldr	r0, [pc, #32]	; (8000218 <OffAll_7Seg+0x38>)
 80001f6:	f001 fd24 	bl	8001c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG3, 1);
 80001fa:	2201      	movs	r2, #1
 80001fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000200:	4805      	ldr	r0, [pc, #20]	; (8000218 <OffAll_7Seg+0x38>)
 8000202:	f001 fd1e 	bl	8001c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG4, 1);
 8000206:	2201      	movs	r2, #1
 8000208:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800020c:	4802      	ldr	r0, [pc, #8]	; (8000218 <OffAll_7Seg+0x38>)
 800020e:	f001 fd18 	bl	8001c42 <HAL_GPIO_WritePin>
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40010c00 	.word	0x40010c00

0800021c <display7SEG>:

/*Function to display num on 7 segments led
 *Because pullup so 0 is on, 1 is off
 */
void display7SEG(uint8_t num) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
	if (num == 1) {
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	2b01      	cmp	r3, #1
 800022a:	d126      	bne.n	800027a <display7SEG+0x5e>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 0);
 800022c:	2200      	movs	r2, #0
 800022e:	2101      	movs	r1, #1
 8000230:	48ba      	ldr	r0, [pc, #744]	; (800051c <display7SEG+0x300>)
 8000232:	f001 fd06 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 1);
 8000236:	2201      	movs	r2, #1
 8000238:	2102      	movs	r1, #2
 800023a:	48b8      	ldr	r0, [pc, #736]	; (800051c <display7SEG+0x300>)
 800023c:	f001 fd01 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 1);
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000246:	48b5      	ldr	r0, [pc, #724]	; (800051c <display7SEG+0x300>)
 8000248:	f001 fcfb 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 0);
 800024c:	2200      	movs	r2, #0
 800024e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000252:	48b2      	ldr	r0, [pc, #712]	; (800051c <display7SEG+0x300>)
 8000254:	f001 fcf5 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 0);
 8000258:	2200      	movs	r2, #0
 800025a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800025e:	48af      	ldr	r0, [pc, #700]	; (800051c <display7SEG+0x300>)
 8000260:	f001 fcef 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 0);
 8000264:	2200      	movs	r2, #0
 8000266:	2120      	movs	r1, #32
 8000268:	48ac      	ldr	r0, [pc, #688]	; (800051c <display7SEG+0x300>)
 800026a:	f001 fcea 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 0);
 800026e:	2200      	movs	r2, #0
 8000270:	2140      	movs	r1, #64	; 0x40
 8000272:	48aa      	ldr	r0, [pc, #680]	; (800051c <display7SEG+0x300>)
 8000274:	f001 fce5 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 1);
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 1);
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 1);
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 0);
	}
}
 8000278:	e17b      	b.n	8000572 <display7SEG+0x356>
	} else if (num == 2) {
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	2b02      	cmp	r3, #2
 800027e:	d126      	bne.n	80002ce <display7SEG+0xb2>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 1);
 8000280:	2201      	movs	r2, #1
 8000282:	2101      	movs	r1, #1
 8000284:	48a5      	ldr	r0, [pc, #660]	; (800051c <display7SEG+0x300>)
 8000286:	f001 fcdc 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 1);
 800028a:	2201      	movs	r2, #1
 800028c:	2102      	movs	r1, #2
 800028e:	48a3      	ldr	r0, [pc, #652]	; (800051c <display7SEG+0x300>)
 8000290:	f001 fcd7 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 0);
 8000294:	2200      	movs	r2, #0
 8000296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800029a:	48a0      	ldr	r0, [pc, #640]	; (800051c <display7SEG+0x300>)
 800029c:	f001 fcd1 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 1);
 80002a0:	2201      	movs	r2, #1
 80002a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a6:	489d      	ldr	r0, [pc, #628]	; (800051c <display7SEG+0x300>)
 80002a8:	f001 fccb 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 1);
 80002ac:	2201      	movs	r2, #1
 80002ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002b2:	489a      	ldr	r0, [pc, #616]	; (800051c <display7SEG+0x300>)
 80002b4:	f001 fcc5 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 0);
 80002b8:	2200      	movs	r2, #0
 80002ba:	2120      	movs	r1, #32
 80002bc:	4897      	ldr	r0, [pc, #604]	; (800051c <display7SEG+0x300>)
 80002be:	f001 fcc0 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 1);
 80002c2:	2201      	movs	r2, #1
 80002c4:	2140      	movs	r1, #64	; 0x40
 80002c6:	4895      	ldr	r0, [pc, #596]	; (800051c <display7SEG+0x300>)
 80002c8:	f001 fcbb 	bl	8001c42 <HAL_GPIO_WritePin>
}
 80002cc:	e151      	b.n	8000572 <display7SEG+0x356>
	} else if (num == 3) {
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	d126      	bne.n	8000322 <display7SEG+0x106>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 1);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2101      	movs	r1, #1
 80002d8:	4890      	ldr	r0, [pc, #576]	; (800051c <display7SEG+0x300>)
 80002da:	f001 fcb2 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 1);
 80002de:	2201      	movs	r2, #1
 80002e0:	2102      	movs	r1, #2
 80002e2:	488e      	ldr	r0, [pc, #568]	; (800051c <display7SEG+0x300>)
 80002e4:	f001 fcad 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 1);
 80002e8:	2201      	movs	r2, #1
 80002ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ee:	488b      	ldr	r0, [pc, #556]	; (800051c <display7SEG+0x300>)
 80002f0:	f001 fca7 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 1);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fa:	4888      	ldr	r0, [pc, #544]	; (800051c <display7SEG+0x300>)
 80002fc:	f001 fca1 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 0);
 8000300:	2200      	movs	r2, #0
 8000302:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000306:	4885      	ldr	r0, [pc, #532]	; (800051c <display7SEG+0x300>)
 8000308:	f001 fc9b 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 0);
 800030c:	2200      	movs	r2, #0
 800030e:	2120      	movs	r1, #32
 8000310:	4882      	ldr	r0, [pc, #520]	; (800051c <display7SEG+0x300>)
 8000312:	f001 fc96 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 1);
 8000316:	2201      	movs	r2, #1
 8000318:	2140      	movs	r1, #64	; 0x40
 800031a:	4880      	ldr	r0, [pc, #512]	; (800051c <display7SEG+0x300>)
 800031c:	f001 fc91 	bl	8001c42 <HAL_GPIO_WritePin>
}
 8000320:	e127      	b.n	8000572 <display7SEG+0x356>
	} else if (num == 4) {
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b04      	cmp	r3, #4
 8000326:	d126      	bne.n	8000376 <display7SEG+0x15a>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 0);
 8000328:	2200      	movs	r2, #0
 800032a:	2101      	movs	r1, #1
 800032c:	487b      	ldr	r0, [pc, #492]	; (800051c <display7SEG+0x300>)
 800032e:	f001 fc88 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 1);
 8000332:	2201      	movs	r2, #1
 8000334:	2102      	movs	r1, #2
 8000336:	4879      	ldr	r0, [pc, #484]	; (800051c <display7SEG+0x300>)
 8000338:	f001 fc83 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 1);
 800033c:	2201      	movs	r2, #1
 800033e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000342:	4876      	ldr	r0, [pc, #472]	; (800051c <display7SEG+0x300>)
 8000344:	f001 fc7d 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 0);
 8000348:	2200      	movs	r2, #0
 800034a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034e:	4873      	ldr	r0, [pc, #460]	; (800051c <display7SEG+0x300>)
 8000350:	f001 fc77 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 0);
 8000354:	2200      	movs	r2, #0
 8000356:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800035a:	4870      	ldr	r0, [pc, #448]	; (800051c <display7SEG+0x300>)
 800035c:	f001 fc71 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 1);
 8000360:	2201      	movs	r2, #1
 8000362:	2120      	movs	r1, #32
 8000364:	486d      	ldr	r0, [pc, #436]	; (800051c <display7SEG+0x300>)
 8000366:	f001 fc6c 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 1);
 800036a:	2201      	movs	r2, #1
 800036c:	2140      	movs	r1, #64	; 0x40
 800036e:	486b      	ldr	r0, [pc, #428]	; (800051c <display7SEG+0x300>)
 8000370:	f001 fc67 	bl	8001c42 <HAL_GPIO_WritePin>
}
 8000374:	e0fd      	b.n	8000572 <display7SEG+0x356>
	} else if (num == 5) {
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2b05      	cmp	r3, #5
 800037a:	d126      	bne.n	80003ca <display7SEG+0x1ae>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 1);
 800037c:	2201      	movs	r2, #1
 800037e:	2101      	movs	r1, #1
 8000380:	4866      	ldr	r0, [pc, #408]	; (800051c <display7SEG+0x300>)
 8000382:	f001 fc5e 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 0);
 8000386:	2200      	movs	r2, #0
 8000388:	2102      	movs	r1, #2
 800038a:	4864      	ldr	r0, [pc, #400]	; (800051c <display7SEG+0x300>)
 800038c:	f001 fc59 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 1);
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000396:	4861      	ldr	r0, [pc, #388]	; (800051c <display7SEG+0x300>)
 8000398:	f001 fc53 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 1);
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a2:	485e      	ldr	r0, [pc, #376]	; (800051c <display7SEG+0x300>)
 80003a4:	f001 fc4d 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ae:	485b      	ldr	r0, [pc, #364]	; (800051c <display7SEG+0x300>)
 80003b0:	f001 fc47 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 1);
 80003b4:	2201      	movs	r2, #1
 80003b6:	2120      	movs	r1, #32
 80003b8:	4858      	ldr	r0, [pc, #352]	; (800051c <display7SEG+0x300>)
 80003ba:	f001 fc42 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 1);
 80003be:	2201      	movs	r2, #1
 80003c0:	2140      	movs	r1, #64	; 0x40
 80003c2:	4856      	ldr	r0, [pc, #344]	; (800051c <display7SEG+0x300>)
 80003c4:	f001 fc3d 	bl	8001c42 <HAL_GPIO_WritePin>
}
 80003c8:	e0d3      	b.n	8000572 <display7SEG+0x356>
	} else if (num == 6) {
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	2b06      	cmp	r3, #6
 80003ce:	d126      	bne.n	800041e <display7SEG+0x202>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 1);
 80003d0:	2201      	movs	r2, #1
 80003d2:	2101      	movs	r1, #1
 80003d4:	4851      	ldr	r0, [pc, #324]	; (800051c <display7SEG+0x300>)
 80003d6:	f001 fc34 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 0);
 80003da:	2200      	movs	r2, #0
 80003dc:	2102      	movs	r1, #2
 80003de:	484f      	ldr	r0, [pc, #316]	; (800051c <display7SEG+0x300>)
 80003e0:	f001 fc2f 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 1);
 80003e4:	2201      	movs	r2, #1
 80003e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ea:	484c      	ldr	r0, [pc, #304]	; (800051c <display7SEG+0x300>)
 80003ec:	f001 fc29 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 1);
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f6:	4849      	ldr	r0, [pc, #292]	; (800051c <display7SEG+0x300>)
 80003f8:	f001 fc23 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 1);
 80003fc:	2201      	movs	r2, #1
 80003fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000402:	4846      	ldr	r0, [pc, #280]	; (800051c <display7SEG+0x300>)
 8000404:	f001 fc1d 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 1);
 8000408:	2201      	movs	r2, #1
 800040a:	2120      	movs	r1, #32
 800040c:	4843      	ldr	r0, [pc, #268]	; (800051c <display7SEG+0x300>)
 800040e:	f001 fc18 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 1);
 8000412:	2201      	movs	r2, #1
 8000414:	2140      	movs	r1, #64	; 0x40
 8000416:	4841      	ldr	r0, [pc, #260]	; (800051c <display7SEG+0x300>)
 8000418:	f001 fc13 	bl	8001c42 <HAL_GPIO_WritePin>
}
 800041c:	e0a9      	b.n	8000572 <display7SEG+0x356>
	} else if (num == 7) {
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	2b07      	cmp	r3, #7
 8000422:	d126      	bne.n	8000472 <display7SEG+0x256>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 1);
 8000424:	2201      	movs	r2, #1
 8000426:	2101      	movs	r1, #1
 8000428:	483c      	ldr	r0, [pc, #240]	; (800051c <display7SEG+0x300>)
 800042a:	f001 fc0a 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 1);
 800042e:	2201      	movs	r2, #1
 8000430:	2102      	movs	r1, #2
 8000432:	483a      	ldr	r0, [pc, #232]	; (800051c <display7SEG+0x300>)
 8000434:	f001 fc05 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 1);
 8000438:	2201      	movs	r2, #1
 800043a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800043e:	4837      	ldr	r0, [pc, #220]	; (800051c <display7SEG+0x300>)
 8000440:	f001 fbff 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800044a:	4834      	ldr	r0, [pc, #208]	; (800051c <display7SEG+0x300>)
 800044c:	f001 fbf9 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000456:	4831      	ldr	r0, [pc, #196]	; (800051c <display7SEG+0x300>)
 8000458:	f001 fbf3 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 0);
 800045c:	2200      	movs	r2, #0
 800045e:	2120      	movs	r1, #32
 8000460:	482e      	ldr	r0, [pc, #184]	; (800051c <display7SEG+0x300>)
 8000462:	f001 fbee 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	2140      	movs	r1, #64	; 0x40
 800046a:	482c      	ldr	r0, [pc, #176]	; (800051c <display7SEG+0x300>)
 800046c:	f001 fbe9 	bl	8001c42 <HAL_GPIO_WritePin>
}
 8000470:	e07f      	b.n	8000572 <display7SEG+0x356>
	} else if (num == 8) {
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	2b08      	cmp	r3, #8
 8000476:	d126      	bne.n	80004c6 <display7SEG+0x2aa>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 1);
 8000478:	2201      	movs	r2, #1
 800047a:	2101      	movs	r1, #1
 800047c:	4827      	ldr	r0, [pc, #156]	; (800051c <display7SEG+0x300>)
 800047e:	f001 fbe0 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 1);
 8000482:	2201      	movs	r2, #1
 8000484:	2102      	movs	r1, #2
 8000486:	4825      	ldr	r0, [pc, #148]	; (800051c <display7SEG+0x300>)
 8000488:	f001 fbdb 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 1);
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000492:	4822      	ldr	r0, [pc, #136]	; (800051c <display7SEG+0x300>)
 8000494:	f001 fbd5 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 1);
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049e:	481f      	ldr	r0, [pc, #124]	; (800051c <display7SEG+0x300>)
 80004a0:	f001 fbcf 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 1);
 80004a4:	2201      	movs	r2, #1
 80004a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004aa:	481c      	ldr	r0, [pc, #112]	; (800051c <display7SEG+0x300>)
 80004ac:	f001 fbc9 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 1);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2120      	movs	r1, #32
 80004b4:	4819      	ldr	r0, [pc, #100]	; (800051c <display7SEG+0x300>)
 80004b6:	f001 fbc4 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 1);
 80004ba:	2201      	movs	r2, #1
 80004bc:	2140      	movs	r1, #64	; 0x40
 80004be:	4817      	ldr	r0, [pc, #92]	; (800051c <display7SEG+0x300>)
 80004c0:	f001 fbbf 	bl	8001c42 <HAL_GPIO_WritePin>
}
 80004c4:	e055      	b.n	8000572 <display7SEG+0x356>
	} else if (num == 9) {
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b09      	cmp	r3, #9
 80004ca:	d129      	bne.n	8000520 <display7SEG+0x304>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2101      	movs	r1, #1
 80004d0:	4812      	ldr	r0, [pc, #72]	; (800051c <display7SEG+0x300>)
 80004d2:	f001 fbb6 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 1);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2102      	movs	r1, #2
 80004da:	4810      	ldr	r0, [pc, #64]	; (800051c <display7SEG+0x300>)
 80004dc:	f001 fbb1 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 1);
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e6:	480d      	ldr	r0, [pc, #52]	; (800051c <display7SEG+0x300>)
 80004e8:	f001 fbab 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 1);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f2:	480a      	ldr	r0, [pc, #40]	; (800051c <display7SEG+0x300>)
 80004f4:	f001 fba5 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 0);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004fe:	4807      	ldr	r0, [pc, #28]	; (800051c <display7SEG+0x300>)
 8000500:	f001 fb9f 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 1);
 8000504:	2201      	movs	r2, #1
 8000506:	2120      	movs	r1, #32
 8000508:	4804      	ldr	r0, [pc, #16]	; (800051c <display7SEG+0x300>)
 800050a:	f001 fb9a 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 1);
 800050e:	2201      	movs	r2, #1
 8000510:	2140      	movs	r1, #64	; 0x40
 8000512:	4802      	ldr	r0, [pc, #8]	; (800051c <display7SEG+0x300>)
 8000514:	f001 fb95 	bl	8001c42 <HAL_GPIO_WritePin>
}
 8000518:	e02b      	b.n	8000572 <display7SEG+0x356>
 800051a:	bf00      	nop
 800051c:	40010c00 	.word	0x40010c00
	} else if (num == 0) {
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d125      	bne.n	8000572 <display7SEG+0x356>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_A, 1);
 8000526:	2201      	movs	r2, #1
 8000528:	2101      	movs	r1, #1
 800052a:	4814      	ldr	r0, [pc, #80]	; (800057c <display7SEG+0x360>)
 800052c:	f001 fb89 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_B, 1);
 8000530:	2201      	movs	r2, #1
 8000532:	2102      	movs	r1, #2
 8000534:	4811      	ldr	r0, [pc, #68]	; (800057c <display7SEG+0x360>)
 8000536:	f001 fb84 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_C, 1);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000540:	480e      	ldr	r0, [pc, #56]	; (800057c <display7SEG+0x360>)
 8000542:	f001 fb7e 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_D, 1);
 8000546:	2201      	movs	r2, #1
 8000548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054c:	480b      	ldr	r0, [pc, #44]	; (800057c <display7SEG+0x360>)
 800054e:	f001 fb78 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_E, 1);
 8000552:	2201      	movs	r2, #1
 8000554:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000558:	4808      	ldr	r0, [pc, #32]	; (800057c <display7SEG+0x360>)
 800055a:	f001 fb72 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_F, 1);
 800055e:	2201      	movs	r2, #1
 8000560:	2120      	movs	r1, #32
 8000562:	4806      	ldr	r0, [pc, #24]	; (800057c <display7SEG+0x360>)
 8000564:	f001 fb6d 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG_G, 0);
 8000568:	2200      	movs	r2, #0
 800056a:	2140      	movs	r1, #64	; 0x40
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <display7SEG+0x360>)
 800056e:	f001 fb68 	bl	8001c42 <HAL_GPIO_WritePin>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40010c00 	.word	0x40010c00

08000580 <update7SEG>:

//Function to scan 7 seg led
void update7SEG(uint8_t index) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	switch (index) {
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b03      	cmp	r3, #3
 800058e:	f200 8083 	bhi.w	8000698 <update7SEG+0x118>
 8000592:	a201      	add	r2, pc, #4	; (adr r2, 8000598 <update7SEG+0x18>)
 8000594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000598:	080005a9 	.word	0x080005a9
 800059c:	080005e5 	.word	0x080005e5
 80005a0:	08000621 	.word	0x08000621
 80005a4:	0800065d 	.word	0x0800065d
	case 0:
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG1, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2180      	movs	r1, #128	; 0x80
 80005ac:	4848      	ldr	r0, [pc, #288]	; (80006d0 <update7SEG+0x150>)
 80005ae:	f001 fb48 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG2, 1);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b8:	4845      	ldr	r0, [pc, #276]	; (80006d0 <update7SEG+0x150>)
 80005ba:	f001 fb42 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG3, 1);
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c4:	4842      	ldr	r0, [pc, #264]	; (80006d0 <update7SEG+0x150>)
 80005c6:	f001 fb3c 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG4, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	483f      	ldr	r0, [pc, #252]	; (80006d0 <update7SEG+0x150>)
 80005d2:	f001 fb36 	bl	8001c42 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 80005d6:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <update7SEG+0x154>)
 80005d8:	68db      	ldr	r3, [r3, #12]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff fe1d 	bl	800021c <display7SEG>
		break;
 80005e2:	e071      	b.n	80006c8 <update7SEG+0x148>
	case 1:
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG1, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	4839      	ldr	r0, [pc, #228]	; (80006d0 <update7SEG+0x150>)
 80005ea:	f001 fb2a 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG2, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f4:	4836      	ldr	r0, [pc, #216]	; (80006d0 <update7SEG+0x150>)
 80005f6:	f001 fb24 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG3, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000600:	4833      	ldr	r0, [pc, #204]	; (80006d0 <update7SEG+0x150>)
 8000602:	f001 fb1e 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG4, 1);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060c:	4830      	ldr	r0, [pc, #192]	; (80006d0 <update7SEG+0x150>)
 800060e:	f001 fb18 	bl	8001c42 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 8000612:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <update7SEG+0x154>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fdff 	bl	800021c <display7SEG>
		break;
 800061e:	e053      	b.n	80006c8 <update7SEG+0x148>
	case 2:
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG1, 1);
 8000620:	2201      	movs	r2, #1
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	482a      	ldr	r0, [pc, #168]	; (80006d0 <update7SEG+0x150>)
 8000626:	f001 fb0c 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG2, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000630:	4827      	ldr	r0, [pc, #156]	; (80006d0 <update7SEG+0x150>)
 8000632:	f001 fb06 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG3, 1);
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063c:	4824      	ldr	r0, [pc, #144]	; (80006d0 <update7SEG+0x150>)
 800063e:	f001 fb00 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG4, 1);
 8000642:	2201      	movs	r2, #1
 8000644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000648:	4821      	ldr	r0, [pc, #132]	; (80006d0 <update7SEG+0x150>)
 800064a:	f001 fafa 	bl	8001c42 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 800064e:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <update7SEG+0x154>)
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fde1 	bl	800021c <display7SEG>
		break;
 800065a:	e035      	b.n	80006c8 <update7SEG+0x148>
	case 3:
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG1, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2180      	movs	r1, #128	; 0x80
 8000660:	481b      	ldr	r0, [pc, #108]	; (80006d0 <update7SEG+0x150>)
 8000662:	f001 faee 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG2, 1);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	4818      	ldr	r0, [pc, #96]	; (80006d0 <update7SEG+0x150>)
 800066e:	f001 fae8 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG3, 1);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000678:	4815      	ldr	r0, [pc, #84]	; (80006d0 <update7SEG+0x150>)
 800067a:	f001 fae2 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG4, 1);
 800067e:	2201      	movs	r2, #1
 8000680:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000684:	4812      	ldr	r0, [pc, #72]	; (80006d0 <update7SEG+0x150>)
 8000686:	f001 fadc 	bl	8001c42 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <update7SEG+0x154>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff fdc3 	bl	800021c <display7SEG>
		break;
 8000696:	e017      	b.n	80006c8 <update7SEG+0x148>
	default:
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG1, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2180      	movs	r1, #128	; 0x80
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <update7SEG+0x150>)
 800069e:	f001 fad0 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG2, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a8:	4809      	ldr	r0, [pc, #36]	; (80006d0 <update7SEG+0x150>)
 80006aa:	f001 faca 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG3, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b4:	4806      	ldr	r0, [pc, #24]	; (80006d0 <update7SEG+0x150>)
 80006b6:	f001 fac4 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SELECT_SEG4, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <update7SEG+0x150>)
 80006c2:	f001 fabe 	bl	8001c42 <HAL_GPIO_WritePin>
		break;
 80006c6:	bf00      	nop
	}
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40010c00 	.word	0x40010c00
 80006d4:	20000000 	.word	0x20000000

080006d8 <traffic_light>:
 */
#include "TrafficLight.h"

enum st traffic_light_state = REDWE_GREENNS;

void traffic_light(){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	switch (traffic_light_state) {
 80006dc:	4b39      	ldr	r3, [pc, #228]	; (80007c4 <traffic_light+0xec>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b04      	cmp	r3, #4
 80006e2:	d86b      	bhi.n	80007bc <traffic_light+0xe4>
 80006e4:	a201      	add	r2, pc, #4	; (adr r2, 80006ec <traffic_light+0x14>)
 80006e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ea:	bf00      	nop
 80006ec:	08000701 	.word	0x08000701
 80006f0:	0800072b 	.word	0x0800072b
 80006f4:	08000741 	.word	0x08000741
 80006f8:	0800076b 	.word	0x0800076b
 80006fc:	08000781 	.word	0x08000781
		case REDWE_GREENNS:
			HAL_GPIO_WritePin(TL_PORT, WE_AMBER, 1);
 8000700:	2201      	movs	r2, #1
 8000702:	2104      	movs	r1, #4
 8000704:	4830      	ldr	r0, [pc, #192]	; (80007c8 <traffic_light+0xf0>)
 8000706:	f001 fa9c 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, WE_RED, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2102      	movs	r1, #2
 800070e:	482e      	ldr	r0, [pc, #184]	; (80007c8 <traffic_light+0xf0>)
 8000710:	f001 fa97 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_RED, 1);
 8000714:	2201      	movs	r2, #1
 8000716:	2110      	movs	r1, #16
 8000718:	482b      	ldr	r0, [pc, #172]	; (80007c8 <traffic_light+0xf0>)
 800071a:	f001 fa92 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_GREEN, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2140      	movs	r1, #64	; 0x40
 8000722:	4829      	ldr	r0, [pc, #164]	; (80007c8 <traffic_light+0xf0>)
 8000724:	f001 fa8d 	bl	8001c42 <HAL_GPIO_WritePin>
			break;
 8000728:	e049      	b.n	80007be <traffic_light+0xe6>
		case REDWE_AMBERNS:
			HAL_GPIO_WritePin(TL_PORT, NS_GREEN, 1);
 800072a:	2201      	movs	r2, #1
 800072c:	2140      	movs	r1, #64	; 0x40
 800072e:	4826      	ldr	r0, [pc, #152]	; (80007c8 <traffic_light+0xf0>)
 8000730:	f001 fa87 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_AMBER, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2120      	movs	r1, #32
 8000738:	4823      	ldr	r0, [pc, #140]	; (80007c8 <traffic_light+0xf0>)
 800073a:	f001 fa82 	bl	8001c42 <HAL_GPIO_WritePin>
			break;
 800073e:	e03e      	b.n	80007be <traffic_light+0xe6>
		case GREENWE_REDNS:
			HAL_GPIO_WritePin(TL_PORT, WE_RED, 1);
 8000740:	2201      	movs	r2, #1
 8000742:	2102      	movs	r1, #2
 8000744:	4820      	ldr	r0, [pc, #128]	; (80007c8 <traffic_light+0xf0>)
 8000746:	f001 fa7c 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, WE_GREEN, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2108      	movs	r1, #8
 800074e:	481e      	ldr	r0, [pc, #120]	; (80007c8 <traffic_light+0xf0>)
 8000750:	f001 fa77 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_AMBER, 1);
 8000754:	2201      	movs	r2, #1
 8000756:	2120      	movs	r1, #32
 8000758:	481b      	ldr	r0, [pc, #108]	; (80007c8 <traffic_light+0xf0>)
 800075a:	f001 fa72 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_RED, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2110      	movs	r1, #16
 8000762:	4819      	ldr	r0, [pc, #100]	; (80007c8 <traffic_light+0xf0>)
 8000764:	f001 fa6d 	bl	8001c42 <HAL_GPIO_WritePin>
			break;
 8000768:	e029      	b.n	80007be <traffic_light+0xe6>
		case AMBERWE_REDNS:
			HAL_GPIO_WritePin(TL_PORT, WE_GREEN, 1);
 800076a:	2201      	movs	r2, #1
 800076c:	2108      	movs	r1, #8
 800076e:	4816      	ldr	r0, [pc, #88]	; (80007c8 <traffic_light+0xf0>)
 8000770:	f001 fa67 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, WE_AMBER, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2104      	movs	r1, #4
 8000778:	4813      	ldr	r0, [pc, #76]	; (80007c8 <traffic_light+0xf0>)
 800077a:	f001 fa62 	bl	8001c42 <HAL_GPIO_WritePin>
			break;
 800077e:	e01e      	b.n	80007be <traffic_light+0xe6>
		case INVALID:
			HAL_GPIO_WritePin(TL_PORT, WE_RED, 1);
 8000780:	2201      	movs	r2, #1
 8000782:	2102      	movs	r1, #2
 8000784:	4810      	ldr	r0, [pc, #64]	; (80007c8 <traffic_light+0xf0>)
 8000786:	f001 fa5c 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, WE_AMBER, 1);
 800078a:	2201      	movs	r2, #1
 800078c:	2104      	movs	r1, #4
 800078e:	480e      	ldr	r0, [pc, #56]	; (80007c8 <traffic_light+0xf0>)
 8000790:	f001 fa57 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, WE_GREEN, 1);
 8000794:	2201      	movs	r2, #1
 8000796:	2108      	movs	r1, #8
 8000798:	480b      	ldr	r0, [pc, #44]	; (80007c8 <traffic_light+0xf0>)
 800079a:	f001 fa52 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_RED, 1);
 800079e:	2201      	movs	r2, #1
 80007a0:	2110      	movs	r1, #16
 80007a2:	4809      	ldr	r0, [pc, #36]	; (80007c8 <traffic_light+0xf0>)
 80007a4:	f001 fa4d 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_AMBER, 1);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2120      	movs	r1, #32
 80007ac:	4806      	ldr	r0, [pc, #24]	; (80007c8 <traffic_light+0xf0>)
 80007ae:	f001 fa48 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_GREEN, 1);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2140      	movs	r1, #64	; 0x40
 80007b6:	4804      	ldr	r0, [pc, #16]	; (80007c8 <traffic_light+0xf0>)
 80007b8:	f001 fa43 	bl	8001c42 <HAL_GPIO_WritePin>
		default:
			break;
 80007bc:	bf00      	nop
	}
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000044 	.word	0x20000044
 80007c8:	40010800 	.word	0x40010800

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d0:	f000 ff2c 	bl	800162c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d4:	f000 f820 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d8:	f000 f8a6 	bl	8000928 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007dc:	f000 f858 	bl	8000890 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <main+0x48>)
 80007e2:	f001 fe75 	bl	80024d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	initButton();
 80007e6:	f000 fce1 	bl	80011ac <initButton>
	initTimer();
 80007ea:	f000 fe61 	bl	80014b0 <initTimer>
	while (1) {
		if (!timerOn(3)) {
 80007ee:	2003      	movs	r0, #3
 80007f0:	f000 fe42 	bl	8001478 <timerOn>
 80007f4:	4603      	mov	r3, r0
 80007f6:	f083 0301 	eor.w	r3, r3, #1
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d005      	beq.n	800080c <main+0x40>
			read_button();
 8000800:	f000 fd12 	bl	8001228 <read_button>
			setTimer(3, TIME_BUTTON);
 8000804:	2132      	movs	r1, #50	; 0x32
 8000806:	2003      	movs	r0, #3
 8000808:	f000 fde2 	bl	80013d0 <setTimer>
		}
		ControlTraffic();
 800080c:	f000 f920 	bl	8000a50 <ControlTraffic>
		if (!timerOn(3)) {
 8000810:	e7ed      	b.n	80007ee <main+0x22>
 8000812:	bf00      	nop
 8000814:	20000048 	.word	0x20000048

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b090      	sub	sp, #64	; 0x40
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0318 	add.w	r3, r7, #24
 8000822:	2228      	movs	r2, #40	; 0x28
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f002 fa00 	bl	8002c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083a:	2302      	movs	r3, #2
 800083c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083e:	2301      	movs	r3, #1
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000842:	2310      	movs	r3, #16
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000846:	2300      	movs	r3, #0
 8000848:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084a:	f107 0318 	add.w	r3, r7, #24
 800084e:	4618      	mov	r0, r3
 8000850:	f001 fa10 	bl	8001c74 <HAL_RCC_OscConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800085a:	f000 f8f3 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	230f      	movs	r3, #15
 8000860:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f001 fc7e 	bl	8002178 <HAL_RCC_ClockConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000882:	f000 f8df 	bl	8000a44 <Error_Handler>
  }
}
 8000886:	bf00      	nop
 8000888:	3740      	adds	r7, #64	; 0x40
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a4:	463b      	mov	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_TIM2_Init+0x94>)
 80008ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_TIM2_Init+0x94>)
 80008b6:	f240 321f 	movw	r2, #799	; 0x31f
 80008ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_TIM2_Init+0x94>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_TIM2_Init+0x94>)
 80008c4:	2209      	movs	r2, #9
 80008c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_TIM2_Init+0x94>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_TIM2_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d4:	4813      	ldr	r0, [pc, #76]	; (8000924 <MX_TIM2_Init+0x94>)
 80008d6:	f001 fdab 	bl	8002430 <HAL_TIM_Base_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008e0:	f000 f8b0 	bl	8000a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	4619      	mov	r1, r3
 80008f0:	480c      	ldr	r0, [pc, #48]	; (8000924 <MX_TIM2_Init+0x94>)
 80008f2:	f001 ff47 	bl	8002784 <HAL_TIM_ConfigClockSource>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008fc:	f000 f8a2 	bl	8000a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000900:	2300      	movs	r3, #0
 8000902:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_TIM2_Init+0x94>)
 800090e:	f002 f91d 	bl	8002b4c <HAL_TIMEx_MasterConfigSynchronization>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000918:	f000 f894 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000048 	.word	0x20000048

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093c:	4b38      	ldr	r3, [pc, #224]	; (8000a20 <MX_GPIO_Init+0xf8>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a37      	ldr	r2, [pc, #220]	; (8000a20 <MX_GPIO_Init+0xf8>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b35      	ldr	r3, [pc, #212]	; (8000a20 <MX_GPIO_Init+0xf8>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0310 	and.w	r3, r3, #16
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <MX_GPIO_Init+0xf8>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a31      	ldr	r2, [pc, #196]	; (8000a20 <MX_GPIO_Init+0xf8>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <MX_GPIO_Init+0xf8>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <MX_GPIO_Init+0xf8>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a2b      	ldr	r2, [pc, #172]	; (8000a20 <MX_GPIO_Init+0xf8>)
 8000972:	f043 0308 	orr.w	r3, r3, #8
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <MX_GPIO_Init+0xf8>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0308 	and.w	r3, r3, #8
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098a:	4826      	ldr	r0, [pc, #152]	; (8000a24 <MX_GPIO_Init+0xfc>)
 800098c:	f001 f959 	bl	8001c42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000990:	2200      	movs	r2, #0
 8000992:	217e      	movs	r1, #126	; 0x7e
 8000994:	4824      	ldr	r0, [pc, #144]	; (8000a28 <MX_GPIO_Init+0x100>)
 8000996:	f001 f954 	bl	8001c42 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800099a:	2200      	movs	r2, #0
 800099c:	f247 71ff 	movw	r1, #30719	; 0x77ff
 80009a0:	4822      	ldr	r0, [pc, #136]	; (8000a2c <MX_GPIO_Init+0x104>)
 80009a2:	f001 f94e 	bl	8001c42 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4619      	mov	r1, r3
 80009be:	4819      	ldr	r0, [pc, #100]	; (8000a24 <MX_GPIO_Init+0xfc>)
 80009c0:	f000 ffa4 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80009c4:	237e      	movs	r3, #126	; 0x7e
 80009c6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	4619      	mov	r1, r3
 80009da:	4813      	ldr	r0, [pc, #76]	; (8000a28 <MX_GPIO_Init+0x100>)
 80009dc:	f000 ff96 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80009e0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80009e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0310 	add.w	r3, r7, #16
 80009f2:	4619      	mov	r1, r3
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <MX_GPIO_Init+0x100>)
 80009f6:	f000 ff89 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80009fa:	f247 73ff 	movw	r3, #30719	; 0x77ff
 80009fe:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	4619      	mov	r1, r3
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <MX_GPIO_Init+0x104>)
 8000a14:	f000 ff7a 	bl	800190c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a18:	bf00      	nop
 8000a1a:	3720      	adds	r7, #32
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40011000 	.word	0x40011000
 8000a28:	40010800 	.word	0x40010800
 8000a2c:	40010c00 	.word	0x40010c00

08000a30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	timerRun();
 8000a38:	f000 fcec 	bl	8001414 <timerRun>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a4c:	e7fe      	b.n	8000a4c <Error_Handler+0x8>
	...

08000a50 <ControlTraffic>:
void button0();
void button1();
void button2();
void led2Hz();

void ControlTraffic() {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	if (!timerOn(1)) {
 8000a54:	2001      	movs	r0, #1
 8000a56:	f000 fd0f 	bl	8001478 <timerOn>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f083 0301 	eor.w	r3, r3, #1
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d028      	beq.n	8000ab8 <ControlTraffic+0x68>
		if (TrafficState == NORMAL && RedTime != AmberTime + GreenTime) {
 8000a66:	4b9f      	ldr	r3, [pc, #636]	; (8000ce4 <ControlTraffic+0x294>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d110      	bne.n	8000a90 <ControlTraffic+0x40>
 8000a6e:	4b9e      	ldr	r3, [pc, #632]	; (8000ce8 <ControlTraffic+0x298>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b9d      	ldr	r3, [pc, #628]	; (8000cec <ControlTraffic+0x29c>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4b9d      	ldr	r3, [pc, #628]	; (8000cf0 <ControlTraffic+0x2a0>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	440b      	add	r3, r1
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d005      	beq.n	8000a90 <ControlTraffic+0x40>
			traffic_light_state = INVALID;
 8000a84:	4b9b      	ldr	r3, [pc, #620]	; (8000cf4 <ControlTraffic+0x2a4>)
 8000a86:	2204      	movs	r2, #4
 8000a88:	701a      	strb	r2, [r3, #0]
			OffAll_7Seg();
 8000a8a:	f7ff fba9 	bl	80001e0 <OffAll_7Seg>
 8000a8e:	e00f      	b.n	8000ab0 <ControlTraffic+0x60>
		} else {
			//Scan 7segs led
			update7SEG(i--);
 8000a90:	4b99      	ldr	r3, [pc, #612]	; (8000cf8 <ControlTraffic+0x2a8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	1e5a      	subs	r2, r3, #1
 8000a96:	4998      	ldr	r1, [pc, #608]	; (8000cf8 <ControlTraffic+0x2a8>)
 8000a98:	600a      	str	r2, [r1, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fd6f 	bl	8000580 <update7SEG>
			if (i < 0) {
 8000aa2:	4b95      	ldr	r3, [pc, #596]	; (8000cf8 <ControlTraffic+0x2a8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	da02      	bge.n	8000ab0 <ControlTraffic+0x60>
				i = 3;
 8000aaa:	4b93      	ldr	r3, [pc, #588]	; (8000cf8 <ControlTraffic+0x2a8>)
 8000aac:	2203      	movs	r2, #3
 8000aae:	601a      	str	r2, [r3, #0]
			}
		}
		setTimer(1, 1);
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f000 fc8c 	bl	80013d0 <setTimer>
	}
	switch (TrafficState) {
 8000ab8:	4b8a      	ldr	r3, [pc, #552]	; (8000ce4 <ControlTraffic+0x294>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b0c      	cmp	r3, #12
 8000abe:	f200 8154 	bhi.w	8000d6a <ControlTraffic+0x31a>
 8000ac2:	a201      	add	r2, pc, #4	; (adr r2, 8000ac8 <ControlTraffic+0x78>)
 8000ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac8:	08000afd 	.word	0x08000afd
 8000acc:	08000b25 	.word	0x08000b25
 8000ad0:	08000bd9 	.word	0x08000bd9
 8000ad4:	08000c8d 	.word	0x08000c8d
 8000ad8:	08000b53 	.word	0x08000b53
 8000adc:	08000c07 	.word	0x08000c07
 8000ae0:	08000cbb 	.word	0x08000cbb
 8000ae4:	08000bc3 	.word	0x08000bc3
 8000ae8:	08000c77 	.word	0x08000c77
 8000aec:	08000d55 	.word	0x08000d55
 8000af0:	08000b7b 	.word	0x08000b7b
 8000af4:	08000c2f 	.word	0x08000c2f
 8000af8:	08000d0d 	.word	0x08000d0d
	case NORMAL:
		/* check if time changed is valid */
		if (RedTime != AmberTime + GreenTime) {
 8000afc:	4b7a      	ldr	r3, [pc, #488]	; (8000ce8 <ControlTraffic+0x298>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b7a      	ldr	r3, [pc, #488]	; (8000cec <ControlTraffic+0x29c>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	4619      	mov	r1, r3
 8000b08:	4b79      	ldr	r3, [pc, #484]	; (8000cf0 <ControlTraffic+0x2a0>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	440b      	add	r3, r1
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d003      	beq.n	8000b1a <ControlTraffic+0xca>
			traffic_light_state = INVALID;
 8000b12:	4b78      	ldr	r3, [pc, #480]	; (8000cf4 <ControlTraffic+0x2a4>)
 8000b14:	2204      	movs	r2, #4
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	e001      	b.n	8000b1e <ControlTraffic+0xce>
		} else {
			TrafficLightFSM();
 8000b1a:	f000 f931 	bl	8000d80 <TrafficLightFSM>
		}
		//button 0
		button0();
 8000b1e:	f000 f9b7 	bl	8000e90 <button0>
		break;
 8000b22:	e123      	b.n	8000d6c <ControlTraffic+0x31c>
		/* Modify red begin-------------------------------- */
	case RED_MODIFY:
		if (is_changing[0] == NOTCHANGING) {
 8000b24:	4b75      	ldr	r3, [pc, #468]	; (8000cfc <ControlTraffic+0x2ac>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d103      	bne.n	8000b34 <ControlTraffic+0xe4>
			RedTimeBuffer = RedTime;
 8000b2c:	4b6e      	ldr	r3, [pc, #440]	; (8000ce8 <ControlTraffic+0x298>)
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	4b73      	ldr	r3, [pc, #460]	; (8000d00 <ControlTraffic+0x2b0>)
 8000b32:	701a      	strb	r2, [r3, #0]
		}
		// display the value and mode
		update7SegBuffer(RedTimeBuffer, 2);
 8000b34:	4b72      	ldr	r3, [pc, #456]	; (8000d00 <ControlTraffic+0x2b0>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2102      	movs	r1, #2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fb06 	bl	800014c <update7SegBuffer>
		//Blink single Led 2Hz
		led2Hz();
 8000b40:	f000 fa7e 	bl	8001040 <led2Hz>
		//button 0
		button0();
 8000b44:	f000 f9a4 	bl	8000e90 <button0>
		//button 1
		button1();
 8000b48:	f000 f9fa 	bl	8000f40 <button1>
		//buton 2
		button2();
 8000b4c:	f000 fa38 	bl	8000fc0 <button2>
		break;
 8000b50:	e10c      	b.n	8000d6c <ControlTraffic+0x31c>
	case RED_INCREASE_1:
		RedTimeBuffer++;
 8000b52:	4b6b      	ldr	r3, [pc, #428]	; (8000d00 <ControlTraffic+0x2b0>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	3301      	adds	r3, #1
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b69      	ldr	r3, [pc, #420]	; (8000d00 <ControlTraffic+0x2b0>)
 8000b5c:	701a      	strb	r2, [r3, #0]
		if (RedTimeBuffer > 99) {
 8000b5e:	4b68      	ldr	r3, [pc, #416]	; (8000d00 <ControlTraffic+0x2b0>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b63      	cmp	r3, #99	; 0x63
 8000b64:	d902      	bls.n	8000b6c <ControlTraffic+0x11c>
			RedTimeBuffer = 0;
 8000b66:	4b66      	ldr	r3, [pc, #408]	; (8000d00 <ControlTraffic+0x2b0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
		}
		is_changing[0] = CHANGING;
 8000b6c:	4b63      	ldr	r3, [pc, #396]	; (8000cfc <ControlTraffic+0x2ac>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
		TrafficState = RED_MODIFY;
 8000b72:	4b5c      	ldr	r3, [pc, #368]	; (8000ce4 <ControlTraffic+0x294>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
		break;
 8000b78:	e0f8      	b.n	8000d6c <ControlTraffic+0x31c>
	case RED_OVERTIME:
		// display the value and mode
		update7SegBuffer(RedTimeBuffer, 2);
 8000b7a:	4b61      	ldr	r3, [pc, #388]	; (8000d00 <ControlTraffic+0x2b0>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2102      	movs	r1, #2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fae3 	bl	800014c <update7SegBuffer>
		if (!timerOn(4)) {
 8000b86:	2004      	movs	r0, #4
 8000b88:	f000 fc76 	bl	8001478 <timerOn>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	f083 0301 	eor.w	r3, r3, #1
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d011      	beq.n	8000bbc <ControlTraffic+0x16c>
			RedTimeBuffer++;
 8000b98:	4b59      	ldr	r3, [pc, #356]	; (8000d00 <ControlTraffic+0x2b0>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b57      	ldr	r3, [pc, #348]	; (8000d00 <ControlTraffic+0x2b0>)
 8000ba2:	701a      	strb	r2, [r3, #0]
			if (RedTimeBuffer > 99) {
 8000ba4:	4b56      	ldr	r3, [pc, #344]	; (8000d00 <ControlTraffic+0x2b0>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b63      	cmp	r3, #99	; 0x63
 8000baa:	d902      	bls.n	8000bb2 <ControlTraffic+0x162>
				RedTimeBuffer = 0;
 8000bac:	4b54      	ldr	r3, [pc, #336]	; (8000d00 <ControlTraffic+0x2b0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
			}
			setTimer(4, 500);
 8000bb2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bb6:	2004      	movs	r0, #4
 8000bb8:	f000 fc0a 	bl	80013d0 <setTimer>
		}
		//buton1
		button1();
 8000bbc:	f000 f9c0 	bl	8000f40 <button1>
		break;
 8000bc0:	e0d4      	b.n	8000d6c <ControlTraffic+0x31c>
	case RED_SET:/* Set the value for Red*/
		RedTime = RedTimeBuffer;
 8000bc2:	4b4f      	ldr	r3, [pc, #316]	; (8000d00 <ControlTraffic+0x2b0>)
 8000bc4:	781a      	ldrb	r2, [r3, #0]
 8000bc6:	4b48      	ldr	r3, [pc, #288]	; (8000ce8 <ControlTraffic+0x298>)
 8000bc8:	701a      	strb	r2, [r3, #0]
		is_changing[0] = NOTCHANGING;
 8000bca:	4b4c      	ldr	r3, [pc, #304]	; (8000cfc <ControlTraffic+0x2ac>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
		TrafficState = RED_MODIFY;
 8000bd0:	4b44      	ldr	r3, [pc, #272]	; (8000ce4 <ControlTraffic+0x294>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
		break;
 8000bd6:	e0c9      	b.n	8000d6c <ControlTraffic+0x31c>

		/* Modify Amber begin-------------------------------- */
	case AMBER_MODIFY:
		if (is_changing[1] == NOTCHANGING) {
 8000bd8:	4b48      	ldr	r3, [pc, #288]	; (8000cfc <ControlTraffic+0x2ac>)
 8000bda:	785b      	ldrb	r3, [r3, #1]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d103      	bne.n	8000be8 <ControlTraffic+0x198>
			AmberTimeBuffer = AmberTime;
 8000be0:	4b42      	ldr	r3, [pc, #264]	; (8000cec <ControlTraffic+0x29c>)
 8000be2:	781a      	ldrb	r2, [r3, #0]
 8000be4:	4b47      	ldr	r3, [pc, #284]	; (8000d04 <ControlTraffic+0x2b4>)
 8000be6:	701a      	strb	r2, [r3, #0]
		}
		// display the value and mode
		update7SegBuffer(AmberTimeBuffer, 3);
 8000be8:	4b46      	ldr	r3, [pc, #280]	; (8000d04 <ControlTraffic+0x2b4>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2103      	movs	r1, #3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff faac 	bl	800014c <update7SegBuffer>
		//led 2Hz
		led2Hz();
 8000bf4:	f000 fa24 	bl	8001040 <led2Hz>
		//button 0
		button0();
 8000bf8:	f000 f94a 	bl	8000e90 <button0>
		//button 1
		button1();
 8000bfc:	f000 f9a0 	bl	8000f40 <button1>
		//buton 2
		button2();
 8000c00:	f000 f9de 	bl	8000fc0 <button2>
		break;
 8000c04:	e0b2      	b.n	8000d6c <ControlTraffic+0x31c>
	case AMBER_INCREASE_1:
		AmberTimeBuffer++;
 8000c06:	4b3f      	ldr	r3, [pc, #252]	; (8000d04 <ControlTraffic+0x2b4>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b3d      	ldr	r3, [pc, #244]	; (8000d04 <ControlTraffic+0x2b4>)
 8000c10:	701a      	strb	r2, [r3, #0]
		if (AmberTimeBuffer > 99) {
 8000c12:	4b3c      	ldr	r3, [pc, #240]	; (8000d04 <ControlTraffic+0x2b4>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b63      	cmp	r3, #99	; 0x63
 8000c18:	d902      	bls.n	8000c20 <ControlTraffic+0x1d0>
			AmberTimeBuffer = 0;
 8000c1a:	4b3a      	ldr	r3, [pc, #232]	; (8000d04 <ControlTraffic+0x2b4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
		}
		is_changing[1] = CHANGING;
 8000c20:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <ControlTraffic+0x2ac>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	705a      	strb	r2, [r3, #1]
		TrafficState = AMBER_MODIFY;
 8000c26:	4b2f      	ldr	r3, [pc, #188]	; (8000ce4 <ControlTraffic+0x294>)
 8000c28:	2202      	movs	r2, #2
 8000c2a:	701a      	strb	r2, [r3, #0]
		break;
 8000c2c:	e09e      	b.n	8000d6c <ControlTraffic+0x31c>
	case AMBER_OVERTIME:
		// display the value and mode
		update7SegBuffer(AmberTimeBuffer, 3);
 8000c2e:	4b35      	ldr	r3, [pc, #212]	; (8000d04 <ControlTraffic+0x2b4>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2103      	movs	r1, #3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fa89 	bl	800014c <update7SegBuffer>
		if (!timerOn(4)) {
 8000c3a:	2004      	movs	r0, #4
 8000c3c:	f000 fc1c 	bl	8001478 <timerOn>
 8000c40:	4603      	mov	r3, r0
 8000c42:	f083 0301 	eor.w	r3, r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d011      	beq.n	8000c70 <ControlTraffic+0x220>
			AmberTimeBuffer++;
 8000c4c:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <ControlTraffic+0x2b4>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	3301      	adds	r3, #1
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <ControlTraffic+0x2b4>)
 8000c56:	701a      	strb	r2, [r3, #0]
			if (AmberTimeBuffer > 99) {
 8000c58:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <ControlTraffic+0x2b4>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b63      	cmp	r3, #99	; 0x63
 8000c5e:	d902      	bls.n	8000c66 <ControlTraffic+0x216>
				AmberTimeBuffer = 0;
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <ControlTraffic+0x2b4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
			}
			setTimer(4, 500);
 8000c66:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c6a:	2004      	movs	r0, #4
 8000c6c:	f000 fbb0 	bl	80013d0 <setTimer>
		}
		//buton1
		button1();
 8000c70:	f000 f966 	bl	8000f40 <button1>
		break;
 8000c74:	e07a      	b.n	8000d6c <ControlTraffic+0x31c>
	case AMBER_SET:

		AmberTime = AmberTimeBuffer;
 8000c76:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <ControlTraffic+0x2b4>)
 8000c78:	781a      	ldrb	r2, [r3, #0]
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <ControlTraffic+0x29c>)
 8000c7c:	701a      	strb	r2, [r3, #0]

		is_changing[1] = NOTCHANGING;
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <ControlTraffic+0x2ac>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	705a      	strb	r2, [r3, #1]
		TrafficState = AMBER_MODIFY;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <ControlTraffic+0x294>)
 8000c86:	2202      	movs	r2, #2
 8000c88:	701a      	strb	r2, [r3, #0]
		break;
 8000c8a:	e06f      	b.n	8000d6c <ControlTraffic+0x31c>

		//Modify green
	case GREEN_MODIFY:
		if (is_changing[2] == NOTCHANGING) {
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <ControlTraffic+0x2ac>)
 8000c8e:	789b      	ldrb	r3, [r3, #2]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d103      	bne.n	8000c9c <ControlTraffic+0x24c>
			GreenTimeBuffer = GreenTime;
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <ControlTraffic+0x2a0>)
 8000c96:	781a      	ldrb	r2, [r3, #0]
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <ControlTraffic+0x2b8>)
 8000c9a:	701a      	strb	r2, [r3, #0]
		}
		// display the value and mode
		update7SegBuffer(GreenTimeBuffer, 4);
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <ControlTraffic+0x2b8>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fa52 	bl	800014c <update7SegBuffer>
		//led 2Hz
		led2Hz();
 8000ca8:	f000 f9ca 	bl	8001040 <led2Hz>
		//button 0
		button0();
 8000cac:	f000 f8f0 	bl	8000e90 <button0>
		//button 1
		button1();
 8000cb0:	f000 f946 	bl	8000f40 <button1>
		//buton 2
		button2();
 8000cb4:	f000 f984 	bl	8000fc0 <button2>
		break;
 8000cb8:	e058      	b.n	8000d6c <ControlTraffic+0x31c>
	case GREEN_INCREASE_1:
		GreenTimeBuffer++;
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <ControlTraffic+0x2b8>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <ControlTraffic+0x2b8>)
 8000cc4:	701a      	strb	r2, [r3, #0]
		if (GreenTimeBuffer > 99) {
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <ControlTraffic+0x2b8>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b63      	cmp	r3, #99	; 0x63
 8000ccc:	d902      	bls.n	8000cd4 <ControlTraffic+0x284>
			GreenTimeBuffer = 0;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <ControlTraffic+0x2b8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
		}
		is_changing[2] = CHANGING;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <ControlTraffic+0x2ac>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	709a      	strb	r2, [r3, #2]
		TrafficState = GREEN_MODIFY;
 8000cda:	4b02      	ldr	r3, [pc, #8]	; (8000ce4 <ControlTraffic+0x294>)
 8000cdc:	2203      	movs	r2, #3
 8000cde:	701a      	strb	r2, [r3, #0]
		break;
 8000ce0:	e044      	b.n	8000d6c <ControlTraffic+0x31c>
 8000ce2:	bf00      	nop
 8000ce4:	20000090 	.word	0x20000090
 8000ce8:	20000016 	.word	0x20000016
 8000cec:	20000018 	.word	0x20000018
 8000cf0:	2000001a 	.word	0x2000001a
 8000cf4:	20000044 	.word	0x20000044
 8000cf8:	20000010 	.word	0x20000010
 8000cfc:	20000098 	.word	0x20000098
 8000d00:	20000017 	.word	0x20000017
 8000d04:	20000019 	.word	0x20000019
 8000d08:	2000001b 	.word	0x2000001b
	case GREEN_OVERTIME:
		// display the value and mode
		update7SegBuffer(GreenTimeBuffer, 2);
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <ControlTraffic+0x320>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2102      	movs	r1, #2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fa1a 	bl	800014c <update7SegBuffer>
		if (!timerOn(4)) {
 8000d18:	2004      	movs	r0, #4
 8000d1a:	f000 fbad 	bl	8001478 <timerOn>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f083 0301 	eor.w	r3, r3, #1
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d011      	beq.n	8000d4e <ControlTraffic+0x2fe>
			GreenTimeBuffer++;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <ControlTraffic+0x320>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <ControlTraffic+0x320>)
 8000d34:	701a      	strb	r2, [r3, #0]
			if (GreenTimeBuffer > 99) {
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <ControlTraffic+0x320>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b63      	cmp	r3, #99	; 0x63
 8000d3c:	d902      	bls.n	8000d44 <ControlTraffic+0x2f4>
				GreenTimeBuffer = 0;
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <ControlTraffic+0x320>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
			}
			setTimer(4, 500);
 8000d44:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d48:	2004      	movs	r0, #4
 8000d4a:	f000 fb41 	bl	80013d0 <setTimer>
		}
		//buton1
		button1();
 8000d4e:	f000 f8f7 	bl	8000f40 <button1>
		break;
 8000d52:	e00b      	b.n	8000d6c <ControlTraffic+0x31c>
	case GREEN_SET:
		GreenTime = GreenTimeBuffer;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <ControlTraffic+0x320>)
 8000d56:	781a      	ldrb	r2, [r3, #0]
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <ControlTraffic+0x324>)
 8000d5a:	701a      	strb	r2, [r3, #0]
		is_changing[2] = NOTCHANGING;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <ControlTraffic+0x328>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	709a      	strb	r2, [r3, #2]
		TrafficState = GREEN_MODIFY;
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <ControlTraffic+0x32c>)
 8000d64:	2203      	movs	r2, #3
 8000d66:	701a      	strb	r2, [r3, #0]
		break;
 8000d68:	e000      	b.n	8000d6c <ControlTraffic+0x31c>
	default:
		break;
 8000d6a:	bf00      	nop
	}
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2000001b 	.word	0x2000001b
 8000d74:	2000001a 	.word	0x2000001a
 8000d78:	20000098 	.word	0x20000098
 8000d7c:	20000090 	.word	0x20000090

08000d80 <TrafficLightFSM>:

void TrafficLightFSM() {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	if (!timerOn(2)) {
 8000d84:	2002      	movs	r0, #2
 8000d86:	f000 fb77 	bl	8001478 <timerOn>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	f083 0301 	eor.w	r3, r3, #1
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d06d      	beq.n	8000e72 <TrafficLightFSM+0xf2>
		setTimer(2, 1000);
 8000d96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d9a:	2002      	movs	r0, #2
 8000d9c:	f000 fb18 	bl	80013d0 <setTimer>
		traffic_light();
 8000da0:	f7ff fc9a 	bl	80006d8 <traffic_light>
		update7SegBuffer(timeWE--, timeNS--);
 8000da4:	4b34      	ldr	r3, [pc, #208]	; (8000e78 <TrafficLightFSM+0xf8>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	1e5a      	subs	r2, r3, #1
 8000daa:	b2d1      	uxtb	r1, r2
 8000dac:	4a32      	ldr	r2, [pc, #200]	; (8000e78 <TrafficLightFSM+0xf8>)
 8000dae:	7011      	strb	r1, [r2, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	4b32      	ldr	r3, [pc, #200]	; (8000e7c <TrafficLightFSM+0xfc>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	1e5a      	subs	r2, r3, #1
 8000db8:	b2d1      	uxtb	r1, r2
 8000dba:	4a30      	ldr	r2, [pc, #192]	; (8000e7c <TrafficLightFSM+0xfc>)
 8000dbc:	7011      	strb	r1, [r2, #0]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f7ff f9c4 	bl	800014c <update7SegBuffer>
		switch (traffic_light_state) {
 8000dc4:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <TrafficLightFSM+0x100>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d849      	bhi.n	8000e60 <TrafficLightFSM+0xe0>
 8000dcc:	a201      	add	r2, pc, #4	; (adr r2, 8000dd4 <TrafficLightFSM+0x54>)
 8000dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd2:	bf00      	nop
 8000dd4:	08000de9 	.word	0x08000de9
 8000dd8:	08000e01 	.word	0x08000e01
 8000ddc:	08000e21 	.word	0x08000e21
 8000de0:	08000e39 	.word	0x08000e39
 8000de4:	08000e59 	.word	0x08000e59
		case REDWE_GREENNS:
			if (timeNS <= 0) {
 8000de8:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <TrafficLightFSM+0xfc>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d139      	bne.n	8000e64 <TrafficLightFSM+0xe4>
				traffic_light_state = REDWE_AMBERNS;
 8000df0:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <TrafficLightFSM+0x100>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
				timeNS = AmberTime;
 8000df6:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <TrafficLightFSM+0x104>)
 8000df8:	781a      	ldrb	r2, [r3, #0]
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <TrafficLightFSM+0xfc>)
 8000dfc:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000dfe:	e031      	b.n	8000e64 <TrafficLightFSM+0xe4>
		case REDWE_AMBERNS:
			if (timeNS <= 0) {
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <TrafficLightFSM+0xfc>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d12f      	bne.n	8000e68 <TrafficLightFSM+0xe8>
				traffic_light_state = GREENWE_REDNS;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <TrafficLightFSM+0x100>)
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	701a      	strb	r2, [r3, #0]
				timeWE = GreenTime;
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <TrafficLightFSM+0x108>)
 8000e10:	781a      	ldrb	r2, [r3, #0]
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <TrafficLightFSM+0xf8>)
 8000e14:	701a      	strb	r2, [r3, #0]
				timeNS = RedTime;
 8000e16:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <TrafficLightFSM+0x10c>)
 8000e18:	781a      	ldrb	r2, [r3, #0]
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <TrafficLightFSM+0xfc>)
 8000e1c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000e1e:	e023      	b.n	8000e68 <TrafficLightFSM+0xe8>
		case GREENWE_REDNS:
			if (timeWE <= 0) {
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <TrafficLightFSM+0xf8>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d121      	bne.n	8000e6c <TrafficLightFSM+0xec>
				traffic_light_state = AMBERWE_REDNS;
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <TrafficLightFSM+0x100>)
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	701a      	strb	r2, [r3, #0]
				timeWE = AmberTime;
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <TrafficLightFSM+0x104>)
 8000e30:	781a      	ldrb	r2, [r3, #0]
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <TrafficLightFSM+0xf8>)
 8000e34:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000e36:	e019      	b.n	8000e6c <TrafficLightFSM+0xec>
		case AMBERWE_REDNS:
			if (timeWE <= 0) {
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <TrafficLightFSM+0xf8>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d117      	bne.n	8000e70 <TrafficLightFSM+0xf0>
				traffic_light_state = REDWE_GREENNS;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <TrafficLightFSM+0x100>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
				timeWE = RedTime;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <TrafficLightFSM+0x10c>)
 8000e48:	781a      	ldrb	r2, [r3, #0]
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <TrafficLightFSM+0xf8>)
 8000e4c:	701a      	strb	r2, [r3, #0]
				timeNS = GreenTime;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <TrafficLightFSM+0x108>)
 8000e50:	781a      	ldrb	r2, [r3, #0]
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <TrafficLightFSM+0xfc>)
 8000e54:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000e56:	e00b      	b.n	8000e70 <TrafficLightFSM+0xf0>
		case INVALID:
			traffic_light_state = INVALID;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <TrafficLightFSM+0x100>)
 8000e5a:	2204      	movs	r2, #4
 8000e5c:	701a      	strb	r2, [r3, #0]
			break;
 8000e5e:	e008      	b.n	8000e72 <TrafficLightFSM+0xf2>
		default:
			break;
 8000e60:	bf00      	nop
 8000e62:	e006      	b.n	8000e72 <TrafficLightFSM+0xf2>
			break;
 8000e64:	bf00      	nop
 8000e66:	e004      	b.n	8000e72 <TrafficLightFSM+0xf2>
			break;
 8000e68:	bf00      	nop
 8000e6a:	e002      	b.n	8000e72 <TrafficLightFSM+0xf2>
			break;
 8000e6c:	bf00      	nop
 8000e6e:	e000      	b.n	8000e72 <TrafficLightFSM+0xf2>
			break;
 8000e70:	bf00      	nop
		}
	}
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000014 	.word	0x20000014
 8000e7c:	20000015 	.word	0x20000015
 8000e80:	20000044 	.word	0x20000044
 8000e84:	20000018 	.word	0x20000018
 8000e88:	2000001a 	.word	0x2000001a
 8000e8c:	20000016 	.word	0x20000016

08000e90 <button0>:

void button0() {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	switch (buttonState[0]) {
 8000e94:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <button0+0xa0>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d038      	beq.n	8000f0e <button0+0x7e>
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d140      	bne.n	8000f22 <button0+0x92>
	case RELEASE:
		if (is_button_pressed(0)) {
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f000 fa7f 	bl	80013a4 <is_button_pressed>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d03c      	beq.n	8000f26 <button0+0x96>
			switch (TrafficState) {
 8000eac:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <button0+0xa4>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d824      	bhi.n	8000efe <button0+0x6e>
 8000eb4:	a201      	add	r2, pc, #4	; (adr r2, 8000ebc <button0+0x2c>)
 8000eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eba:	bf00      	nop
 8000ebc:	08000ecd 	.word	0x08000ecd
 8000ec0:	08000ed5 	.word	0x08000ed5
 8000ec4:	08000ee3 	.word	0x08000ee3
 8000ec8:	08000ef1 	.word	0x08000ef1
			case NORMAL:
				TrafficState = RED_MODIFY;
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <button0+0xa4>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
				break;
 8000ed2:	e015      	b.n	8000f00 <button0+0x70>
			case RED_MODIFY:
				is_changing[0] = NOTCHANGING;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <button0+0xa8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
				TrafficState = AMBER_MODIFY;
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <button0+0xa4>)
 8000edc:	2202      	movs	r2, #2
 8000ede:	701a      	strb	r2, [r3, #0]
				break;
 8000ee0:	e00e      	b.n	8000f00 <button0+0x70>
			case AMBER_MODIFY:
				is_changing[1] = NOTCHANGING;
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <button0+0xa8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	705a      	strb	r2, [r3, #1]
				TrafficState = GREEN_MODIFY;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <button0+0xa4>)
 8000eea:	2203      	movs	r2, #3
 8000eec:	701a      	strb	r2, [r3, #0]
				break;
 8000eee:	e007      	b.n	8000f00 <button0+0x70>
			case GREEN_MODIFY:
				is_changing[2] = NOTCHANGING;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <button0+0xa8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	709a      	strb	r2, [r3, #2]
				TrafficState = NORMAL;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <button0+0xa4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
				break;
 8000efc:	e000      	b.n	8000f00 <button0+0x70>
			default:
				break;
 8000efe:	bf00      	nop
			}
			buttonState[0] = PRESSED;
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <button0+0xa0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
			traffic_light_state = REDWE_GREENNS;
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <button0+0xac>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
		} else {
			break;
		}
		break;
 8000f0c:	e00e      	b.n	8000f2c <button0+0x9c>
	case PRESSED:
		if (!is_button_pressed(0)) {
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 fa48 	bl	80013a4 <is_button_pressed>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d107      	bne.n	8000f2a <button0+0x9a>
			buttonState[0] = RELEASE;
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <button0+0xa0>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000f20:	e003      	b.n	8000f2a <button0+0x9a>
	default:
		break;
 8000f22:	bf00      	nop
 8000f24:	e002      	b.n	8000f2c <button0+0x9c>
			break;
 8000f26:	bf00      	nop
 8000f28:	e000      	b.n	8000f2c <button0+0x9c>
		break;
 8000f2a:	bf00      	nop
	}
	return;
 8000f2c:	bf00      	nop
}
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000094 	.word	0x20000094
 8000f34:	20000090 	.word	0x20000090
 8000f38:	20000098 	.word	0x20000098
 8000f3c:	20000044 	.word	0x20000044

08000f40 <button1>:

void button1() {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	switch (buttonState[1]) {
 8000f44:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <button1+0x78>)
 8000f46:	785b      	ldrb	r3, [r3, #1]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d023      	beq.n	8000f94 <button1+0x54>
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d12b      	bne.n	8000fa8 <button1+0x68>
	case RELEASE:
		if (is_button_pressed(1)) {
 8000f50:	2001      	movs	r0, #1
 8000f52:	f000 fa27 	bl	80013a4 <is_button_pressed>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d027      	beq.n	8000fac <button1+0x6c>
			switch (TrafficState) {
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <button1+0x7c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	d00e      	beq.n	8000f82 <button1+0x42>
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	dc10      	bgt.n	8000f8a <button1+0x4a>
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d002      	beq.n	8000f72 <button1+0x32>
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d004      	beq.n	8000f7a <button1+0x3a>
				break;
			case GREEN_MODIFY:
				TrafficState = GREEN_INCREASE_1;
				break;
			default:
				break;
 8000f70:	e00b      	b.n	8000f8a <button1+0x4a>
				TrafficState = RED_INCREASE_1;
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <button1+0x7c>)
 8000f74:	2204      	movs	r2, #4
 8000f76:	701a      	strb	r2, [r3, #0]
				break;
 8000f78:	e008      	b.n	8000f8c <button1+0x4c>
				TrafficState = AMBER_INCREASE_1;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <button1+0x7c>)
 8000f7c:	2205      	movs	r2, #5
 8000f7e:	701a      	strb	r2, [r3, #0]
				break;
 8000f80:	e004      	b.n	8000f8c <button1+0x4c>
				TrafficState = GREEN_INCREASE_1;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <button1+0x7c>)
 8000f84:	2206      	movs	r2, #6
 8000f86:	701a      	strb	r2, [r3, #0]
				break;
 8000f88:	e000      	b.n	8000f8c <button1+0x4c>
				break;
 8000f8a:	bf00      	nop
			}
			buttonState[1] = PRESSED;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <button1+0x78>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	705a      	strb	r2, [r3, #1]
		} else {
			break;
		}
		break;
 8000f92:	e00e      	b.n	8000fb2 <button1+0x72>
	case PRESSED:
		if (!is_button_pressed(1)) {
 8000f94:	2001      	movs	r0, #1
 8000f96:	f000 fa05 	bl	80013a4 <is_button_pressed>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d107      	bne.n	8000fb0 <button1+0x70>
			buttonState[1] = RELEASE;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <button1+0x78>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	705a      	strb	r2, [r3, #1]
		}
		break;
 8000fa6:	e003      	b.n	8000fb0 <button1+0x70>
	default:
		break;
 8000fa8:	bf00      	nop
 8000faa:	e002      	b.n	8000fb2 <button1+0x72>
			break;
 8000fac:	bf00      	nop
 8000fae:	e000      	b.n	8000fb2 <button1+0x72>
		break;
 8000fb0:	bf00      	nop
	}
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000094 	.word	0x20000094
 8000fbc:	20000090 	.word	0x20000090

08000fc0 <button2>:

void button2() {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	switch (buttonState[2]) {
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <button2+0x78>)
 8000fc6:	789b      	ldrb	r3, [r3, #2]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d023      	beq.n	8001014 <button2+0x54>
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d12b      	bne.n	8001028 <button2+0x68>
	case RELEASE:
		if (is_button_pressed(2)) {
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f000 f9e7 	bl	80013a4 <is_button_pressed>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d027      	beq.n	800102c <button2+0x6c>
			switch (TrafficState) {
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <button2+0x7c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d00e      	beq.n	8001002 <button2+0x42>
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	dc10      	bgt.n	800100a <button2+0x4a>
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d002      	beq.n	8000ff2 <button2+0x32>
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d004      	beq.n	8000ffa <button2+0x3a>
				break;
			case GREEN_MODIFY:
				TrafficState = GREEN_SET;
				break;
			default:
				break;
 8000ff0:	e00b      	b.n	800100a <button2+0x4a>
				TrafficState = RED_SET;
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <button2+0x7c>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	701a      	strb	r2, [r3, #0]
				break;
 8000ff8:	e008      	b.n	800100c <button2+0x4c>
				TrafficState = AMBER_SET;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <button2+0x7c>)
 8000ffc:	2208      	movs	r2, #8
 8000ffe:	701a      	strb	r2, [r3, #0]
				break;
 8001000:	e004      	b.n	800100c <button2+0x4c>
				TrafficState = GREEN_SET;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <button2+0x7c>)
 8001004:	2209      	movs	r2, #9
 8001006:	701a      	strb	r2, [r3, #0]
				break;
 8001008:	e000      	b.n	800100c <button2+0x4c>
				break;
 800100a:	bf00      	nop
			}
			buttonState[2] = PRESSED;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <button2+0x78>)
 800100e:	2200      	movs	r2, #0
 8001010:	709a      	strb	r2, [r3, #2]
		} else {
			break;;
		}
		break;
 8001012:	e00e      	b.n	8001032 <button2+0x72>
	case PRESSED:
		if (!is_button_pressed(2)) {
 8001014:	2002      	movs	r0, #2
 8001016:	f000 f9c5 	bl	80013a4 <is_button_pressed>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d107      	bne.n	8001030 <button2+0x70>
			buttonState[2] = RELEASE;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <button2+0x78>)
 8001022:	2201      	movs	r2, #1
 8001024:	709a      	strb	r2, [r3, #2]
		}
		break;
 8001026:	e003      	b.n	8001030 <button2+0x70>
	default:
		break;
 8001028:	bf00      	nop
 800102a:	e002      	b.n	8001032 <button2+0x72>
			break;;
 800102c:	bf00      	nop
 800102e:	e000      	b.n	8001032 <button2+0x72>
		break;
 8001030:	bf00      	nop
	}
	return;
 8001032:	bf00      	nop
}
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000094 	.word	0x20000094
 800103c:	20000090 	.word	0x20000090

08001040 <led2Hz>:

void led2Hz() {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	if (is_blink_led) {
 8001044:	4b56      	ldr	r3, [pc, #344]	; (80011a0 <led2Hz+0x160>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d079      	beq.n	8001140 <led2Hz+0x100>
		switch (TrafficState) {
 800104c:	4b55      	ldr	r3, [pc, #340]	; (80011a4 <led2Hz+0x164>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b03      	cmp	r3, #3
 8001052:	d044      	beq.n	80010de <led2Hz+0x9e>
 8001054:	2b03      	cmp	r3, #3
 8001056:	dc61      	bgt.n	800111c <led2Hz+0xdc>
 8001058:	2b01      	cmp	r3, #1
 800105a:	d002      	beq.n	8001062 <led2Hz+0x22>
 800105c:	2b02      	cmp	r3, #2
 800105e:	d01f      	beq.n	80010a0 <led2Hz+0x60>
			HAL_GPIO_WritePin(TL_PORT, NS_AMBER, 1);
			HAL_GPIO_WritePin(TL_PORT, WE_GREEN, 0);
			HAL_GPIO_WritePin(TL_PORT, NS_GREEN, 0);
			break;
		default:
			break;
 8001060:	e05c      	b.n	800111c <led2Hz+0xdc>
			HAL_GPIO_WritePin(TL_PORT, WE_RED, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2102      	movs	r1, #2
 8001066:	4850      	ldr	r0, [pc, #320]	; (80011a8 <led2Hz+0x168>)
 8001068:	f000 fdeb 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_RED, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2110      	movs	r1, #16
 8001070:	484d      	ldr	r0, [pc, #308]	; (80011a8 <led2Hz+0x168>)
 8001072:	f000 fde6 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, WE_AMBER, 1);
 8001076:	2201      	movs	r2, #1
 8001078:	2104      	movs	r1, #4
 800107a:	484b      	ldr	r0, [pc, #300]	; (80011a8 <led2Hz+0x168>)
 800107c:	f000 fde1 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_AMBER, 1);
 8001080:	2201      	movs	r2, #1
 8001082:	2120      	movs	r1, #32
 8001084:	4848      	ldr	r0, [pc, #288]	; (80011a8 <led2Hz+0x168>)
 8001086:	f000 fddc 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, WE_GREEN, 1);
 800108a:	2201      	movs	r2, #1
 800108c:	2108      	movs	r1, #8
 800108e:	4846      	ldr	r0, [pc, #280]	; (80011a8 <led2Hz+0x168>)
 8001090:	f000 fdd7 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_GREEN, 1);
 8001094:	2201      	movs	r2, #1
 8001096:	2140      	movs	r1, #64	; 0x40
 8001098:	4843      	ldr	r0, [pc, #268]	; (80011a8 <led2Hz+0x168>)
 800109a:	f000 fdd2 	bl	8001c42 <HAL_GPIO_WritePin>
			break;
 800109e:	e03e      	b.n	800111e <led2Hz+0xde>
			HAL_GPIO_WritePin(TL_PORT, WE_RED, 1);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2102      	movs	r1, #2
 80010a4:	4840      	ldr	r0, [pc, #256]	; (80011a8 <led2Hz+0x168>)
 80010a6:	f000 fdcc 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_RED, 1);
 80010aa:	2201      	movs	r2, #1
 80010ac:	2110      	movs	r1, #16
 80010ae:	483e      	ldr	r0, [pc, #248]	; (80011a8 <led2Hz+0x168>)
 80010b0:	f000 fdc7 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, WE_AMBER, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2104      	movs	r1, #4
 80010b8:	483b      	ldr	r0, [pc, #236]	; (80011a8 <led2Hz+0x168>)
 80010ba:	f000 fdc2 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_AMBER, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2120      	movs	r1, #32
 80010c2:	4839      	ldr	r0, [pc, #228]	; (80011a8 <led2Hz+0x168>)
 80010c4:	f000 fdbd 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, WE_GREEN, 1);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2108      	movs	r1, #8
 80010cc:	4836      	ldr	r0, [pc, #216]	; (80011a8 <led2Hz+0x168>)
 80010ce:	f000 fdb8 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_GREEN, 1);
 80010d2:	2201      	movs	r2, #1
 80010d4:	2140      	movs	r1, #64	; 0x40
 80010d6:	4834      	ldr	r0, [pc, #208]	; (80011a8 <led2Hz+0x168>)
 80010d8:	f000 fdb3 	bl	8001c42 <HAL_GPIO_WritePin>
			break;
 80010dc:	e01f      	b.n	800111e <led2Hz+0xde>
			HAL_GPIO_WritePin(TL_PORT, WE_RED, 1);
 80010de:	2201      	movs	r2, #1
 80010e0:	2102      	movs	r1, #2
 80010e2:	4831      	ldr	r0, [pc, #196]	; (80011a8 <led2Hz+0x168>)
 80010e4:	f000 fdad 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_RED, 1);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2110      	movs	r1, #16
 80010ec:	482e      	ldr	r0, [pc, #184]	; (80011a8 <led2Hz+0x168>)
 80010ee:	f000 fda8 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, WE_AMBER, 1);
 80010f2:	2201      	movs	r2, #1
 80010f4:	2104      	movs	r1, #4
 80010f6:	482c      	ldr	r0, [pc, #176]	; (80011a8 <led2Hz+0x168>)
 80010f8:	f000 fda3 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_AMBER, 1);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2120      	movs	r1, #32
 8001100:	4829      	ldr	r0, [pc, #164]	; (80011a8 <led2Hz+0x168>)
 8001102:	f000 fd9e 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, WE_GREEN, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2108      	movs	r1, #8
 800110a:	4827      	ldr	r0, [pc, #156]	; (80011a8 <led2Hz+0x168>)
 800110c:	f000 fd99 	bl	8001c42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TL_PORT, NS_GREEN, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2140      	movs	r1, #64	; 0x40
 8001114:	4824      	ldr	r0, [pc, #144]	; (80011a8 <led2Hz+0x168>)
 8001116:	f000 fd94 	bl	8001c42 <HAL_GPIO_WritePin>
			break;
 800111a:	e000      	b.n	800111e <led2Hz+0xde>
			break;
 800111c:	bf00      	nop
		}
		if (!timerOn(0)) {
 800111e:	2000      	movs	r0, #0
 8001120:	f000 f9aa 	bl	8001478 <timerOn>
 8001124:	4603      	mov	r3, r0
 8001126:	f083 0301 	eor.w	r3, r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d035      	beq.n	800119c <led2Hz+0x15c>
			setTimer(0, TIME_BLINK_LED);
 8001130:	21fa      	movs	r1, #250	; 0xfa
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f94c 	bl	80013d0 <setTimer>
			is_blink_led = 0;
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <led2Hz+0x160>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
		if (!timerOn(0)) {
			setTimer(0, TIME_BLINK_LED);
			is_blink_led = 1;
		}
	}
}
 800113e:	e02d      	b.n	800119c <led2Hz+0x15c>
		HAL_GPIO_WritePin(TL_PORT, WE_RED, 1);
 8001140:	2201      	movs	r2, #1
 8001142:	2102      	movs	r1, #2
 8001144:	4818      	ldr	r0, [pc, #96]	; (80011a8 <led2Hz+0x168>)
 8001146:	f000 fd7c 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL_PORT, NS_RED, 1);
 800114a:	2201      	movs	r2, #1
 800114c:	2110      	movs	r1, #16
 800114e:	4816      	ldr	r0, [pc, #88]	; (80011a8 <led2Hz+0x168>)
 8001150:	f000 fd77 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL_PORT, WE_AMBER, 1);
 8001154:	2201      	movs	r2, #1
 8001156:	2104      	movs	r1, #4
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <led2Hz+0x168>)
 800115a:	f000 fd72 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL_PORT, NS_AMBER, 1);
 800115e:	2201      	movs	r2, #1
 8001160:	2120      	movs	r1, #32
 8001162:	4811      	ldr	r0, [pc, #68]	; (80011a8 <led2Hz+0x168>)
 8001164:	f000 fd6d 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL_PORT, WE_GREEN, 1);
 8001168:	2201      	movs	r2, #1
 800116a:	2108      	movs	r1, #8
 800116c:	480e      	ldr	r0, [pc, #56]	; (80011a8 <led2Hz+0x168>)
 800116e:	f000 fd68 	bl	8001c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TL_PORT, NS_GREEN, 1);
 8001172:	2201      	movs	r2, #1
 8001174:	2140      	movs	r1, #64	; 0x40
 8001176:	480c      	ldr	r0, [pc, #48]	; (80011a8 <led2Hz+0x168>)
 8001178:	f000 fd63 	bl	8001c42 <HAL_GPIO_WritePin>
		if (!timerOn(0)) {
 800117c:	2000      	movs	r0, #0
 800117e:	f000 f97b 	bl	8001478 <timerOn>
 8001182:	4603      	mov	r3, r0
 8001184:	f083 0301 	eor.w	r3, r3, #1
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <led2Hz+0x15c>
			setTimer(0, TIME_BLINK_LED);
 800118e:	21fa      	movs	r1, #250	; 0xfa
 8001190:	2000      	movs	r0, #0
 8001192:	f000 f91d 	bl	80013d0 <setTimer>
			is_blink_led = 1;
 8001196:	4b02      	ldr	r3, [pc, #8]	; (80011a0 <led2Hz+0x160>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	2000009b 	.word	0x2000009b
 80011a4:	20000090 	.word	0x20000090
 80011a8:	40010800 	.word	0x40010800

080011ac <initButton>:
	bool is_pressed;
	bool is_long_pressed;
	uint16_t TimePress;
} MyButton[NUM_BUTTON];

void initButton() {
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_BUTTON; i++) {
 80011b2:	2300      	movs	r3, #0
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	e02c      	b.n	8001212 <initButton+0x66>
		MyButton[i].debounce[0] = RELEASED;
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	4a1a      	ldr	r2, [pc, #104]	; (8001224 <initButton+0x78>)
 80011bc:	2101      	movs	r1, #1
 80011be:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		MyButton[i].debounce[1] = RELEASED;
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4a17      	ldr	r2, [pc, #92]	; (8001224 <initButton+0x78>)
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4413      	add	r3, r2
 80011ca:	2201      	movs	r2, #1
 80011cc:	705a      	strb	r2, [r3, #1]
		MyButton[i].debounce[2] = RELEASED;
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4a14      	ldr	r2, [pc, #80]	; (8001224 <initButton+0x78>)
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4413      	add	r3, r2
 80011d6:	2201      	movs	r2, #1
 80011d8:	709a      	strb	r2, [r3, #2]
		MyButton[i].debounce[3] = RELEASED;
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	4a11      	ldr	r2, [pc, #68]	; (8001224 <initButton+0x78>)
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4413      	add	r3, r2
 80011e2:	2201      	movs	r2, #1
 80011e4:	70da      	strb	r2, [r3, #3]
		MyButton[i].is_pressed = 0;
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <initButton+0x78>)
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4413      	add	r3, r2
 80011ee:	2200      	movs	r2, #0
 80011f0:	711a      	strb	r2, [r3, #4]
		MyButton[i].is_long_pressed = 0;
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <initButton+0x78>)
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4413      	add	r3, r2
 80011fa:	2200      	movs	r2, #0
 80011fc:	715a      	strb	r2, [r3, #5]
		MyButton[i].TimePress = LONG_PRESSED_TIME;
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	4a08      	ldr	r2, [pc, #32]	; (8001224 <initButton+0x78>)
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	4413      	add	r3, r2
 8001206:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800120a:	80da      	strh	r2, [r3, #6]
	for (uint8_t i = 0; i < NUM_BUTTON; i++) {
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	3301      	adds	r3, #1
 8001210:	71fb      	strb	r3, [r7, #7]
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d9cf      	bls.n	80011b8 <initButton+0xc>
	}
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	2000009c 	.word	0x2000009c

08001228 <read_button>:

void read_button() {
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_BUTTON; i++) {
 800122e:	2300      	movs	r3, #0
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	e0aa      	b.n	800138a <read_button+0x162>
		MyButton[i].debounce[3] = MyButton[i].debounce[2];
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	79fa      	ldrb	r2, [r7, #7]
 8001238:	4958      	ldr	r1, [pc, #352]	; (800139c <read_button+0x174>)
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	440b      	add	r3, r1
 800123e:	7898      	ldrb	r0, [r3, #2]
 8001240:	4956      	ldr	r1, [pc, #344]	; (800139c <read_button+0x174>)
 8001242:	00d3      	lsls	r3, r2, #3
 8001244:	440b      	add	r3, r1
 8001246:	4602      	mov	r2, r0
 8001248:	70da      	strb	r2, [r3, #3]
		MyButton[i].debounce[2] = MyButton[i].debounce[1];
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	79fa      	ldrb	r2, [r7, #7]
 800124e:	4953      	ldr	r1, [pc, #332]	; (800139c <read_button+0x174>)
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	440b      	add	r3, r1
 8001254:	7858      	ldrb	r0, [r3, #1]
 8001256:	4951      	ldr	r1, [pc, #324]	; (800139c <read_button+0x174>)
 8001258:	00d3      	lsls	r3, r2, #3
 800125a:	440b      	add	r3, r1
 800125c:	4602      	mov	r2, r0
 800125e:	709a      	strb	r2, [r3, #2]
		MyButton[i].debounce[1] = MyButton[i].debounce[0];
 8001260:	79fa      	ldrb	r2, [r7, #7]
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	494d      	ldr	r1, [pc, #308]	; (800139c <read_button+0x174>)
 8001266:	f811 1032 	ldrb.w	r1, [r1, r2, lsl #3]
 800126a:	4a4c      	ldr	r2, [pc, #304]	; (800139c <read_button+0x174>)
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4413      	add	r3, r2
 8001270:	460a      	mov	r2, r1
 8001272:	705a      	strb	r2, [r3, #1]
		if (i == 0) {
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10a      	bne.n	8001290 <read_button+0x68>
			MyButton[i].debounce[0] = HAL_GPIO_ReadPin(BUTTON1_PORT,
 800127a:	79fc      	ldrb	r4, [r7, #7]
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	4848      	ldr	r0, [pc, #288]	; (80013a0 <read_button+0x178>)
 8001280:	f000 fcc8 	bl	8001c14 <HAL_GPIO_ReadPin>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	4b44      	ldr	r3, [pc, #272]	; (800139c <read_button+0x174>)
 800128a:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 800128e:	e01c      	b.n	80012ca <read_button+0xa2>
					BUTTON1_PIN);
		}
		else if (i == 1) {
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d10b      	bne.n	80012ae <read_button+0x86>
			MyButton[i].debounce[0] = HAL_GPIO_ReadPin(BUTTON2_PORT,
 8001296:	79fc      	ldrb	r4, [r7, #7]
 8001298:	f44f 7180 	mov.w	r1, #256	; 0x100
 800129c:	4840      	ldr	r0, [pc, #256]	; (80013a0 <read_button+0x178>)
 800129e:	f000 fcb9 	bl	8001c14 <HAL_GPIO_ReadPin>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b3d      	ldr	r3, [pc, #244]	; (800139c <read_button+0x174>)
 80012a8:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 80012ac:	e00d      	b.n	80012ca <read_button+0xa2>
					BUTTON2_PIN);
		}
		else if (i == 2) {
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d10a      	bne.n	80012ca <read_button+0xa2>
			MyButton[i].debounce[0] = HAL_GPIO_ReadPin(BUTTON3_PORT,
 80012b4:	79fc      	ldrb	r4, [r7, #7]
 80012b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ba:	4839      	ldr	r0, [pc, #228]	; (80013a0 <read_button+0x178>)
 80012bc:	f000 fcaa 	bl	8001c14 <HAL_GPIO_ReadPin>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b35      	ldr	r3, [pc, #212]	; (800139c <read_button+0x174>)
 80012c6:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
					BUTTON3_PIN);
		}
		if (MyButton[i].debounce[3] == MyButton[i].debounce[2]
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	4a33      	ldr	r2, [pc, #204]	; (800139c <read_button+0x174>)
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4413      	add	r3, r2
 80012d2:	78da      	ldrb	r2, [r3, #3]
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	4931      	ldr	r1, [pc, #196]	; (800139c <read_button+0x174>)
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	440b      	add	r3, r1
 80012dc:	789b      	ldrb	r3, [r3, #2]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d150      	bne.n	8001384 <read_button+0x15c>
				&& MyButton[i].debounce[2] == MyButton[i].debounce[1]
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4a2d      	ldr	r2, [pc, #180]	; (800139c <read_button+0x174>)
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4413      	add	r3, r2
 80012ea:	789a      	ldrb	r2, [r3, #2]
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	492b      	ldr	r1, [pc, #172]	; (800139c <read_button+0x174>)
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	440b      	add	r3, r1
 80012f4:	785b      	ldrb	r3, [r3, #1]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d144      	bne.n	8001384 <read_button+0x15c>
				&& MyButton[i].debounce[1] == MyButton[i].debounce[0]) {
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4a27      	ldr	r2, [pc, #156]	; (800139c <read_button+0x174>)
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4413      	add	r3, r2
 8001302:	785a      	ldrb	r2, [r3, #1]
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	4925      	ldr	r1, [pc, #148]	; (800139c <read_button+0x174>)
 8001308:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 800130c:	429a      	cmp	r2, r3
 800130e:	d139      	bne.n	8001384 <read_button+0x15c>
			if (MyButton[i].debounce[0] == PRESSED) {
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	4a22      	ldr	r2, [pc, #136]	; (800139c <read_button+0x174>)
 8001314:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d120      	bne.n	800135e <read_button+0x136>
				MyButton[i].is_pressed = 1;
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	4a1f      	ldr	r2, [pc, #124]	; (800139c <read_button+0x174>)
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	4413      	add	r3, r2
 8001324:	2201      	movs	r2, #1
 8001326:	711a      	strb	r2, [r3, #4]
				if (MyButton[i].TimePress > 0) {
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <read_button+0x174>)
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4413      	add	r3, r2
 8001330:	88db      	ldrh	r3, [r3, #6]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00c      	beq.n	8001350 <read_button+0x128>
					MyButton[i].TimePress--;
 8001336:	79fa      	ldrb	r2, [r7, #7]
 8001338:	4918      	ldr	r1, [pc, #96]	; (800139c <read_button+0x174>)
 800133a:	00d3      	lsls	r3, r2, #3
 800133c:	440b      	add	r3, r1
 800133e:	88db      	ldrh	r3, [r3, #6]
 8001340:	3b01      	subs	r3, #1
 8001342:	b298      	uxth	r0, r3
 8001344:	4915      	ldr	r1, [pc, #84]	; (800139c <read_button+0x174>)
 8001346:	00d3      	lsls	r3, r2, #3
 8001348:	440b      	add	r3, r1
 800134a:	4602      	mov	r2, r0
 800134c:	80da      	strh	r2, [r3, #6]
 800134e:	e019      	b.n	8001384 <read_button+0x15c>
				} else {
					MyButton[i].is_long_pressed = 1;
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <read_button+0x174>)
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4413      	add	r3, r2
 8001358:	2201      	movs	r2, #1
 800135a:	715a      	strb	r2, [r3, #5]
 800135c:	e012      	b.n	8001384 <read_button+0x15c>
				}
			} else {
				MyButton[i].TimePress = LONG_PRESSED_TIME;
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	4a0e      	ldr	r2, [pc, #56]	; (800139c <read_button+0x174>)
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	4413      	add	r3, r2
 8001366:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800136a:	80da      	strh	r2, [r3, #6]
				MyButton[i].is_pressed = 0;
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4a0b      	ldr	r2, [pc, #44]	; (800139c <read_button+0x174>)
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	4413      	add	r3, r2
 8001374:	2200      	movs	r2, #0
 8001376:	711a      	strb	r2, [r3, #4]
				MyButton[i].is_long_pressed = 0;
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <read_button+0x174>)
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	4413      	add	r3, r2
 8001380:	2200      	movs	r2, #0
 8001382:	715a      	strb	r2, [r3, #5]
	for (uint8_t i = 0; i < NUM_BUTTON; i++) {
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	3301      	adds	r3, #1
 8001388:	71fb      	strb	r3, [r7, #7]
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b02      	cmp	r3, #2
 800138e:	f67f af51 	bls.w	8001234 <read_button+0xc>
			}

		}
	}
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bd90      	pop	{r4, r7, pc}
 800139c:	2000009c 	.word	0x2000009c
 80013a0:	40010800 	.word	0x40010800

080013a4 <is_button_pressed>:

uint8_t is_button_pressed(uint8_t i) {
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
	if (i > NUM_BUTTON)
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d901      	bls.n	80013b8 <is_button_pressed+0x14>
		return 0xff;
 80013b4:	23ff      	movs	r3, #255	; 0xff
 80013b6:	e004      	b.n	80013c2 <is_button_pressed+0x1e>
	return MyButton[i].is_pressed;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	4a04      	ldr	r2, [pc, #16]	; (80013cc <is_button_pressed+0x28>)
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	4413      	add	r3, r2
 80013c0:	791b      	ldrb	r3, [r3, #4]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	2000009c 	.word	0x2000009c

080013d0 <setTimer>:
 * timer[2]: trafficlight
 * timer[3]: read button
 * timer[4]: overtimer increase
 * */

void setTimer(uint8_t idx, unsigned int duration) {
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]
	timer[idx].timer_counter = duration * Overall_Freq / 1000;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013e2:	fb03 f202 	mul.w	r2, r3, r2
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	4908      	ldr	r1, [pc, #32]	; (800140c <setTimer+0x3c>)
 80013ea:	fba1 1202 	umull	r1, r2, r1, r2
 80013ee:	0992      	lsrs	r2, r2, #6
 80013f0:	4907      	ldr	r1, [pc, #28]	; (8001410 <setTimer+0x40>)
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	440b      	add	r3, r1
 80013f6:	605a      	str	r2, [r3, #4]
	timer[idx].flag = 0;
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <setTimer+0x40>)
 80013fc:	2100      	movs	r1, #0
 80013fe:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	10624dd3 	.word	0x10624dd3
 8001410:	200000b4 	.word	0x200000b4

08001414 <timerRun>:


void timerRun() {
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
	for (uint8_t idx = 0; idx < NUM_OF_TIMER; idx++) {
 800141a:	2300      	movs	r3, #0
 800141c:	71fb      	strb	r3, [r7, #7]
 800141e:	e01f      	b.n	8001460 <timerRun+0x4c>
		if (timer[idx].timer_counter > 0) {
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4a14      	ldr	r2, [pc, #80]	; (8001474 <timerRun+0x60>)
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	4413      	add	r3, r2
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d015      	beq.n	800145a <timerRun+0x46>
			timer[idx].timer_counter--;
 800142e:	79fa      	ldrb	r2, [r7, #7]
 8001430:	4910      	ldr	r1, [pc, #64]	; (8001474 <timerRun+0x60>)
 8001432:	00d3      	lsls	r3, r2, #3
 8001434:	440b      	add	r3, r1
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	1e59      	subs	r1, r3, #1
 800143a:	480e      	ldr	r0, [pc, #56]	; (8001474 <timerRun+0x60>)
 800143c:	00d3      	lsls	r3, r2, #3
 800143e:	4403      	add	r3, r0
 8001440:	6059      	str	r1, [r3, #4]
			if (timer[idx].timer_counter <= 0) {
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <timerRun+0x60>)
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4413      	add	r3, r2
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d104      	bne.n	800145a <timerRun+0x46>
				timer[idx].flag = 1;
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <timerRun+0x60>)
 8001454:	2101      	movs	r1, #1
 8001456:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (uint8_t idx = 0; idx < NUM_OF_TIMER; idx++) {
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	3301      	adds	r3, #1
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	2b04      	cmp	r3, #4
 8001464:	d9dc      	bls.n	8001420 <timerRun+0xc>
			}
		}
	}

}
 8001466:	bf00      	nop
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	200000b4 	.word	0x200000b4

08001478 <timerOn>:

bool timerOn(uint8_t idx){
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
	return (!timer[idx].flag);
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	4a09      	ldr	r2, [pc, #36]	; (80014ac <timerOn+0x34>)
 8001486:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800148a:	2b00      	cmp	r3, #0
 800148c:	bf14      	ite	ne
 800148e:	2301      	movne	r3, #1
 8001490:	2300      	moveq	r3, #0
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f083 0301 	eor.w	r3, r3, #1
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	b2db      	uxtb	r3, r3
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	200000b4 	.word	0x200000b4

080014b0 <initTimer>:

void initTimer(){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	setTimer(0, TIME_BLINK_LED);
 80014b4:	21fa      	movs	r1, #250	; 0xfa
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff ff8a 	bl	80013d0 <setTimer>
	setTimer(1, TIME_SCAN_7SEG);
 80014bc:	2101      	movs	r1, #1
 80014be:	2001      	movs	r0, #1
 80014c0:	f7ff ff86 	bl	80013d0 <setTimer>
	setTimer(2, TIME_TRAFFIC_LIGHT);
 80014c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014c8:	2002      	movs	r0, #2
 80014ca:	f7ff ff81 	bl	80013d0 <setTimer>
	setTimer(3, TIME_BUTTON);
 80014ce:	2132      	movs	r1, #50	; 0x32
 80014d0:	2003      	movs	r0, #3
 80014d2:	f7ff ff7d 	bl	80013d0 <setTimer>
	setTimer(4, TIME_OVER);
 80014d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014da:	2004      	movs	r0, #4
 80014dc:	f7ff ff78 	bl	80013d0 <setTimer>
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <HAL_MspInit+0x40>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <HAL_MspInit+0x40>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6193      	str	r3, [r2, #24]
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_MspInit+0x40>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_MspInit+0x40>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_MspInit+0x40>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	61d3      	str	r3, [r2, #28]
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_MspInit+0x40>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001538:	d113      	bne.n	8001562 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_TIM_Base_MspInit+0x44>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <HAL_TIM_Base_MspInit+0x44>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_TIM_Base_MspInit+0x44>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	201c      	movs	r0, #28
 8001558:	f000 f9a1 	bl	800189e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800155c:	201c      	movs	r0, #28
 800155e:	f000 f9ba 	bl	80018d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <NMI_Handler+0x4>

08001576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <MemManage_Handler+0x4>

08001582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <BusFault_Handler+0x4>

08001588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <UsageFault_Handler+0x4>

0800158e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr

080015a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b6:	f000 f87f 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <TIM2_IRQHandler+0x10>)
 80015c6:	f000 ffd5 	bl	8002574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000048 	.word	0x20000048

080015d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e0:	f7ff fff8 	bl	80015d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e4:	480b      	ldr	r0, [pc, #44]	; (8001614 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015e6:	490c      	ldr	r1, [pc, #48]	; (8001618 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015e8:	4a0c      	ldr	r2, [pc, #48]	; (800161c <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a09      	ldr	r2, [pc, #36]	; (8001620 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015fc:	4c09      	ldr	r4, [pc, #36]	; (8001624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800160a:	f001 fb17 	bl	8002c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160e:	f7ff f8dd 	bl	80007cc <main>
  bx lr
 8001612:	4770      	bx	lr
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800161c:	08002cc8 	.word	0x08002cc8
  ldr r2, =_sbss
 8001620:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001624:	200000e0 	.word	0x200000e0

08001628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC1_2_IRQHandler>
	...

0800162c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_Init+0x28>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_Init+0x28>)
 8001636:	f043 0310 	orr.w	r3, r3, #16
 800163a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163c:	2003      	movs	r0, #3
 800163e:	f000 f923 	bl	8001888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001642:	200f      	movs	r0, #15
 8001644:	f000 f808 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001648:	f7ff ff4c 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40022000 	.word	0x40022000

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_InitTick+0x54>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x58>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f93b 	bl	80018f2 <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e00e      	b.n	80016a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d80a      	bhi.n	80016a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f000 f903 	bl	800189e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001698:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <HAL_InitTick+0x5c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000001c 	.word	0x2000001c
 80016b0:	20000024 	.word	0x20000024
 80016b4:	20000020 	.word	0x20000020

080016b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_IncTick+0x1c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_IncTick+0x20>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a03      	ldr	r2, [pc, #12]	; (80016d8 <HAL_IncTick+0x20>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	20000024 	.word	0x20000024
 80016d8:	200000dc 	.word	0x200000dc

080016dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b02      	ldr	r3, [pc, #8]	; (80016ec <HAL_GetTick+0x10>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	200000dc 	.word	0x200000dc

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800171c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	db0b      	blt.n	800177e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 021f 	and.w	r2, r3, #31
 800176c:	4906      	ldr	r1, [pc, #24]	; (8001788 <__NVIC_EnableIRQ+0x34>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	2001      	movs	r0, #1
 8001776:	fa00 f202 	lsl.w	r2, r0, r2
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	e000e100 	.word	0xe000e100

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	; (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	; (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001854:	d301      	bcc.n	800185a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001856:	2301      	movs	r3, #1
 8001858:	e00f      	b.n	800187a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <SysTick_Config+0x40>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001862:	210f      	movs	r1, #15
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	f7ff ff90 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <SysTick_Config+0x40>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001872:	4b04      	ldr	r3, [pc, #16]	; (8001884 <SysTick_Config+0x40>)
 8001874:	2207      	movs	r2, #7
 8001876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	e000e010 	.word	0xe000e010

08001888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ff2d 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b0:	f7ff ff42 	bl	8001738 <__NVIC_GetPriorityGrouping>
 80018b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	6978      	ldr	r0, [r7, #20]
 80018bc:	f7ff ff90 	bl	80017e0 <NVIC_EncodePriority>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff5f 	bl	800178c <__NVIC_SetPriority>
}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff35 	bl	8001754 <__NVIC_EnableIRQ>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffa2 	bl	8001844 <SysTick_Config>
 8001900:	4603      	mov	r3, r0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b480      	push	{r7}
 800190e:	b08b      	sub	sp, #44	; 0x2c
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191e:	e169      	b.n	8001bf4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001920:	2201      	movs	r2, #1
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	429a      	cmp	r2, r3
 800193a:	f040 8158 	bne.w	8001bee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4a9a      	ldr	r2, [pc, #616]	; (8001bac <HAL_GPIO_Init+0x2a0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d05e      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001948:	4a98      	ldr	r2, [pc, #608]	; (8001bac <HAL_GPIO_Init+0x2a0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d875      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 800194e:	4a98      	ldr	r2, [pc, #608]	; (8001bb0 <HAL_GPIO_Init+0x2a4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d058      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001954:	4a96      	ldr	r2, [pc, #600]	; (8001bb0 <HAL_GPIO_Init+0x2a4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d86f      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 800195a:	4a96      	ldr	r2, [pc, #600]	; (8001bb4 <HAL_GPIO_Init+0x2a8>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d052      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001960:	4a94      	ldr	r2, [pc, #592]	; (8001bb4 <HAL_GPIO_Init+0x2a8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d869      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 8001966:	4a94      	ldr	r2, [pc, #592]	; (8001bb8 <HAL_GPIO_Init+0x2ac>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d04c      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 800196c:	4a92      	ldr	r2, [pc, #584]	; (8001bb8 <HAL_GPIO_Init+0x2ac>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d863      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 8001972:	4a92      	ldr	r2, [pc, #584]	; (8001bbc <HAL_GPIO_Init+0x2b0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d046      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001978:	4a90      	ldr	r2, [pc, #576]	; (8001bbc <HAL_GPIO_Init+0x2b0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d85d      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 800197e:	2b12      	cmp	r3, #18
 8001980:	d82a      	bhi.n	80019d8 <HAL_GPIO_Init+0xcc>
 8001982:	2b12      	cmp	r3, #18
 8001984:	d859      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 8001986:	a201      	add	r2, pc, #4	; (adr r2, 800198c <HAL_GPIO_Init+0x80>)
 8001988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198c:	08001a07 	.word	0x08001a07
 8001990:	080019e1 	.word	0x080019e1
 8001994:	080019f3 	.word	0x080019f3
 8001998:	08001a35 	.word	0x08001a35
 800199c:	08001a3b 	.word	0x08001a3b
 80019a0:	08001a3b 	.word	0x08001a3b
 80019a4:	08001a3b 	.word	0x08001a3b
 80019a8:	08001a3b 	.word	0x08001a3b
 80019ac:	08001a3b 	.word	0x08001a3b
 80019b0:	08001a3b 	.word	0x08001a3b
 80019b4:	08001a3b 	.word	0x08001a3b
 80019b8:	08001a3b 	.word	0x08001a3b
 80019bc:	08001a3b 	.word	0x08001a3b
 80019c0:	08001a3b 	.word	0x08001a3b
 80019c4:	08001a3b 	.word	0x08001a3b
 80019c8:	08001a3b 	.word	0x08001a3b
 80019cc:	08001a3b 	.word	0x08001a3b
 80019d0:	080019e9 	.word	0x080019e9
 80019d4:	080019fd 	.word	0x080019fd
 80019d8:	4a79      	ldr	r2, [pc, #484]	; (8001bc0 <HAL_GPIO_Init+0x2b4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019de:	e02c      	b.n	8001a3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	623b      	str	r3, [r7, #32]
          break;
 80019e6:	e029      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	3304      	adds	r3, #4
 80019ee:	623b      	str	r3, [r7, #32]
          break;
 80019f0:	e024      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	3308      	adds	r3, #8
 80019f8:	623b      	str	r3, [r7, #32]
          break;
 80019fa:	e01f      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	330c      	adds	r3, #12
 8001a02:	623b      	str	r3, [r7, #32]
          break;
 8001a04:	e01a      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	623b      	str	r3, [r7, #32]
          break;
 8001a12:	e013      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d105      	bne.n	8001a28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	611a      	str	r2, [r3, #16]
          break;
 8001a26:	e009      	b.n	8001a3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a28:	2308      	movs	r3, #8
 8001a2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	615a      	str	r2, [r3, #20]
          break;
 8001a32:	e003      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
          break;
 8001a38:	e000      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          break;
 8001a3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2bff      	cmp	r3, #255	; 0xff
 8001a40:	d801      	bhi.n	8001a46 <HAL_GPIO_Init+0x13a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	e001      	b.n	8001a4a <HAL_GPIO_Init+0x13e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2bff      	cmp	r3, #255	; 0xff
 8001a50:	d802      	bhi.n	8001a58 <HAL_GPIO_Init+0x14c>
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	e002      	b.n	8001a5e <HAL_GPIO_Init+0x152>
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	3b08      	subs	r3, #8
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	210f      	movs	r1, #15
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	401a      	ands	r2, r3
 8001a70:	6a39      	ldr	r1, [r7, #32]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 80b1 	beq.w	8001bee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a8c:	4b4d      	ldr	r3, [pc, #308]	; (8001bc4 <HAL_GPIO_Init+0x2b8>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a4c      	ldr	r2, [pc, #304]	; (8001bc4 <HAL_GPIO_Init+0x2b8>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6193      	str	r3, [r2, #24]
 8001a98:	4b4a      	ldr	r3, [pc, #296]	; (8001bc4 <HAL_GPIO_Init+0x2b8>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa4:	4a48      	ldr	r2, [pc, #288]	; (8001bc8 <HAL_GPIO_Init+0x2bc>)
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220f      	movs	r2, #15
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a40      	ldr	r2, [pc, #256]	; (8001bcc <HAL_GPIO_Init+0x2c0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d013      	beq.n	8001af8 <HAL_GPIO_Init+0x1ec>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a3f      	ldr	r2, [pc, #252]	; (8001bd0 <HAL_GPIO_Init+0x2c4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d00d      	beq.n	8001af4 <HAL_GPIO_Init+0x1e8>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a3e      	ldr	r2, [pc, #248]	; (8001bd4 <HAL_GPIO_Init+0x2c8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d007      	beq.n	8001af0 <HAL_GPIO_Init+0x1e4>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a3d      	ldr	r2, [pc, #244]	; (8001bd8 <HAL_GPIO_Init+0x2cc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d101      	bne.n	8001aec <HAL_GPIO_Init+0x1e0>
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e006      	b.n	8001afa <HAL_GPIO_Init+0x1ee>
 8001aec:	2304      	movs	r3, #4
 8001aee:	e004      	b.n	8001afa <HAL_GPIO_Init+0x1ee>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e002      	b.n	8001afa <HAL_GPIO_Init+0x1ee>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <HAL_GPIO_Init+0x1ee>
 8001af8:	2300      	movs	r3, #0
 8001afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afc:	f002 0203 	and.w	r2, r2, #3
 8001b00:	0092      	lsls	r2, r2, #2
 8001b02:	4093      	lsls	r3, r2
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b0a:	492f      	ldr	r1, [pc, #188]	; (8001bc8 <HAL_GPIO_Init+0x2bc>)
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	3302      	adds	r3, #2
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b24:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	492c      	ldr	r1, [pc, #176]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b32:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4928      	ldr	r1, [pc, #160]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d006      	beq.n	8001b5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b4c:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	4922      	ldr	r1, [pc, #136]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	60cb      	str	r3, [r1, #12]
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b5a:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	491e      	ldr	r1, [pc, #120]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	4918      	ldr	r1, [pc, #96]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	4914      	ldr	r1, [pc, #80]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d021      	beq.n	8001be0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	490e      	ldr	r1, [pc, #56]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
 8001ba8:	e021      	b.n	8001bee <HAL_GPIO_Init+0x2e2>
 8001baa:	bf00      	nop
 8001bac:	10320000 	.word	0x10320000
 8001bb0:	10310000 	.word	0x10310000
 8001bb4:	10220000 	.word	0x10220000
 8001bb8:	10210000 	.word	0x10210000
 8001bbc:	10120000 	.word	0x10120000
 8001bc0:	10110000 	.word	0x10110000
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	40010800 	.word	0x40010800
 8001bd0:	40010c00 	.word	0x40010c00
 8001bd4:	40011000 	.word	0x40011000
 8001bd8:	40011400 	.word	0x40011400
 8001bdc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	4909      	ldr	r1, [pc, #36]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f47f ae8e 	bne.w	8001920 <HAL_GPIO_Init+0x14>
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	372c      	adds	r7, #44	; 0x2c
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	40010400 	.word	0x40010400

08001c14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	887b      	ldrh	r3, [r7, #2]
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	e001      	b.n	8001c36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	807b      	strh	r3, [r7, #2]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c52:	787b      	ldrb	r3, [r7, #1]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c58:	887a      	ldrh	r2, [r7, #2]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c5e:	e003      	b.n	8001c68 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c60:	887b      	ldrh	r3, [r7, #2]
 8001c62:	041a      	lsls	r2, r3, #16
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	611a      	str	r2, [r3, #16]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
	...

08001c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e272      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8087 	beq.w	8001da2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c94:	4b92      	ldr	r3, [pc, #584]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d00c      	beq.n	8001cba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca0:	4b8f      	ldr	r3, [pc, #572]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d112      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x5e>
 8001cac:	4b8c      	ldr	r3, [pc, #560]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb8:	d10b      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cba:	4b89      	ldr	r3, [pc, #548]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d06c      	beq.n	8001da0 <HAL_RCC_OscConfig+0x12c>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d168      	bne.n	8001da0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e24c      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x76>
 8001cdc:	4b80      	ldr	r3, [pc, #512]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a7f      	ldr	r2, [pc, #508]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	e02e      	b.n	8001d48 <HAL_RCC_OscConfig+0xd4>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x98>
 8001cf2:	4b7b      	ldr	r3, [pc, #492]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a7a      	ldr	r2, [pc, #488]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b78      	ldr	r3, [pc, #480]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a77      	ldr	r2, [pc, #476]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e01d      	b.n	8001d48 <HAL_RCC_OscConfig+0xd4>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0xbc>
 8001d16:	4b72      	ldr	r3, [pc, #456]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a71      	ldr	r2, [pc, #452]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b6f      	ldr	r3, [pc, #444]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a6e      	ldr	r2, [pc, #440]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0xd4>
 8001d30:	4b6b      	ldr	r3, [pc, #428]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a6a      	ldr	r2, [pc, #424]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b68      	ldr	r3, [pc, #416]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a67      	ldr	r2, [pc, #412]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d013      	beq.n	8001d78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff fcc4 	bl	80016dc <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff fcc0 	bl	80016dc <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e200      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	4b5d      	ldr	r3, [pc, #372]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0xe4>
 8001d76:	e014      	b.n	8001da2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff fcb0 	bl	80016dc <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff fcac 	bl	80016dc <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e1ec      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d92:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x10c>
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d063      	beq.n	8001e76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dae:	4b4c      	ldr	r3, [pc, #304]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dba:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d11c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x18c>
 8001dc6:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d116      	bne.n	8001e00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	4b43      	ldr	r3, [pc, #268]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_RCC_OscConfig+0x176>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e1c0      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4939      	ldr	r1, [pc, #228]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	e03a      	b.n	8001e76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e08:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <HAL_RCC_OscConfig+0x270>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7ff fc65 	bl	80016dc <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e16:	f7ff fc61 	bl	80016dc <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e1a1      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e28:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e34:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4927      	ldr	r1, [pc, #156]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
 8001e48:	e015      	b.n	8001e76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4a:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <HAL_RCC_OscConfig+0x270>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7ff fc44 	bl	80016dc <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e58:	f7ff fc40 	bl	80016dc <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e180      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d03a      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d019      	beq.n	8001ebe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e90:	f7ff fc24 	bl	80016dc <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e98:	f7ff fc20 	bl	80016dc <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e160      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f000 fa9c 	bl	80023f4 <RCC_Delay>
 8001ebc:	e01c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_RCC_OscConfig+0x274>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec4:	f7ff fc0a 	bl	80016dc <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eca:	e00f      	b.n	8001eec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ecc:	f7ff fc06 	bl	80016dc <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d908      	bls.n	8001eec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e146      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	42420000 	.word	0x42420000
 8001ee8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eec:	4b92      	ldr	r3, [pc, #584]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1e9      	bne.n	8001ecc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80a6 	beq.w	8002052 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0a:	4b8b      	ldr	r3, [pc, #556]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10d      	bne.n	8001f32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	4b88      	ldr	r3, [pc, #544]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	4a87      	ldr	r2, [pc, #540]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f20:	61d3      	str	r3, [r2, #28]
 8001f22:	4b85      	ldr	r3, [pc, #532]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b82      	ldr	r3, [pc, #520]	; (800213c <HAL_RCC_OscConfig+0x4c8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d118      	bne.n	8001f70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3e:	4b7f      	ldr	r3, [pc, #508]	; (800213c <HAL_RCC_OscConfig+0x4c8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a7e      	ldr	r2, [pc, #504]	; (800213c <HAL_RCC_OscConfig+0x4c8>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fbc7 	bl	80016dc <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f52:	f7ff fbc3 	bl	80016dc <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b64      	cmp	r3, #100	; 0x64
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e103      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	4b75      	ldr	r3, [pc, #468]	; (800213c <HAL_RCC_OscConfig+0x4c8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_OscConfig+0x312>
 8001f78:	4b6f      	ldr	r3, [pc, #444]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4a6e      	ldr	r2, [pc, #440]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6213      	str	r3, [r2, #32]
 8001f84:	e02d      	b.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x334>
 8001f8e:	4b6a      	ldr	r3, [pc, #424]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a69      	ldr	r2, [pc, #420]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	6213      	str	r3, [r2, #32]
 8001f9a:	4b67      	ldr	r3, [pc, #412]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4a66      	ldr	r2, [pc, #408]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	6213      	str	r3, [r2, #32]
 8001fa6:	e01c      	b.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d10c      	bne.n	8001fca <HAL_RCC_OscConfig+0x356>
 8001fb0:	4b61      	ldr	r3, [pc, #388]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4a60      	ldr	r2, [pc, #384]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	f043 0304 	orr.w	r3, r3, #4
 8001fba:	6213      	str	r3, [r2, #32]
 8001fbc:	4b5e      	ldr	r3, [pc, #376]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4a5d      	ldr	r2, [pc, #372]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6213      	str	r3, [r2, #32]
 8001fc8:	e00b      	b.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
 8001fca:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a5a      	ldr	r2, [pc, #360]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6213      	str	r3, [r2, #32]
 8001fd6:	4b58      	ldr	r3, [pc, #352]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a57      	ldr	r2, [pc, #348]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d015      	beq.n	8002016 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7ff fb77 	bl	80016dc <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7ff fb73 	bl	80016dc <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e0b1      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002008:	4b4b      	ldr	r3, [pc, #300]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0ee      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x37e>
 8002014:	e014      	b.n	8002040 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7ff fb61 	bl	80016dc <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7ff fb5d 	bl	80016dc <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	; 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e09b      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002034:	4b40      	ldr	r3, [pc, #256]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1ee      	bne.n	800201e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002040:	7dfb      	ldrb	r3, [r7, #23]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d105      	bne.n	8002052 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002046:	4b3c      	ldr	r3, [pc, #240]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	4a3b      	ldr	r2, [pc, #236]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002050:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8087 	beq.w	800216a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800205c:	4b36      	ldr	r3, [pc, #216]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d061      	beq.n	800212c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d146      	bne.n	80020fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002070:	4b33      	ldr	r3, [pc, #204]	; (8002140 <HAL_RCC_OscConfig+0x4cc>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7ff fb31 	bl	80016dc <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207e:	f7ff fb2d 	bl	80016dc <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e06d      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002090:	4b29      	ldr	r3, [pc, #164]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f0      	bne.n	800207e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a4:	d108      	bne.n	80020b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	4921      	ldr	r1, [pc, #132]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b8:	4b1f      	ldr	r3, [pc, #124]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a19      	ldr	r1, [r3, #32]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	430b      	orrs	r3, r1
 80020ca:	491b      	ldr	r1, [pc, #108]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_RCC_OscConfig+0x4cc>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7ff fb01 	bl	80016dc <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020de:	f7ff fafd 	bl	80016dc <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e03d      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x46a>
 80020fc:	e035      	b.n	800216a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <HAL_RCC_OscConfig+0x4cc>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff faea 	bl	80016dc <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210c:	f7ff fae6 	bl	80016dc <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e026      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x498>
 800212a:	e01e      	b.n	800216a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d107      	bne.n	8002144 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e019      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
 8002138:	40021000 	.word	0x40021000
 800213c:	40007000 	.word	0x40007000
 8002140:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCC_OscConfig+0x500>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	429a      	cmp	r2, r3
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d001      	beq.n	800216a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000

08002178 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0d0      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800218c:	4b6a      	ldr	r3, [pc, #424]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d910      	bls.n	80021bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b67      	ldr	r3, [pc, #412]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 0207 	bic.w	r2, r3, #7
 80021a2:	4965      	ldr	r1, [pc, #404]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b63      	ldr	r3, [pc, #396]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0b8      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d020      	beq.n	800220a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d4:	4b59      	ldr	r3, [pc, #356]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4a58      	ldr	r2, [pc, #352]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021ec:	4b53      	ldr	r3, [pc, #332]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a52      	ldr	r2, [pc, #328]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f8:	4b50      	ldr	r3, [pc, #320]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	494d      	ldr	r1, [pc, #308]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d040      	beq.n	8002298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d107      	bne.n	800222e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	4b47      	ldr	r3, [pc, #284]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d115      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e07f      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002236:	4b41      	ldr	r3, [pc, #260]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e073      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	4b3d      	ldr	r3, [pc, #244]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e06b      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002256:	4b39      	ldr	r3, [pc, #228]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f023 0203 	bic.w	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4936      	ldr	r1, [pc, #216]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002268:	f7ff fa38 	bl	80016dc <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	e00a      	b.n	8002286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002270:	f7ff fa34 	bl	80016dc <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e053      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	4b2d      	ldr	r3, [pc, #180]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 020c 	and.w	r2, r3, #12
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	429a      	cmp	r2, r3
 8002296:	d1eb      	bne.n	8002270 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002298:	4b27      	ldr	r3, [pc, #156]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d210      	bcs.n	80022c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b24      	ldr	r3, [pc, #144]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 0207 	bic.w	r2, r3, #7
 80022ae:	4922      	ldr	r1, [pc, #136]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e032      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4916      	ldr	r1, [pc, #88]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022f2:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	490e      	ldr	r1, [pc, #56]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002306:	f000 f821 	bl	800234c <HAL_RCC_GetSysClockFreq>
 800230a:	4602      	mov	r2, r0
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	490a      	ldr	r1, [pc, #40]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 8002318:	5ccb      	ldrb	r3, [r1, r3]
 800231a:	fa22 f303 	lsr.w	r3, r2, r3
 800231e:	4a09      	ldr	r2, [pc, #36]	; (8002344 <HAL_RCC_ClockConfig+0x1cc>)
 8002320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_RCC_ClockConfig+0x1d0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff f996 	bl	8001658 <HAL_InitTick>

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40022000 	.word	0x40022000
 800233c:	40021000 	.word	0x40021000
 8002340:	08002c9c 	.word	0x08002c9c
 8002344:	2000001c 	.word	0x2000001c
 8002348:	20000020 	.word	0x20000020

0800234c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002366:	4b1e      	ldr	r3, [pc, #120]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b04      	cmp	r3, #4
 8002374:	d002      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x30>
 8002376:	2b08      	cmp	r3, #8
 8002378:	d003      	beq.n	8002382 <HAL_RCC_GetSysClockFreq+0x36>
 800237a:	e027      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800237e:	613b      	str	r3, [r7, #16]
      break;
 8002380:	e027      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	0c9b      	lsrs	r3, r3, #18
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	4a17      	ldr	r2, [pc, #92]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800238c:	5cd3      	ldrb	r3, [r2, r3]
 800238e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d010      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	0c5b      	lsrs	r3, r3, #17
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	4a11      	ldr	r2, [pc, #68]	; (80023ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80023a6:	5cd3      	ldrb	r3, [r2, r3]
 80023a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a0d      	ldr	r2, [pc, #52]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ae:	fb03 f202 	mul.w	r2, r3, r2
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e004      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a0c      	ldr	r2, [pc, #48]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023c0:	fb02 f303 	mul.w	r3, r2, r3
 80023c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	613b      	str	r3, [r7, #16]
      break;
 80023ca:	e002      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ce:	613b      	str	r3, [r7, #16]
      break;
 80023d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d2:	693b      	ldr	r3, [r7, #16]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000
 80023e4:	007a1200 	.word	0x007a1200
 80023e8:	08002cac 	.word	0x08002cac
 80023ec:	08002cbc 	.word	0x08002cbc
 80023f0:	003d0900 	.word	0x003d0900

080023f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <RCC_Delay+0x34>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0a      	ldr	r2, [pc, #40]	; (800242c <RCC_Delay+0x38>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	0a5b      	lsrs	r3, r3, #9
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002410:	bf00      	nop
  }
  while (Delay --);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1e5a      	subs	r2, r3, #1
 8002416:	60fa      	str	r2, [r7, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f9      	bne.n	8002410 <RCC_Delay+0x1c>
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	2000001c 	.word	0x2000001c
 800242c:	10624dd3 	.word	0x10624dd3

08002430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e041      	b.n	80024c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff f866 	bl	8001528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3304      	adds	r3, #4
 800246c:	4619      	mov	r1, r3
 800246e:	4610      	mov	r0, r2
 8002470:	f000 fa74 	bl	800295c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d001      	beq.n	80024e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e03a      	b.n	800255e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a18      	ldr	r2, [pc, #96]	; (8002568 <HAL_TIM_Base_Start_IT+0x98>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00e      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x58>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002512:	d009      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x58>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a14      	ldr	r2, [pc, #80]	; (800256c <HAL_TIM_Base_Start_IT+0x9c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d004      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x58>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a13      	ldr	r2, [pc, #76]	; (8002570 <HAL_TIM_Base_Start_IT+0xa0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d111      	bne.n	800254c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b06      	cmp	r3, #6
 8002538:	d010      	beq.n	800255c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0201 	orr.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254a:	e007      	b.n	800255c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	40012c00 	.word	0x40012c00
 800256c:	40000400 	.word	0x40000400
 8002570:	40000800 	.word	0x40000800

08002574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b02      	cmp	r3, #2
 8002588:	d122      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b02      	cmp	r3, #2
 8002596:	d11b      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0202 	mvn.w	r2, #2
 80025a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f9b4 	bl	8002924 <HAL_TIM_IC_CaptureCallback>
 80025bc:	e005      	b.n	80025ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f9a7 	bl	8002912 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f9b6 	bl	8002936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d122      	bne.n	8002624 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d11b      	bne.n	8002624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0204 	mvn.w	r2, #4
 80025f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2202      	movs	r2, #2
 80025fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f98a 	bl	8002924 <HAL_TIM_IC_CaptureCallback>
 8002610:	e005      	b.n	800261e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f97d 	bl	8002912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f98c 	bl	8002936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b08      	cmp	r3, #8
 8002630:	d122      	bne.n	8002678 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b08      	cmp	r3, #8
 800263e:	d11b      	bne.n	8002678 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0208 	mvn.w	r2, #8
 8002648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2204      	movs	r2, #4
 800264e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f960 	bl	8002924 <HAL_TIM_IC_CaptureCallback>
 8002664:	e005      	b.n	8002672 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f953 	bl	8002912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f962 	bl	8002936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b10      	cmp	r3, #16
 8002684:	d122      	bne.n	80026cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b10      	cmp	r3, #16
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0210 	mvn.w	r2, #16
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2208      	movs	r2, #8
 80026a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f936 	bl	8002924 <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f929 	bl	8002912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f938 	bl	8002936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d10e      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d107      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0201 	mvn.w	r2, #1
 80026f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fe f99c 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002702:	2b80      	cmp	r3, #128	; 0x80
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002710:	2b80      	cmp	r3, #128	; 0x80
 8002712:	d107      	bne.n	8002724 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800271c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 fa7b 	bl	8002c1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	2b40      	cmp	r3, #64	; 0x40
 8002730:	d10e      	bne.n	8002750 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	2b40      	cmp	r3, #64	; 0x40
 800273e:	d107      	bne.n	8002750 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f8fc 	bl	8002948 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b20      	cmp	r3, #32
 800275c:	d10e      	bne.n	800277c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0320 	and.w	r3, r3, #32
 8002768:	2b20      	cmp	r3, #32
 800276a:	d107      	bne.n	800277c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0220 	mvn.w	r2, #32
 8002774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fa46 	bl	8002c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_TIM_ConfigClockSource+0x1c>
 800279c:	2302      	movs	r3, #2
 800279e:	e0b4      	b.n	800290a <HAL_TIM_ConfigClockSource+0x186>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d8:	d03e      	beq.n	8002858 <HAL_TIM_ConfigClockSource+0xd4>
 80027da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027de:	f200 8087 	bhi.w	80028f0 <HAL_TIM_ConfigClockSource+0x16c>
 80027e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e6:	f000 8086 	beq.w	80028f6 <HAL_TIM_ConfigClockSource+0x172>
 80027ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ee:	d87f      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x16c>
 80027f0:	2b70      	cmp	r3, #112	; 0x70
 80027f2:	d01a      	beq.n	800282a <HAL_TIM_ConfigClockSource+0xa6>
 80027f4:	2b70      	cmp	r3, #112	; 0x70
 80027f6:	d87b      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x16c>
 80027f8:	2b60      	cmp	r3, #96	; 0x60
 80027fa:	d050      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x11a>
 80027fc:	2b60      	cmp	r3, #96	; 0x60
 80027fe:	d877      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002800:	2b50      	cmp	r3, #80	; 0x50
 8002802:	d03c      	beq.n	800287e <HAL_TIM_ConfigClockSource+0xfa>
 8002804:	2b50      	cmp	r3, #80	; 0x50
 8002806:	d873      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002808:	2b40      	cmp	r3, #64	; 0x40
 800280a:	d058      	beq.n	80028be <HAL_TIM_ConfigClockSource+0x13a>
 800280c:	2b40      	cmp	r3, #64	; 0x40
 800280e:	d86f      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002810:	2b30      	cmp	r3, #48	; 0x30
 8002812:	d064      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x15a>
 8002814:	2b30      	cmp	r3, #48	; 0x30
 8002816:	d86b      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002818:	2b20      	cmp	r3, #32
 800281a:	d060      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x15a>
 800281c:	2b20      	cmp	r3, #32
 800281e:	d867      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002820:	2b00      	cmp	r3, #0
 8002822:	d05c      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x15a>
 8002824:	2b10      	cmp	r3, #16
 8002826:	d05a      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x15a>
 8002828:	e062      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800283a:	f000 f968 	bl	8002b0e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800284c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	609a      	str	r2, [r3, #8]
      break;
 8002856:	e04f      	b.n	80028f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002868:	f000 f951 	bl	8002b0e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800287a:	609a      	str	r2, [r3, #8]
      break;
 800287c:	e03c      	b.n	80028f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800288a:	461a      	mov	r2, r3
 800288c:	f000 f8c8 	bl	8002a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2150      	movs	r1, #80	; 0x50
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f91f 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 800289c:	e02c      	b.n	80028f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028aa:	461a      	mov	r2, r3
 80028ac:	f000 f8e6 	bl	8002a7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2160      	movs	r1, #96	; 0x60
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 f90f 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 80028bc:	e01c      	b.n	80028f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ca:	461a      	mov	r2, r3
 80028cc:	f000 f8a8 	bl	8002a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2140      	movs	r1, #64	; 0x40
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f8ff 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 80028dc:	e00c      	b.n	80028f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4619      	mov	r1, r3
 80028e8:	4610      	mov	r0, r2
 80028ea:	f000 f8f6 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 80028ee:	e003      	b.n	80028f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      break;
 80028f4:	e000      	b.n	80028f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002908:	7bfb      	ldrb	r3, [r7, #15]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr
	...

0800295c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a29      	ldr	r2, [pc, #164]	; (8002a14 <TIM_Base_SetConfig+0xb8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00b      	beq.n	800298c <TIM_Base_SetConfig+0x30>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297a:	d007      	beq.n	800298c <TIM_Base_SetConfig+0x30>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <TIM_Base_SetConfig+0xbc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d003      	beq.n	800298c <TIM_Base_SetConfig+0x30>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a25      	ldr	r2, [pc, #148]	; (8002a1c <TIM_Base_SetConfig+0xc0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d108      	bne.n	800299e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1c      	ldr	r2, [pc, #112]	; (8002a14 <TIM_Base_SetConfig+0xb8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00b      	beq.n	80029be <TIM_Base_SetConfig+0x62>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ac:	d007      	beq.n	80029be <TIM_Base_SetConfig+0x62>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a19      	ldr	r2, [pc, #100]	; (8002a18 <TIM_Base_SetConfig+0xbc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d003      	beq.n	80029be <TIM_Base_SetConfig+0x62>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a18      	ldr	r2, [pc, #96]	; (8002a1c <TIM_Base_SetConfig+0xc0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d108      	bne.n	80029d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <TIM_Base_SetConfig+0xb8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d103      	bne.n	8002a04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	615a      	str	r2, [r3, #20]
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	40012c00 	.word	0x40012c00
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800

08002a20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	f023 0201 	bic.w	r2, r3, #1
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f023 030a 	bic.w	r3, r3, #10
 8002a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	621a      	str	r2, [r3, #32]
}
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	f023 0210 	bic.w	r2, r3, #16
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	031b      	lsls	r3, r3, #12
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	621a      	str	r2, [r3, #32]
}
 8002ad0:	bf00      	nop
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f043 0307 	orr.w	r3, r3, #7
 8002afc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	609a      	str	r2, [r3, #8]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b087      	sub	sp, #28
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	021a      	lsls	r2, r3, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	609a      	str	r2, [r3, #8]
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e046      	b.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a16      	ldr	r2, [pc, #88]	; (8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d00e      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb0:	d009      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d004      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a10      	ldr	r2, [pc, #64]	; (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d10c      	bne.n	8002be0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40000400 	.word	0x40000400
 8002c04:	40000800 	.word	0x40000800

08002c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <memset>:
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4402      	add	r2, r0
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d100      	bne.n	8002c36 <memset+0xa>
 8002c34:	4770      	bx	lr
 8002c36:	f803 1b01 	strb.w	r1, [r3], #1
 8002c3a:	e7f9      	b.n	8002c30 <memset+0x4>

08002c3c <__libc_init_array>:
 8002c3c:	b570      	push	{r4, r5, r6, lr}
 8002c3e:	2600      	movs	r6, #0
 8002c40:	4d0c      	ldr	r5, [pc, #48]	; (8002c74 <__libc_init_array+0x38>)
 8002c42:	4c0d      	ldr	r4, [pc, #52]	; (8002c78 <__libc_init_array+0x3c>)
 8002c44:	1b64      	subs	r4, r4, r5
 8002c46:	10a4      	asrs	r4, r4, #2
 8002c48:	42a6      	cmp	r6, r4
 8002c4a:	d109      	bne.n	8002c60 <__libc_init_array+0x24>
 8002c4c:	f000 f81a 	bl	8002c84 <_init>
 8002c50:	2600      	movs	r6, #0
 8002c52:	4d0a      	ldr	r5, [pc, #40]	; (8002c7c <__libc_init_array+0x40>)
 8002c54:	4c0a      	ldr	r4, [pc, #40]	; (8002c80 <__libc_init_array+0x44>)
 8002c56:	1b64      	subs	r4, r4, r5
 8002c58:	10a4      	asrs	r4, r4, #2
 8002c5a:	42a6      	cmp	r6, r4
 8002c5c:	d105      	bne.n	8002c6a <__libc_init_array+0x2e>
 8002c5e:	bd70      	pop	{r4, r5, r6, pc}
 8002c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c64:	4798      	blx	r3
 8002c66:	3601      	adds	r6, #1
 8002c68:	e7ee      	b.n	8002c48 <__libc_init_array+0xc>
 8002c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c6e:	4798      	blx	r3
 8002c70:	3601      	adds	r6, #1
 8002c72:	e7f2      	b.n	8002c5a <__libc_init_array+0x1e>
 8002c74:	08002cc0 	.word	0x08002cc0
 8002c78:	08002cc0 	.word	0x08002cc0
 8002c7c:	08002cc0 	.word	0x08002cc0
 8002c80:	08002cc4 	.word	0x08002cc4

08002c84 <_init>:
 8002c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c86:	bf00      	nop
 8002c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8a:	bc08      	pop	{r3}
 8002c8c:	469e      	mov	lr, r3
 8002c8e:	4770      	bx	lr

08002c90 <_fini>:
 8002c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c92:	bf00      	nop
 8002c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c96:	bc08      	pop	{r3}
 8002c98:	469e      	mov	lr, r3
 8002c9a:	4770      	bx	lr
